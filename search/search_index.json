{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IFCD0211 SISTEMAS DE GESTION DE INFORMACION","text":""},{"location":"#certificado-de-profesionalidad-sistemas-de-gestion-de-informacion-ifcd0211","title":"Certificado de Profesionalidad: Sistemas de Gesti\u00f3n de Informaci\u00f3n (IFCD0211)","text":""},{"location":"#normativa","title":"Normativa","text":"<ul> <li>Normativa General</li> </ul> <p>M\u00f3dulos:</p> <ul> <li>MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos</li> <li>MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos</li> <li>MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n</li> <li>MP0459: Pr\u00e1cticas Profesionales No Laborales</li> </ul> <p>Unidades de Competencia:</p> <ul> <li>Unidades de Competencia</li> </ul>"},{"location":"#estado-del-arte","title":"Estado del arte","text":""},{"location":"#lenguajes-de-programacion","title":"Lenguajes de programaci\u00f3n","text":""},{"location":"#frameworks-backend","title":"Frameworks backend","text":"<p>Los frameworks de backend son fundamentales para aplicaciones web y m\u00f3viles, contribuyendo a mejorar rendimiento, escalabilidad y seguridad. Responsables de la l\u00f3gica del servidor, configuraci\u00f3n, interacci\u00f3n con bases de datos y autenticaci\u00f3n, estos frameworks ofrecen diversas ventajas en el desarrollo de aplicaciones. La elecci\u00f3n adecuada puede potenciar la velocidad y seguridad. </p> <p>Frameworks m\u00e1s utilizados</p>"},{"location":"#cms-mas-utilizados","title":"CMS m\u00e1s utilizados","text":"<p>Del estudio que veremos en la web de WPBeginner, se puede ver que WordPress sigue siendo el CMS m\u00e1s utilizado en el mundo. Pero quiero destacar algunos puntos de este estudio:</p> <ul> <li>En 2011, alrededor del 76% de todos los sitios web estaban codificados a mano. A finales de 2022, esta cifra se hab\u00eda reducido a alrededor del 33 %, lo que indica una disminuci\u00f3n media anual de aproximadamente el 3,91 % al a\u00f1o.</li> <li>En la actualidad, m\u00e1s de 80 millones de sitios web utilizan un sistema de gesti\u00f3n de contenidos.</li> </ul> <p>Ahora pensad que la normativa de este curso es de 2013 BOE-A-2013-9707. Esto hace bastante dificial daptar los contenidos del curso a la realidad actual. Algunos ejemplos:</p> <pre><code>- La mayor\u00eda de los frameworks de backend m\u00e1s utilizados no exist\u00edan en 2013.\n- Hoy en d\u00eda el uso de frameworks tanto en frontend como en backend es muy com\u00fan.\n- La adaptaci\u00f3n de contenidos a los diferentes dispositivos m\u00f3viles no era tan importante como ahora.\n- Hoy en d\u00eda, la mayor\u00eda de los sitios web utilizan un CMS, lo que no era tan com\u00fan en 2013.\n</code></pre> <p>Estudio de los CMS m\u00e1s utilizados</p>"},{"location":"content/MF_0966_3/UF2213/","title":"UF2213","text":""},{"location":"content/MF_0966_3/UF2213/#implementacion-en-jbeteta-iesgithubiobbdd","title":"Implementaci\u00f3n en: jbeteta-ies.github.io/BBDD","text":""},{"location":"content/MF_0966_3/UF2214/","title":"UF2214","text":""},{"location":"content/MF_0966_3/UF2214/#implementacion-en-jbeteta-iesgithubiobbdd","title":"Implementaci\u00f3n en: jbeteta-ies.github.io/BBDD","text":""},{"location":"content/MF_0966_3/UF2215/","title":"Unidad Formativa 3: UF2215","text":""},{"location":"content/MF_0966_3/UF2215/#herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion","title":"Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n <p>En este m\u00f3dulo vamos a realizar las siguientes modificaciones aprovechando los contenidos del m\u00f3dulo <code>0485 - Programaci\u00f3n</code>. Esta Unidad Formativa nos debe dar las competencias necesarias para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. Ya que en el m\u00f3dulo siguiente se nos pide desarrollar una CMS, es necesario que tengamos conocimientos de programaci\u00f3n para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos.</p> Campo Detalle C\u00f3digo 0485 Nombre Progrmaci\u00f3n (256h) Duraci\u00f3n 70 horas"},{"location":"content/MF_0966_3/UF2215/#contenidos-reducidos-100-horas","title":"Contenidos Reducidos (100 horas)","text":""},{"location":"content/MF_0966_3/UF2215/#objetivo-general","title":"Objetivo General","text":"<p>Aprender los fundamentos de la programaci\u00f3n utilizando JavaScript, con un enfoque inicial en l\u00f3gica y estructuras del lenguaje, para luego integrar con HTML en el desarrollo de p\u00e1ginas web.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-1-configuracion-del-entorno-y-fundamentos-de-javascript-20-horas","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript (20 horas)","text":"<p>1.1 Configuraci\u00f3n del Entorno de Desarrollo</p> <ul> <li>Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica.</li> <li>Uso de VSCode como editor principal.</li> <li>Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas con Node.js.</li> </ul> <p>1.2 Variables, Tipos de Datos y Operadores</p> <ul> <li>Declaraci\u00f3n de variables (<code>let</code>, <code>const</code>, <code>var</code>).</li> <li>Tipos de datos primitivos: cadenas, n\u00fameros, booleanos, etc.</li> <li>Operadores b\u00e1sicos: aritm\u00e9ticos, l\u00f3gicos y relacionales.</li> </ul> <p>1.3 Estructuras B\u00e1sicas de Control</p> <ul> <li>Condicionales (<code>if</code>, <code>else</code>, <code>else if</code>).</li> <li>Bucles (<code>for</code>, <code>while</code>, <code>do-while</code>).</li> <li>Uso del <code>switch</code>.</li> </ul> <p>1.4 Bucles</p> <ul> <li>Introducci\u00f3n a los bucles.</li> <li>Bucle <code>for</code>.</li> <li>Bucle <code>while</code>.</li> <li>Bucle <code>do-while</code>.</li> <li>Errores comunes en bucles.</li> <li>Uso avanzado de <code>break</code> y <code>continue</code>.</li> </ul> <p>1.5 Uso Avanzado de N\u00fameros, Cadenas y Fechas</p> <ul> <li>Clase <code>Number</code></li> <li>Biblioteca <code>Math</code></li> <li>Clase <code>String</code></li> <li>Clase <code>Date</code></li> <li>Ejercicios Pr\u00e1cticos</li> </ul> <p>1.6 Ejercicios Pr\u00e1cticos</p> <ul> <li>Tenis</li> <li>Fechas de pago</li> <li>Adivinanzas</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#unidad-2-arrays-objetos-y-clases-30-horas","title":"Unidad 2: Arrays, Objetos y Clases (30 horas)","text":"<ul> <li>2.1 Arrays y su manipulaci\u00f3n (8h)<ul> <li>Creaci\u00f3n y uso de arrays.</li> <li>M\u00e9todos comunes: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>splice</code>, etc.</li> <li>Iteraci\u00f3n de arrays: <code>for</code>, <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>.</li> </ul> </li> <li>2.2 Objetos y su uso (7h)<ul> <li>Declarando objetos</li> <li>M\u00e9todos</li> <li>La palabra clave <code>this</code></li> <li>Constructores de objetos</li> <li>El operador <code>new</code></li> <li>Herencia y prototipos</li> </ul> </li> <li>2.3 Persistencia JS con JSON (7h)<ul> <li>Introducci\u00f3n a JSON.</li> <li>Serializaci\u00f3n y deserializaci\u00f3n de objetos.</li> <li>Almacenamiento de datos en archivos JSON.</li> </ul> </li> </ul> <p>Objetivo: Trabajar con estructuras m\u00e1s complejas como arrays, objetos y clases para modelar datos y estructuras reales.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-3-funciones-y-manejo-de-errores-20-horas","title":"Unidad 3: Funciones y Manejo de Errores (20 horas)","text":""},{"location":"content/MF_0966_3/UF2215/#31-funciones-en-javascript-12h","title":"3.1 Funciones en JavaScript (12h)","text":"<ul> <li>Declaraci\u00f3n y uso de funciones.</li> <li>Par\u00e1metros y valores de retorno.</li> <li>Funciones an\u00f3nimas.</li> <li>Funciones como expresiones.</li> <li>Paso de par\u00e1metros por valor y por referencia.</li> <li>Alcance de las variables: local y global.</li> <li>Funciones recursivas (introducci\u00f3n).</li> <li>Retorno de funciones.</li> <li>Funciones an\u00f3nimas autoejecutadas (IIFE).</li> <li>Funciones flecha (<code>arrow functions</code>).</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#32-manejo-de-errores-en-javascript-3h","title":"3.2 Manejo de Errores en JavaScript (3h)","text":"<ul> <li>Uso de bloques <code>try</code>, <code>catch</code> y <code>finally</code>.</li> <li>Lanzar errores con <code>throw</code>.</li> <li>Tipos de errores comunes en JavaScript (sintaxis, referencia, tipo, etc.).</li> <li>Personalizaci\u00f3n de mensajes de error.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#33-asincronia-en-javascript-5h","title":"3.3 Asincron\u00eda en JavaScript (5h)","text":"<ul> <li>Callbacks y su problema (<code>callback hell</code>).</li> <li>Promesas (<code>Promise</code>).</li> <li><code>async/await</code> y su uso en JavaScript.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#34-ejemplo-practico-con-asyncawait","title":"3.4 Ejemplo pr\u00e1ctico con Async/Await","text":"<ul> <li>Creaci\u00f3n de un microservicio REST con Express.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#unidad-4-integracion-de-javascript-con-html-y-el-dom-20-horas","title":"Unidad 4: Integraci\u00f3n de JavaScript con HTML y el DOM (20 horas)","text":"<ul> <li>4.1 Introducci\u00f3n a HTML (5h)<ul> <li>Conceptos b\u00e1sicos de HTML.</li> <li>Uso de etiquetas comunes: <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>.</li> <li>Crear un archivo HTML b\u00e1sico.</li> </ul> </li> <li>4.2 Vinculaci\u00f3n de JavaScript con HTML (5h)<ul> <li>Uso de etiquetas <code>&lt;script&gt;</code> para enlazar archivos JavaScript.</li> <li>Ejecuci\u00f3n de c\u00f3digo JS en eventos b\u00e1sicos de HTML (<code>onClick</code>, <code>onSubmit</code>).</li> </ul> </li> <li>4.3 Introducci\u00f3n al DOM y manejo b\u00e1sico (10h)<ul> <li>\u00bfQu\u00e9 es el DOM?</li> <li>Seleccionar elementos: <code>getElementById</code>, <code>querySelector</code>.</li> <li>Modificaci\u00f3n b\u00e1sica del contenido: <code>innerHTML</code>, <code>textContent</code>.</li> <li>Manejo de eventos: <code>addEventListener</code>.</li> <li>Ejercicio pr\u00e1ctico b\u00e1sico: Crear una lista interactiva donde los usuarios puedan a\u00f1adir y eliminar elementos.</li> </ul> </li> </ul> <p>Objetivo: Introducir la integraci\u00f3n de JavaScript con HTML y la manipulaci\u00f3n b\u00e1sica del DOM para trabajar en p\u00e1ginas web din\u00e1micas.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-5-proyecto-final-10-horas","title":"Unidad 5: Proyecto Final (10 horas)","text":"<ul> <li>5.1 Desarrollo de un proyecto b\u00e1sico<ul> <li>Crear un gestor de tareas simple:          - Permitir al usuario a\u00f1adir, editar y eliminar tareas.          - Almacenar datos temporalmente en arrays u objetos.          - Mostrar la lista de tareas en una p\u00e1gina web utilizando HTML y el DOM.          - Uso de eventos para manejar interacciones del usuario.          - Uso del DOM para actualizar la interfaz din\u00e1mica.</li> </ul> </li> </ul> <p>Objetivo: Integrar todos los conocimientos adquiridos en un proyecto pr\u00e1ctico.</p>"},{"location":"content/MF_0966_3/UF2215/#recursos-y-herramientas","title":"Recursos y Herramientas","text":""},{"location":"content/MF_0966_3/UF2215/#editor-y-ejecucion","title":"Editor y Ejecuci\u00f3n","text":"<ul> <li>Editor de c\u00f3digo: VSCode (con extensiones como Prettier para formato).</li> <li>Ejecuci\u00f3n: Uso de Node.js para la mayor parte del curso. En la unidad del DOM, se usar\u00e1 un navegador para vincular JavaScript con HTML.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#materiales-de-apoyo","title":"Materiales de apoyo","text":"<ol> <li>MDN Web Docs (JavaScript):         - Gu\u00eda de JavaScript.</li> <li>FreeCodeCamp:         - Curso de JavaScript B\u00e1sico.</li> <li>Ejercicios pr\u00e1cticos interactivos:         - Exercism.io - JavaScript.         - Codewars.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/#distribucion-del-tiempo","title":"Distribuci\u00f3n del Tiempo","text":"Unidad Did\u00e1ctica Horas Unidad 1: Fundamentos de JavaScript 20 Unidad 2: Funciones y Manejo de Errores 20 Unidad 3: Arrays, Objetos y Clases 30 Unidad 4: Integraci\u00f3n de JS con HTML y DOM 20 Unidad 5: Proyecto Final 10 Total 100"},{"location":"content/MF_0966_3/UF2215/unidad01_11/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#11-configuracion-del-entorno-de-desarrollo","title":"1.1 Configuraci\u00f3n del Entorno de Desarrollo","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#objetivos","title":"Objetivos","text":"<ol> <li>Configurar un entorno de desarrollo para escribir y ejecutar c\u00f3digo en JavaScript.</li> <li>Familiarizarse con herramientas clave: Node.js, Visual Studio Code (VSCode) y la consola.</li> <li>Ejecutar un programa b\u00e1sico en JavaScript para validar la configuraci\u00f3n.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#111-instalacion-de-nodejs-y-configuracion-basica","title":"1.1.1 Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#que-es-nodejs-y-por-que-lo-necesitamos","title":"\u00bfQu\u00e9 es Node.js y por qu\u00e9 lo necesitamos?","text":"<p>Node.js es un entorno de ejecuci\u00f3n para JavaScript construido sobre el motor V8 de Google Chrome. Permite ejecutar JavaScript en el lado del servidor, fuera del navegador. Esto lo convierte en una herramienta fundamental para el desarrollo de aplicaciones modernas, como servidores web, herramientas de l\u00ednea de comandos y aplicaciones de tiempo real.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#historia-de-nodejs","title":"Historia de Node.js","text":"<ul> <li>Lanzamiento inicial: Node.js fue creado por Ryan Dahl y lanzado en 2009.</li> <li>Motivaci\u00f3n: Ryan Dahl desarroll\u00f3 Node.js para solucionar problemas comunes en los servidores web tradicionales, como la falta de eficiencia al manejar m\u00faltiples conexiones simult\u00e1neas.</li> <li>Primera versi\u00f3n estable: La versi\u00f3n 0.10 fue lanzada en marzo de 2013, marcando el inicio de su adopci\u00f3n masiva.</li> <li>Ecosistema en crecimiento: Desde 2015, el desarrollo de Node.js es administrado por la Node.js Foundation, que posteriormente se fusion\u00f3 con la JS Foundation en 2019 para formar la OpenJS Foundation.</li> <li>Licencia: Node.js est\u00e1 disponible bajo la licencia MIT, lo que permite su uso, modificaci\u00f3n y distribuci\u00f3n de forma gratuita, incluso en proyectos comerciales.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#modo-de-funcionamiento","title":"Modo de Funcionamiento","text":"<p>Modelo de ejecuci\u00f3n as\u00edncrono: Node.js utiliza un modelo basado en eventos que permite manejar m\u00faltiples solicitudes al mismo tiempo sin bloquear el servidor. Esto lo hace ideal para aplicaciones que requieren un manejo intensivo de entradas y salidas (I/O).</p> <p>Motor V8: Node.js est\u00e1 construido sobre el motor V8 de Google Chrome, que convierte el c\u00f3digo JavaScript en c\u00f3digo m\u00e1quina, asegurando un rendimiento \u00f3ptimo.</p> <p>Ejecuci\u00f3n concurrente: Aunque utiliza un solo hilo, Node.js puede manejar m\u00faltiples conexiones simult\u00e1neamente mediante un bucle de eventos (<code>event loop</code>) y callbacks.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#caracteristicas-clave","title":"Caracter\u00edsticas Clave","text":"<ul> <li>Modelo No Bloqueante: Las operaciones I/O no bloquean el flujo del programa, lo que permite manejar m\u00faltiples tareas de manera eficiente.</li> <li>Compatibilidad Cross-Platform: Funciona en sistemas operativos como Windows, macOS y Linux.</li> <li>Ecosistema de Paquetes (NPM): Node.js incluye el administrador de paquetes m\u00e1s grande del mundo, NPM, que cuenta con m\u00e1s de un mill\u00f3n de paquetes.</li> <li>Aplicaciones en Tiempo Real: Ideal para aplicaciones como chats, juegos en l\u00ednea y transmisiones en tiempo real.</li> <li>Escalabilidad: Gracias a su arquitectura basada en eventos, Node.js puede manejar un gran n\u00famero de conexiones simult\u00e1neamente.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#ventajas","title":"Ventajas","text":"<ul> <li>Velocidad: Su motor V8 es altamente eficiente.</li> <li>Ecosistema Extenso: La comunidad de NPM ofrece soluciones para casi cualquier tarea.</li> <li>Reutilizaci\u00f3n de Conocimientos: Permite usar JavaScript en el frontend y el backend.</li> <li>Ideal para Microservicios: Su arquitectura ligera es adecuada para dise\u00f1ar aplicaciones modulares.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#limitaciones","title":"Limitaciones","text":"<ul> <li>Operaciones Intensivas en CPU: Node.js no es la mejor opci\u00f3n para tareas que requieren un alto procesamiento, como c\u00e1lculos complejos.</li> <li>Callback Hell: Aunque mitiga esto con Promises y <code>async/await</code>, el uso intensivo de callbacks puede hacer que el c\u00f3digo sea dif\u00edcil de mantener.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#casos-de-uso-reales","title":"Casos de Uso Reales","text":"<ul> <li>Netflix: Utiliza Node.js para mejorar la velocidad de carga de su interfaz de usuario.</li> <li>Uber: Emplea Node.js para manejar solicitudes en tiempo real.</li> <li>PayPal: Mejor\u00f3 el rendimiento de sus aplicaciones migrando a Node.js.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#enlaces-a-soluciones-con-nodejs","title":"Enlaces a Soluciones con Node.js","text":"<ul> <li>Express.js: Framework minimalista para construir aplicaciones web y APIs.</li> <li>Socket.io: Biblioteca para crear aplicaciones en tiempo real como chats y juegos.</li> <li>NestJS: Framework para desarrollar aplicaciones backend modulares y escalables.</li> <li>Electron: Herramienta para crear aplicaciones de escritorio multiplataforma con Node.js.</li> <li>Strapi: CMS basado en Node.js para crear APIs r\u00e1pidas y personalizables.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Node.js: https://nodejs.org/en/docs/</li> <li>Gu\u00eda para principiantes: https://www.freecodecamp.org/news/learn-node-js-beginners-guide/</li> <li>Tutorial en video: Net Ninja - Curso de Node.js</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#descargar-e-instalar-nodejs","title":"Descargar e instalar Node.js","text":"<ol> <li>Accede al sitio oficial de Node.js: https://nodejs.org.</li> <li>Selecciona la versi\u00f3n LTS (Long Term Support).</li> <li>Descarga y sigue el proceso de instalaci\u00f3n seg\u00fan tu sistema operativo.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#descargar-e-instalar-nodejs-en-windows","title":"Descargar e instalar Node.js en Windows","text":"<ol> <li> <p>Accede al sitio oficial de Node.js:</p> <ul> <li>Ve a https://nodejs.org.</li> <li> <p>Encontrar\u00e1s dos opciones principales de descarga:</p> <p>Versiones de Node.js</p> <ul> <li>LTS (Long Term Support): Recomendado para la mayor\u00eda de los usuarios, ya que es m\u00e1s estable.</li> <li>Current: Incluye las \u00faltimas caracter\u00edsticas, pero podr\u00eda ser menos estable.</li> </ul> </li> <li> <p>Selecciona LTS para garantizar estabilidad en el curso.</p> </li> </ul> </li> <li> <p>Descarga el instalador:</p> <ul> <li>Haz clic en el bot\u00f3n de descarga que corresponde a tu sistema operativo (Windows detectar\u00e1 autom\u00e1ticamente la versi\u00f3n adecuada, ya sea de 32 o 64 bits).</li> </ul> </li> <li> <p>Ejecuta el instalador:</p> <ul> <li>Busca el archivo descargado (generalmente estar\u00e1 en la carpeta <code>Descargas</code>) y haz doble clic para abrirlo.</li> </ul> </li> <li> <p>Sigue los pasos del asistente de instalaci\u00f3n:</p> <ul> <li> <p>Pantalla de bienvenida:</p> <p>Asistente de instalaci\u00f3n de Node.js</p> <ul> <li>Haz clic en <code>Next</code> para continuar.</li> </ul> </li> <li> <p>Acuerdo de licencia:</p> <p>Lee los t\u00e9rminos de la licencia</p> <ul> <li>Lee los t\u00e9rminos de la licencia y haz clic en <code>I accept the terms in the License Agreement</code>, luego en <code>Next</code>.</li> </ul> </li> <li> <p>Carpeta de instalaci\u00f3n:</p> <p>Selecciona la carpeta de instalaci\u00f3n</p> <ul> <li>Selecciona la carpeta donde deseas instalar Node.js (por defecto es <code>C:\\Program Files\\nodejs</code>).</li> <li>Se recomienda dejar la ubicaci\u00f3n predeterminada y hacer clic en <code>Next</code>.</li> </ul> </li> <li> <p>Componentes a instalar:</p> <p>Selecciona los componentes</p> <ul> <li>Aseg\u00farate de que todas las opciones est\u00e9n seleccionadas:</li> </ul> Componentes a instalar <ul> <li>Node.js runtime: El n\u00facleo del entorno de ejecuci\u00f3n.</li> <li>npm package manager: Administrador de paquetes para instalar bibliotecas.</li> <li>Add to PATH: Agrega Node.js a las variables de entorno del sistema (muy importante).</li> <li>Online documentation shortcuts: Acceso r\u00e1pido a la documentaci\u00f3n en l\u00ednea.</li> </ul> <ul> <li>Haz clic en <code>Next</code>.</li> </ul> </li> <li> <p>Herramientas adicionales para la compilaci\u00f3n nativa (opcional):</p> <p>Herramientas adicionales</p> <ul> <li>En algunos casos, el instalador puede ofrecer la opci\u00f3n de instalar herramientas adicionales como Python o compiladores de C++ necesarios para algunos paquetes.</li> <li>Si aparece esta opci\u00f3n, selecciona el checkbox y haz clic en <code>Next</code>.</li> </ul> </li> <li> <p>Instalaci\u00f3n:</p> <p>Proceso de instalaci\u00f3n</p> <ul> <li>Haz clic en <code>Install</code> y espera a que el instalador copie los archivos necesarios.</li> </ul> </li> <li> <p>Finalizaci\u00f3n:</p> <p>Finalizaci\u00f3n de la instalaci\u00f3n</p> <ul> <li>Una vez terminada la instalaci\u00f3n, marca la opci\u00f3n de \"Automatically install necessary tools\" (si est\u00e1 disponible) y haz clic en <code>Finish</code>.</li> </ul> </li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#validacion-de-la-instalacion","title":"Validaci\u00f3n de la instalaci\u00f3n","text":"<ol> <li>Abre la terminal o consola de comandos.</li> <li> <p>Ejecuta los siguientes comandos para verificar que Node.js y npm est\u00e1n instalados correctamente:</p> Comandos de verificaci\u00f3n<pre><code>node -v\nnpm -v\n</code></pre> </li> <li> <p>Deber\u00edas ver los n\u00fameros de versi\u00f3n correspondientes.</p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#ejecutar-un-primer-script-en-nodejs","title":"Ejecutar un primer script en Node.js","text":"<ol> <li>Crea un archivo <code>hello.js</code> con el siguiente contenido:</li> </ol> Hola Mundo!<pre><code>console.log(\"\u00a1Hola, mundo!\");\n</code></pre> <ol> <li>En la consola, navega hasta el directorio donde guardaste el archivo y ejecuta:</li> </ol> Ejecutar programa hello.js<pre><code>   node hello.js\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#112-uso-de-visual-studio-code-vscode-como-editor-principal","title":"1.1.2 Uso de Visual Studio Code (VSCode) como editor principal","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#introduccion-a-vscode","title":"Introducci\u00f3n a VSCode","text":"<p>Visual Studio Code es uno de los editores m\u00e1s populares para desarrollo, con soporte para m\u00faltiples lenguajes y extensiones.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#instalacion-y-configuracion","title":"Instalaci\u00f3n y configuraci\u00f3n","text":"<ol> <li>Descarga desde el sitio oficial: https://code.visualstudio.com.</li> <li>Inst\u00e1lalo y abre la aplicaci\u00f3n.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<ol> <li>Personaliza el tema visual desde las opciones de configuraci\u00f3n.</li> <li> <p>Instala las siguientes extensiones recomendadas:</p> <p>Extensiones Recomendadas</p> <ul> <li>Live Server: Permite visualizar p\u00e1ginas web en tiempo real.</li> <li>Prettier: Formateo autom\u00e1tico del c\u00f3digo.</li> <li>ESLint: Detecci\u00f3n de errores y problemas en el c\u00f3digo.</li> <li>JavaScript (ES6) Code Snippets: Accesos r\u00e1pidos para escribir c\u00f3digo.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#creacion-y-ejecucion-de-un-programa-en-vscode","title":"Creaci\u00f3n y ejecuci\u00f3n de un programa en VSCode","text":"<ol> <li>Abre un nuevo proyecto en VSCode.</li> <li>Crea un archivo <code>app.js</code> con el siguiente contenido:</li> </ol> Programa de ejemplo<pre><code>const saludo = \"\u00a1Hola desde VSCode!\";\nconsole.log(saludo);\n</code></pre> <ol> <li> <p>Ejecuta el programa desde la terminal integrada de VSCode:</p> <p>Ejecutar programa en VSCode</p> <ul> <li>Abre la terminal integrada con <code>Ctrl + \\</code>.</li> <li>Escribe:      Ejecutar programa app.js<pre><code>node app.js\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#113-introduccion-al-uso-de-la-consola-y-ejecucion-de-programas","title":"1.1.3 Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#que-es-la-consola","title":"\u00bfQu\u00e9 es la consola?","text":"<p>La consola es una herramienta para interactuar con el sistema operativo y ejecutar comandos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#comandos-basicos","title":"Comandos b\u00e1sicos","text":"<ol> <li>Navegar entre carpetas:</li> </ol> <p><pre><code>cd nombre-de-la-carpeta\n</code></pre> 2. Listar archivos:</p> <pre><code>!!! info \"Comandos para listar archivos\"\n     - En Windows: `dir`\n     - En macOS/Linux: `ls`\n</code></pre> <ol> <li>Crear y eliminar archivos:</li> </ol> <pre><code>touch archivo.js\nrm archivo.js\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#uso-del-repl-de-nodejs","title":"Uso del REPL de Node.js","text":"<ol> <li>Inicia el entorno interactivo ejecutando:    <pre><code>node\n</code></pre></li> <li>Escribe comandos simples:</li> </ol> Ejemplo en el REPL<pre><code>console.log(\"Hola desde el REPL\");\n2 + 2;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#actividad-practica","title":"Actividad Pr\u00e1ctica","text":"<ol> <li>Configura el entorno completo instalando Node.js y VSCode.</li> <li>Crea una carpeta llamada <code>proyecto_inicial</code>.</li> <li> <p>Dentro de la carpeta, crea un archivo <code>index.js</code> con este c\u00f3digo:</p> <p>C\u00f3digo de ejemplo</p> Programa de bienvenida<pre><code>    const nombre = \"Estudiante\";\n    console.log(`\u00a1Bienvenido, ${nombre}, a la programaci\u00f3n con JavaScript!`);\n</code></pre> <ol> <li>Ejecuta el programa en la consola.</li> </ol> Ejecutar programa index.js<pre><code>node index.js\n</code></pre> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#reto-extra","title":"Reto Extra","text":"<ol> <li>Investiga c\u00f3mo instalar un paquete de npm.</li> <li>Instala <code>chalk</code> y \u00fasalo para cambiar el color del texto en la consola:    <pre><code>npm install chalk@4\n</code></pre></li> <li>C\u00f3digo de ejemplo:    Uso de chalk<pre><code>const chalk = require('chalk');\nconsole.log(chalk.green(\"\u00a1Texto en color verde!\"));\n</code></pre></li> </ol> <p>Version de <code>chalk</code></p> <p>Aseg\u00farate de instalar la versi\u00f3n 4 de <code>chalk</code> para evitar problemas de compatibilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#evaluacion","title":"Evaluaci\u00f3n","text":"<p>Los estudiantes pueden:</p> Evaluaci\u00f3n <ol> <li>Ejecutar scripts b\u00e1sicos en Node.js.</li> <li>Crear y ejecutar programas en VSCode.</li> <li>Usar la consola para navegar y gestionar archivos.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_12/#12-variables-tipos-de-datos-y-operadores","title":"1.2 Variables, Tipos de Datos y Operadores","text":"<p>Objetivos</p> <ol> <li>Comprender c\u00f3mo declarar y usar variables en JavaScript.</li> <li>Conocer los diferentes tipos de datos y aprender a trabajar con operadores b\u00e1sicos para realizar operaciones.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#121-declaracion-de-variables","title":"1.2.1 Declaraci\u00f3n de Variables","text":"<p>\u00bfQu\u00e9 es una variable? </p> <p>Una variable es un espacio en la memoria que se utiliza para almacenar datos que pueden ser usados y manipulados en un programa.</p> <p>Formas de declarar variables en JavaScript:</p> <ol> <li><code>let</code>: Permite declarar variables que pueden ser modificadas.     <pre><code>let nombre = \"Juan\";\nnombre = \"Ana\"; // Esto es v\u00e1lido\n</code></pre></li> <li><code>const</code>: Se utiliza para declarar constantes, es decir, valores que no cambian.     <pre><code>const pi = 3.1416;\n// pi = 3; // Esto generar\u00e1 un error\n</code></pre></li> <li><code>var</code>: Declaraci\u00f3n m\u00e1s antigua. Evita su uso en favor de <code>let</code> y <code>const</code> debido a problemas de alcance.     <pre><code>var edad = 25;\n</code></pre></li> </ol> <p>Buenas Pr\u00e1cticas</p> <ul> <li>Usa <code>const</code> siempre que el valor no cambie.</li> <li>Usa <code>let</code> cuando necesites cambiar el valor de la variable.</li> <li>Evita <code>var</code> para prevenir errores relacionados con el alcance.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#122-tipos-de-datos-primitivos","title":"1.2.2 Tipos de Datos Primitivos","text":"<p>JavaScript tiene los siguientes tipos de datos b\u00e1sicos:</p> <ol> <li> <p>String (Cadenas): Representa texto.     <pre><code>let mensaje = \"Hola, mundo!\";\nconsole.log(typeof mensaje); // \"string\"\n</code></pre></p> </li> <li> <p>Number (N\u00fameros): Incluye enteros y decimales.     <pre><code>let entero = 10;\nlet decimal = 3.14;\n</code></pre></p> </li> <li> <p>Boolean (Booleanos): Valores <code>true</code> o <code>false</code>.     <pre><code>let esActivo = true;\nlet esMayor = 10 &gt; 5; // true\n</code></pre></p> </li> <li> <p>Undefined: Indica que una variable ha sido declarada pero no tiene valor.     <pre><code>let indefinido;\nconsole.log(indefinido); // undefined\n</code></pre></p> </li> <li> <p>Null: Representa un valor intencionalmente vac\u00edo.     <pre><code>let vacio = null;\n</code></pre></p> </li> <li> <p>Symbol (S\u00edmbolos): Valores \u00fanicos e inmutables, utilizados principalmente en programaci\u00f3n avanzada.     <pre><code>let id = Symbol(\"id\");\n</code></pre></p> </li> <li> <p>BigInt: Representa n\u00fameros enteros muy grandes.     <pre><code>let numeroGrande = 1234567890123456789012345678901234567890n;\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#123-operadores-basicos","title":"1.2.3 Operadores B\u00e1sicos","text":"<ul> <li> <p>asignaci\u00f3n: <code>=</code> <pre><code>let nombre = \"Juan\";\nnombre = \"Ana\";\nconsole.log(nombre); // Ana\n</code></pre> Operadores Aritm\u00e9ticos:</p> </li> <li> <p>Suma: <code>+</code> <pre><code>let resultado = 5 + 3; // 8\n</code></pre></p> </li> <li>Resta: <code>-</code> <pre><code>let resultado = 10 - 6; // 4\n</code></pre></li> <li>Multiplicaci\u00f3n: <code>*</code> <pre><code>let resultado = 4 * 2; // 8\n</code></pre></li> <li>Divisi\u00f3n: <code>/</code> <pre><code>let resultado = 9 / 3; // 3\n</code></pre></li> <li>Resto o m\u00f3dulo: <code>%</code> <pre><code>let resto = 10 % 3; // 1\n</code></pre></li> <li>Autoincremento: <code>++</code> <pre><code>let contador = 0;\ncontador++; // 1\n</code></pre></li> <li>Autoincremento: <code>--</code> <pre><code>let contador = 0;\ncontador--; // -1\n</code></pre></li> <li>Preincremento: <code>++variable</code> <pre><code>let contador = 0;\nlet resultado = ++contador; // 1\n</code></pre></li> <li>Predecremento: <code>--variable</code> <pre><code>let contador = 0;\nlet resultado = --contador; // -1\n</code></pre></li> </ul> <p>Operadores de Comparaci\u00f3n:</p> <ul> <li>Igualdad estricta: <code>===</code> <pre><code>console.log(5 === \"5\"); // false\n</code></pre></li> <li>Diferente: <code>!==</code> <pre><code>console.log(10 !== 5); // true\n</code></pre></li> <li>Mayor que: <code>&gt;</code> <pre><code>console.log(7 &gt; 3); // true\n</code></pre></li> <li>Menor que: <code>&lt;</code> <pre><code>console.log(2 &lt; 5); // true\n</code></pre></li> </ul> <p>Operadores L\u00f3gicos:</p> <ul> <li>AND (<code>&amp;&amp;</code>): Devuelve <code>true</code> si ambos operandos son verdaderos.     <pre><code>console.log(true &amp;&amp; false); // false\n</code></pre></li> <li>OR (<code>||</code>): Devuelve <code>true</code> si al menos uno de los operandos es verdadero.     <pre><code>console.log(true || false); // true\n</code></pre></li> <li>NOT (<code>!</code>): Invierte el valor l\u00f3gico.     <pre><code>console.log(!true); // false\n</code></pre></li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#124-ejercicio-practico","title":"1.2.4 Ejercicio Pr\u00e1ctico","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables, <code>a</code> y <code>b</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma, resta, multiplicaci\u00f3n, divisi\u00f3n y m\u00f3dulo de ambas variables.   </li> <li>Muestra los resultados en la consola.</li> </ul> Diagrama de flujo <pre><code>flowchart TD\n    Start[Inicio -&gt; Declarar variables a=10 y b=5] \n    Suma[\"`Mostrar suma: console.log(a + b);`\"]\n    Resta[\"`Mostrar resta: console.log(a - b);`\"]\n    Multiplicacion[\"`Mostrar multiplicaci\u00f3n: console.log(a * b);`\"]\n    Division[\"`Mostrar divisi\u00f3n: console.log(a / b);`\"]\n    Modulo[\"`Mostrar m\u00f3dulo: console.log(a % b);`\"]\n    End[Fin]\n\n    Start --&gt; Suma --&gt; Resta --&gt; Multiplicacion --&gt; Division --&gt; Modulo --&gt; End</code></pre> Soluci\u00f3n Operaciones matem\u00e1ticas b\u00e1sicas<pre><code>    let a = 10;\n    let b = 5;\n\n    console.log(\"Suma:\", a + b);\n    console.log(\"Resta:\", a - b);\n    console.log(\"Multiplicaci\u00f3n:\", a * b);\n    console.log(\"Divisi\u00f3n:\", a / b);\n    console.log(\"M\u00f3dulo:\", a % b);\n</code></pre> <p>Reto Adicional: Operaciones Matem\u00e1ticas Avanzadas</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables, <code>num1</code> y <code>num2</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma, resta, multiplicaci\u00f3n, divisi\u00f3n y m\u00f3dulo de ambas variables, y guarda los resultados en variables independientes.</li> <li>Muestra los resultados:<ul> <li>Primero, cada operaci\u00f3n en una l\u00ednea individual.</li> <li>Luego, todos los resultados concatenados en una \u00fanica l\u00ednea.</li> </ul> </li> </ul> Diagrama de flujo <pre><code>flowchart TD\n    Start[Inicio -&gt; Declarar variables num1=10 y num2=5]\n    CalculoSuma[\"suma = num1 + num2\"]\n    CalculoResta[\"resta = num1 - num2\"]\n    CalculoMultiplicacion[\"multiplicacion = num1 * num2\"]\n    CalculoDivision[\"division = num1 / num2\"]\n    CalculoModulo[\"modulo = num1 % num2\"]\n    MostrarResultadosInd[\"Mostrar resultados individuales\"]\n    MostrarResultadoConcat[\"`Mostrar concatenados:\n                console.log(Resultados: suma=${suma}, resta=${resta}, mult=${multiplicacion}, div=${division}, m\u00f3dulo=${modulo});`\"]\n    End[Fin]\n\n    Start --&gt; CalculoSuma --&gt; CalculoResta --&gt; CalculoMultiplicacion --&gt; CalculoDivision --&gt; CalculoModulo\n    CalculoModulo --&gt; MostrarResultadosInd --&gt; MostrarResultadoConcat --&gt; End</code></pre> Soluci\u00f3n Operaciones matem\u00e1ticas avanzadas<pre><code>let num1 = 10;\nlet num2 = 5;\n\nlet suma = num1 + num2;\nlet resta = num1 - num2;\nlet multiplicacion = num1 * num2;\nlet division = num1 / num2;\nlet modulo = num1 % num2;\n\nconsole.log(\"Suma:\", suma);\nconsole.log(\"Resta:\", resta);\nconsole.log(\"Multiplicaci\u00f3n:\", multiplicacion);\nconsole.log(\"Divisi\u00f3n:\", division);\nconsole.log(\"M\u00f3dulo:\", modulo);\n\nconsole.log(`Resultados: suma=${suma}, resta=${resta}, mult=${multiplicacion}, div=${division}, m\u00f3dulo=${modulo}`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-1-suma-resta-y-multiplicacion-combinadas","title":"Ejercicio 1: Suma, resta y multiplicaci\u00f3n combinadas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara tres variables, <code>a</code>, <code>b</code> y <code>c</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma de <code>a</code> y <code>b</code>.</li> <li>Multiplica el resultado de la suma por <code>c</code>.</li> <li>Muestra los resultados.</li> </ul> Soluci\u00f3n Suma, Resta y Multiplicaci\u00f3n<pre><code>let a = 5;\nlet b = 3;\nlet c = 2;\n\nlet suma = a + b;\nlet producto = suma * c;\n\nconsole.log(\"Suma:\", suma);\nconsole.log(\"Producto:\", producto);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-2-promedio-de-tres-numeros","title":"Ejercicio 2: Promedio de tres n\u00fameros","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara tres variables, <code>x</code>, <code>y</code> y <code>z</code>, con valores num\u00e9ricos.</li> <li>Calcula el promedio de estos n\u00fameros.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n Promedio de Tres N\u00fameros<pre><code>let x = 8;\nlet y = 6;\nlet z = 10;\n\nlet promedio = (x + y + z) / 3;\n\nconsole.log(\"Promedio:\", promedio);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-3-area-de-un-rectangulo","title":"Ejercicio 3: \u00c1rea de un rect\u00e1ngulo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables <code>largo</code> y <code>ancho</code> con valores num\u00e9ricos.</li> <li>Calcula el \u00e1rea del rect\u00e1ngulo.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n \u00c1rea de un Rect\u00e1ngulo<pre><code>let largo = 7;\nlet ancho = 4;\n\nlet area = largo * ancho;\n\nconsole.log(\"\u00c1rea del rect\u00e1ngulo:\", area);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-4-perimetro-y-area-de-un-circulo","title":"Ejercicio 4: Per\u00edmetro y \u00e1rea de un c\u00edrculo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>radio</code> con un valor num\u00e9rico.</li> <li>Calcula el per\u00edmetro y el \u00e1rea del c\u00edrculo.</li> <li>Muestra ambos resultados.</li> </ul> Soluci\u00f3n C\u00edrculo: Per\u00edmetro y \u00c1rea<pre><code>let radio = 5;\n\nlet perimetro = 2 * Math.PI * radio;\nlet area = Math.PI * radio * radio;\n\nconsole.log(\"Per\u00edmetro del c\u00edrculo:\", perimetro);\nconsole.log(\"\u00c1rea del c\u00edrculo:\", area);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-5-calculo-del-iva","title":"Ejercicio 5: C\u00e1lculo del IVA","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>precio</code> con un valor num\u00e9rico y otra <code>iva</code> con un porcentaje.</li> <li>Calcula el importe del IVA y el precio total.</li> <li>Muestra el IVA y el total.</li> </ul> Soluci\u00f3n C\u00e1lculo del IVA<pre><code>let precio = 100;\nlet iva = 21;\n\nlet importeIVA = (precio * iva) / 100;\nlet precioTotal = precio + importeIVA;\n\nconsole.log(\"IVA:\", importeIVA);\nconsole.log(\"Precio total:\", precioTotal);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#explicacion-funciones-de-manipulacion-de-cadenas-en-javascript","title":"Explicaci\u00f3n: Funciones de Manipulaci\u00f3n de Cadenas en JavaScript","text":"<p>En esta secci\u00f3n aprenderemos algunas funciones b\u00e1sicas para manipular cadenas en JavaScript. Estas funciones te permitir\u00e1n realizar tareas comunes como concatenar texto, convertir may\u00fasculas/min\u00fasculas y mucho m\u00e1s.</p> <ol> <li> <p>Concatenar cadenas: </p> <p>Info</p> <ul> <li>Combina dos o m\u00e1s cadenas en una sola utilizando el operador <code>+</code> o las plantillas de cadenas (template strings) con backticks (``).</li> <li>Ejemplo:     <pre><code>let nombre = \"Juan\";\nlet apellido = \"P\u00e9rez\";\nconsole.log(\"tu nombre es: \" + nombre + \" \" + apellido); // Juan P\u00e9rez\nconsole.log(`tu nombre es: ${nombre} ${apellido}`); // Juan P\u00e9rez\n</code></pre></li> </ul> </li> <li> <p>Obtener la longitud de una cadena (<code>.length</code>):</p> <p>Info</p> <ul> <li>Devuelve el n\u00famero de caracteres de una cadena, incluidos los espacios.</li> <li>Ejemplo:     <pre><code>let frase = \"Hola, mundo\";\nconsole.log(frase.length); // 11\n</code></pre></li> </ul> </li> <li> <p>Convertir a may\u00fasculas (<code>.toUpperCase()</code>):</p> <p>Info</p> <ul> <li>Convierte todos los caracteres de la cadena a may\u00fasculas.</li> <li>Ejemplo:     <pre><code>    let texto = \"hola\";\n    console.log(texto.toUpperCase()); // HOLA\n</code></pre></li> </ul> </li> <li> <p>Convertir a min\u00fasculas (<code>.toLowerCase()</code>):</p> <p>Info</p> <ul> <li>Convierte todos los caracteres de la cadena a min\u00fasculas.</li> <li>Ejemplo:     <pre><code>let texto = \"HOLA\";\nconsole.log(texto.toLowerCase()); // hola\n</code></pre></li> </ul> </li> <li> <p>Extraer parte de una cadena (<code>.slice()</code>):</p> <p>Info</p> <ul> <li>Devuelve una secci\u00f3n de la cadena especificando el \u00edndice de inicio y final.</li> <li>Ejemplo:     <pre><code>let mensaje = \"JavaScript\";\nconsole.log(mensaje.slice(0, 4)); // Java\n</code></pre></li> </ul> </li> <li> <p>Reemplazar texto en una cadena (<code>.replace()</code>):</p> <p>Info</p> <ul> <li>Reemplaza una parte de la cadena con otra.</li> <li>Ejemplo:     <pre><code>let frase = \"El cielo es azul\";\nconsole.log(frase.replace(\"azul\", \"verde\")); // El cielo es verde\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicios-de-manipulacion-de-cadenas","title":"Ejercicios de Manipulaci\u00f3n de Cadenas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-6-concatenar-cadenas","title":"Ejercicio 6: Concatenar cadenas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables <code>nombre</code> y <code>edad</code>.</li> <li>Crea una nueva variable concatenando ambas cadenas: <code>mi nombre es [nombre] y tengo [edad] a\u00f1os</code>.</li> <li>Muestra la cadena completa.</li> </ul> Soluci\u00f3n Concatenar Cadenas<pre><code>let nombre = \"Juan\";\nlet edad = 30;\n\nlet cadenaCompleta = `Mi nombre es ${nombre} y tengo ${edad} a\u00f1os`;\n\nconsole.log(\"Resultado:\", cadenaCompleta);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-7-longitud-de-una-cadena","title":"Ejercicio 7: Longitud de una cadena","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>frase</code> con una oraci\u00f3n: <code>Hola, \u00bfc\u00f3mo est\u00e1s?</code>.</li> <li>Calcula la longitud de la cadena.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n Longitud de una Cadena<pre><code>let frase = \"Hola, \u00bfc\u00f3mo est\u00e1s?\";\n\nlet longitud = frase.length;\n\nconsole.log(\"Longitud de la cadena:\", longitud);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-8-convertir-a-mayusculas-y-minusculas","title":"Ejercicio 8: Convertir a may\u00fasculas y min\u00fasculas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>texto</code>: <code>JavaScript es divertido</code>.</li> <li>Convierte el texto a may\u00fasculas y a min\u00fasculas.</li> <li>Muestra ambos resultados.</li> </ul> Soluci\u00f3n May\u00fasculas y Min\u00fasculas<pre><code>let texto = \"JavaScript es divertido\";\n\nlet textoMayus = texto.toUpperCase();\nlet textoMinus = texto.toLowerCase();\n\nconsole.log(\"En may\u00fasculas:\", textoMayus);\nconsole.log(\"En min\u00fasculas:\", textoMinus);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-9-extraer-parte-de-una-cadena","title":"Ejercicio 9: Extraer parte de una cadena","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>mensaje</code> con una oraci\u00f3n: <code>JavaScript es muy poderoso</code>.</li> <li>Extrae una parte de la cadena (primeras 10 letras).</li> <li>Muestra la parte extra\u00edda.</li> </ul> Soluci\u00f3n Extraer Parte de una Cadena<pre><code>let mensaje = \"JavaScript es muy poderoso\";\n\nlet parte = mensaje.slice(0, 10);\n\nconsole.log(\"Parte extra\u00edda:\", parte);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-10-reemplazar-palabras-en-una-frase","title":"Ejercicio 10: Reemplazar palabras en una frase","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>frase</code> con el texto: <code>\"El cielo es azul y el mar tambi\u00e9n es azul\"</code>.</li> <li>Usa <code>.replace()</code> para cambiar la primera ocurrencias de la palabra <code>\"azul\"</code> por <code>\"verde\"</code>.</li> <li>Muestra la frase modificada </li> </ul> Soluci\u00f3n Reemplazar Palabras en una Frase<pre><code>let frase = \"El cielo es azul y el mar tambi\u00e9n es azul\";\n\n// Reemplazar solo la primera ocurrencia\nlet nuevaFrase = frase.replace(\"azul\", \"verde\");\n\nconsole.log(\"Frase modificada (una ocurrencia):\", nuevaFrase);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#uso-de-prompt-sync-en-nodejs","title":"Uso de <code>prompt-sync</code> en Node.js","text":"<p>ES6 introdujo el m\u00e9todo <code>prompt</code> para solicitar datos al usuario en el navegador, pero en Node.js no est\u00e1 disponible por defecto. Para interactuar con el usuario en Node.js, puedes utilizar la biblioteca <code>prompt-sync</code>. Es la manera que tenemos en Node.js de solicitar datos al usuario de forma sincr\u00f3nica.</p> <p><code>prompt-sync</code> es una biblioteca que facilita las entradas sincronizadas en Node.js.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#instalacion","title":"Instalaci\u00f3n:","text":"<pre><code>`npm install prompt-sync`\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejemplo","title":"Ejemplo:","text":"Uso de prompt-sync<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = prompt(\"\u00bfQu\u00e9 edad tienes? \");\nconsole.log(`\u00a1Hola, tienes ${edad} a\u00f1os`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-11-solicitar-el-nombre-del-usuario","title":"Ejercicio 11: Solicitar el nombre del usuario","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario su nombre utilizando la biblioteca <code>prompt-sync</code>.</li> <li>Muestra un saludo personalizado en la consola, como: \"\u00a1Hola, [nombre]!\".</li> </ul> Soluci\u00f3n Solicitar el Nombre del Usuario<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar el nombre al usuario\nlet nombre = prompt(\"\u00bfC\u00f3mo te llamas? \");\n\n// Mostrar saludo personalizado\nconsole.log(`\u00a1Hola, ${nombre}!`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-12-calculadora-basica","title":"Ejercicio 12: Calculadora b\u00e1sica","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario dos n\u00fameros utilizando la biblioteca <code>prompt-sync</code>.</li> <li>Realiza las operaciones matem\u00e1ticas b\u00e1sicas: suma, resta, multiplicaci\u00f3n y divisi\u00f3n.</li> <li>Muestra los resultados de todas las operaciones en la consola.</li> </ul> Soluci\u00f3n Calculadora B\u00e1sica<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar n\u00fameros al usuario\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\n// Realizar operaciones matem\u00e1ticas b\u00e1sicas\nlet suma = num1 + num2;\nlet resta = num1 - num2;\nlet multiplicacion = num1 * num2;\nlet division = num1 / num2;\n\n// Mostrar los resultados\nconsole.log(\"Resultados:\");\nconsole.log(\"Suma: \" + suma);\nconsole.log(\"Resta: \" + resta);\nconsole.log(\"Multiplicaci\u00f3n: \" + multiplicacion);\nconsole.log(\"Divisi\u00f3n: \" + division);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-extra-resolver-una-ecuacion-de-segundo-grado","title":"Ejercicio Extra: Resolver una ecuaci\u00f3n de segundo grado","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario los coeficientes <code>a</code>, <code>b</code> y <code>c</code> de una ecuaci\u00f3n de segundo grado de la forma: ( ax^2 + bx + c = 0 ).</li> <li>Calcula las ra\u00edces de la ecuaci\u00f3n utilizando la f\u00f3rmula general:   [   x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}   ]</li> <li>Muestra las dos ra\u00edces en la consola (si existen).</li> </ul> Soluci\u00f3n Resolver Ecuaci\u00f3n de Segundo Grado<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar coeficientes al usuario\nlet a = parseFloat(prompt(\"Introduce el coeficiente a: \"));\nlet b = parseFloat(prompt(\"Introduce el coeficiente b: \"));\nlet c = parseFloat(prompt(\"Introduce el coeficiente c: \"));\n\n// Calcular el discriminante\nlet discriminante = b * b - 4 * a * c;\n\nif (discriminante &gt; 0) {\n    // Dos ra\u00edces reales\n    let raiz1 = (-b + Math.sqrt(discriminante)) / (2 * a);\n    let raiz2 = (-b - Math.sqrt(discriminante)) / (2 * a);\n    console.log(\"Las ra\u00edces de la ecuaci\u00f3n son:\");\n    console.log(\"Ra\u00edz 1:\", raiz1);\n    console.log(\"Ra\u00edz 2:\", raiz2);\n} else if (discriminante === 0) {\n    // Una \u00fanica ra\u00edz\n    let raiz = -b / (2 * a);\n    console.log(\"La ecuaci\u00f3n tiene una ra\u00edz \u00fanica:\");\n    console.log(\"Ra\u00edz:\", raiz);\n} else {\n    // Ra\u00edces complejas\n    console.log(\"La ecuaci\u00f3n no tiene ra\u00edces reales.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#13-estructuras-condicionales-y-de-control","title":"1.3. Estructuras condicionales y de control","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-if-else","title":"\u00bfQu\u00e9 es un if-else?","text":"<p>La estructura if-else permite tomar decisiones en funci\u00f3n de una condici\u00f3n. Eval\u00faa si una expresi\u00f3n l\u00f3gica es <code>true</code> o <code>false</code> y ejecuta el bloque correspondiente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-if-else","title":"Sintaxis de if-else","text":"<pre><code>if (condici\u00f3n) {\n    // C\u00f3digo si la condici\u00f3n es verdadera\n} else {\n    // C\u00f3digo si la condici\u00f3n es falsa\n}\n</code></pre> <p>Ejemplo</p> <p>Programa que evalua si una variable num\u00e9rica que simula la edad de una persona es mayor o menor de edad.</p> <p>Ejemplo de If-Else</p> <p>En el siguiente ejemplo, se eval\u00faa si una persona es mayor de edad:</p> diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Definir edad = 18]\n    B --&gt; C{edad &gt;= 18}\n    C --&gt;|S\u00ed| D[\"Eres mayor de edad\"]\n    C --&gt;|No| E[\"Eres menor de edad\"]\n    D --&gt; F[Fin]\n    E --&gt; F[Fin]</code></pre> C\u00f3digo javascript del ejemplo <pre><code>let edad = 18;\n\nif (edad &gt;= 18) {\n    console.log(\"Eres mayor de edad\");\n} else {\n    console.log(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios-de-if-else","title":"Ejercicios de If-Else","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-1-comparar-numeros","title":"Ejercicio 1: Comparar n\u00fameros","text":"<p>Instrucciones</p> <p>Lo vamos a solucionar en 4 pasos, viendo en cada uno de ellos una parte de la soluci\u00f3n.</p> <p>Crea un programa que haga lo siguiente paso a paso:</p> <ul> <li>Paso 1: Determina si dos n\u00fameros son iguales.</li> <li>Paso 2: Eval\u00faa si el primer n\u00famero es mayor que el segundo.</li> <li>Paso 3: Eval\u00faa si el segundo n\u00famero es mayor que el primero.</li> <li>Paso 4: Combina todas las evaluaciones en un \u00fanico programa.</li> </ul> <p>Paso 1: Determinar si dos n\u00fameros son iguales</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Determina si los n\u00fameros son iguales.</li> <li>Muestra un mensaje indicando que los n\u00fameros son iguales.</li> </ul> Soluci\u00f3n Paso 1: Determinar si son iguales<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 === num2) {\n    console.log(\"Los n\u00fameros son iguales.\");\n}\n</code></pre> <p>Paso 2: Evaluar si el primer n\u00famero es mayor que el segundo</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si el primer n\u00famero es mayor que el segundo.</li> <li>Muestra un mensaje indicando que el primer n\u00famero es mayor.</li> </ul> Soluci\u00f3n Paso 2: El primero es mayor<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 &gt; num2) {\n    console.log(`${num1} es mayor que ${num2}`);\n}\n</code></pre> <p>Paso 3: Evaluar si el segundo n\u00famero es mayor que el primero</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si el segundo n\u00famero es mayor que el primero.</li> <li>Muestra un mensaje indicando que el segundo n\u00famero es mayor.</li> </ul> Soluci\u00f3n Paso 3: El segundo es mayor<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num2 &gt; num1) {\n    console.log(`${num2} es mayor que ${num1}`);\n}\n</code></pre> <p>Paso 4: Combinar todas las evaluaciones</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si los n\u00fameros son iguales, si el primero es mayor o si el segundo es mayor.</li> <li>Muestra un mensaje correspondiente para cada caso.</li> </ul> Diagrama <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar el primer n\u00famero]\n    B --&gt; C[Solicitar el segundo n\u00famero]\n    C --&gt; D{\u00bfnum1 es igual a num2?}\n\n    D --&gt;|S\u00ed| E[\"Los n\u00fameros son iguales\"]\n    D --&gt;|No| F{\u00bfnum1 es mayor que num2?}\n\n    F --&gt;|S\u00ed| G[\"num1 es mayor que num2\"]\n    F --&gt;|No| H[\"num2 es mayor que num1\"]\n\n    E --&gt; I[Fin]\n    G --&gt; I\n    H --&gt; I</code></pre> Soluci\u00f3n Paso 4: Todo junto<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 === num2) {\n    console.log(\"Los n\u00fameros son iguales.\");\n} else if (num1 &gt; num2) {\n    console.log(`${num1} es mayor que ${num2}`);\n} else {\n    console.log(`${num2} es mayor que ${num1}`);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-2-numero-positivo-o-negativo","title":"Ejercicio 2: N\u00famero positivo o negativo","text":"<p>Crea un programa que haga lo siguiente paso a paso:</p> <ul> <li>Paso 1: Determina si un n\u00famero es igual a cero.</li> <li>Paso 2: Eval\u00faa si un n\u00famero es positivo.</li> <li>Paso 3: Eval\u00faa si un n\u00famero es negativo.</li> <li>Paso 4: Combina todas las evaluaciones en un \u00fanico programa.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-1-determinar-si-un-numero-es-cero","title":"Paso 1: Determinar si un n\u00famero es cero","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Determina si el n\u00famero es igual a cero.</li> <li>Muestra un mensaje indicando que el n\u00famero es cero.</li> </ul> Soluci\u00f3n Paso 1: N\u00famero es cero<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero === 0) {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-2-determinar-si-un-numero-es-positivo","title":"Paso 2: Determinar si un n\u00famero es positivo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es positivo.</li> <li>Muestra un mensaje indicando que el n\u00famero es positivo.</li> </ul> Soluci\u00f3n Paso 2: N\u00famero positivo<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-3-determinar-si-un-numero-es-negativo","title":"Paso 3: Determinar si un n\u00famero es negativo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es negativo.</li> <li>Muestra un mensaje indicando que el n\u00famero es negativo.</li> </ul> Soluci\u00f3n Paso 3: N\u00famero negativo<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-4-combinar-todas-las-evaluaciones","title":"Paso 4: Combinar todas las evaluaciones","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es positivo, negativo o igual a cero.</li> <li>Muestra un mensaje correspondiente para cada caso.</li> </ul> Soluci\u00f3n Paso 4: Todo junto<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n} else if (numero &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n} else {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre> Diagrama de Flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar un n\u00famero]\n    B --&gt; C{\u00bfN\u00famero &gt; 0?}\n\n    C --&gt;|S\u00ed| D[\"El n\u00famero es positivo\"]\n    C --&gt;|No| E{\u00bfN\u00famero &lt; 0?}\n\n    E --&gt;|S\u00ed| F[\"El n\u00famero es negativo\"]\n    E --&gt;|No| G[\"El n\u00famero es cero\"]\n\n    D --&gt; H[Fin]\n    F --&gt; H\n    G --&gt; H</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-3-verificar-credenciales-de-acceso","title":"Ejercicio 3: Verificar credenciales de acceso","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un nombre de usuario y una contrase\u00f1a.</li> <li>Compara las entradas con dos constantes predefinidas: <code>USER</code> y <code>PASSWORD</code>.</li> <li>Si coinciden, muestra el mensaje \"Acceso correcto\".</li> <li>Si no coinciden, muestra el mensaje \"Acceso incorrecto\" en rojo.</li> <li>Para el color rojo pudes utilizar la librer\u00eda <code>chalk</code>. <code>pip install chalk</code> </li> </ul> Soluci\u00f3n Verificar credenciales<pre><code>const prompt = require(\"prompt-sync\")();\nconst chalk = require(\"chalk\");\n\n// Constantes predefinidas\nconst USER = \"admin\";\nconst PASSWORD = \"12345\";\n\n// Solicitar credenciales al usuario\nlet login = prompt(\"Introduce tu nombre de usuario: \");\nlet pwd = prompt(\"Introduce tu contrase\u00f1a: \");\n\n// Verificar credenciales\nif (login === USER &amp;&amp; pwd === PASSWORD) {\n    console.log(\"Acceso correcto\");\n} else {\n    console.log(chalk.red(\"Acceso incorrecto\"));\n}\n</code></pre> Explicaci\u00f3n del c\u00f3digo <ol> <li>Constantes:<ul> <li>Se definen <code>USER</code> y <code>PASSWORD</code> como las credenciales v\u00e1lidas.</li> </ul> </li> <li>Entrada del Usuario:<ul> <li><code>prompt</code> solicita al usuario el nombre de usuario (<code>login</code>) y la contrase\u00f1a (<code>pwd</code>).</li> </ul> </li> <li>Verificaci\u00f3n:<ul> <li>Se compara si ambas entradas coinciden con las constantes.</li> <li>Si ambas coinciden, se muestra \"Acceso correcto\".</li> <li>Si no coinciden, se muestra \"Acceso incorrecto\" con texto en rojo</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tratamiento-de-cadenas-en-if-else","title":"Tratamiento de cadenas en IF-ELSE","text":"<p>Vamos a ver un programa con las siguientes caracter\u00edsticas:</p> <ul> <li>Solicita al usuario que introduzca dos cadenas.</li> <li>Compara las cadenas considerando may\u00fasculas y min\u00fasculas (<code>ana</code> es distinto de <code>ANA</code>).</li> <li>Utiliza funciones como <code>toUpperCase</code> o <code>toLowerCase</code> para compararlas ignorando may\u00fasculas y min\u00fasculas.</li> <li>Comprueba si una cadena tiene un n\u00famero de caracteres entre un m\u00ednimo y un m\u00e1ximo.</li> <li>Explica que, seg\u00fan el orden lexicogr\u00e1fico, <code>\"ana\"</code> es menor que <code>\"ANA\"</code>.</li> </ul> <p>Soluci\u00f3n</p> Comparaci\u00f3n de cadenas<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar cadenas al usuario\nlet cadena1 = prompt(\"Introduce la primera cadena: \");\nlet cadena2 = prompt(\"Introduce la segunda cadena: \");\n\n// Comparaci\u00f3n directa (sensible a may\u00fasculas y min\u00fasculas)\nif (cadena1 === cadena2) {\n    console.log(\"Las cadenas son iguales (sensible a may\u00fasculas).\");\n} else {\n    console.log(\"Las cadenas son distintas (sensible a may\u00fasculas).\");\n}\n\n// Comparaci\u00f3n ignorando may\u00fasculas y min\u00fasculas\nif (cadena1.toLowerCase() === cadena2.toLowerCase()) {\n    console.log(\"Las cadenas son iguales (ignorando may\u00fasculas).\");\n} else {\n    console.log(\"Las cadenas son distintas (ignorando may\u00fasculas).\");\n}\n\n// Verificar longitud entre un m\u00ednimo y un m\u00e1ximo\nlet minLength = 3;\nlet maxLength = 10;\nif (cadena1.length &gt;= minLength &amp;&amp; cadena1.length &lt;= maxLength) {\n    console.log(`La primera cadena tiene una longitud v\u00e1lida (entre ${minLength} y ${maxLength}).`);\n} else {\n    console.log(`La primera cadena no tiene una longitud v\u00e1lida (entre ${minLength} y ${maxLength}).`);\n}\n\n// Comparaci\u00f3n lexicogr\u00e1fica\nif (\"ana\" &lt; \"ANA\") {\n    console.log('\"ana\" es menor que \"ANA\" en orden lexicogr\u00e1fico.');\n} else {\n    console.log('\"ana\" no es menor que \"ANA\" en orden lexicogr\u00e1fico.');\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li> <p>Comparaci\u00f3n Directa (Sensible a May\u00fasculas y Min\u00fasculas):</p> <ul> <li>La comparaci\u00f3n <code>cadena1 === cadena2</code> verifica si las cadenas son exactamente iguales, considerando diferencias entre may\u00fasculas y min\u00fasculas. Por ejemplo, <code>\"ana\" !== \"ANA\"</code>.</li> </ul> </li> <li> <p>Comparaci\u00f3n Ignorando May\u00fasculas y Min\u00fasculas:</p> <ul> <li>Se utilizan las funciones <code>toLowerCase()</code> o <code>toUpperCase()</code> para convertir ambas cadenas a un formato uniforme antes de compararlas. Esto hace que <code>\"ana\" === \"ANA\"</code>.</li> </ul> </li> <li> <p>Verificar Longitud:</p> <ul> <li>Se usa <code>cadena1.length</code> para verificar si la longitud de la primera cadena est\u00e1 entre los l\u00edmites definidos (<code>minLength</code> y <code>maxLength</code>).</li> </ul> </li> <li> <p>Orden Lexicogr\u00e1fico:</p> <ul> <li>En JavaScript, las cadenas se comparan seg\u00fan su valor Unicode. En el caso de <code>\"ana\"</code> y <code>\"ANA\"</code>, las letras min\u00fasculas tienen valores Unicode mayores que las may\u00fasculas. Por lo tanto:<ul> <li><code>\"ana\" &lt; \"ANA\"</code> es <code>false</code>.</li> </ul> </li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#operadores-logicos-en-javascript","title":"Operadores L\u00f3gicos en JavaScript","text":"<p>En JavaScript, los operadores l\u00f3gicos se usan para combinar condiciones o modificar su resultado. Los tres operadores principales son:</p> <ul> <li><code>&amp;&amp;</code> (AND o Y): Eval\u00faa si todas las condiciones son verdaderas.</li> <li><code>||</code> (OR o O): Eval\u00faa si al menos una condici\u00f3n es verdadera.</li> <li><code>!</code> (NOT o NO): Invierte el valor l\u00f3gico de una condici\u00f3n (de verdadero a falso y viceversa).</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tablas-de-verdad","title":"Tablas de Verdad","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#1-operador-and","title":"1. Operador <code>&amp;&amp;</code> (AND)","text":"<p>El operador <code>&amp;&amp;</code> retorna <code>true</code> solo si todas las condiciones son <code>true</code>.</p> Condici\u00f3n A Condici\u00f3n B A &amp;&amp; B <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#2-operador-or","title":"2. Operador <code>||</code> (OR)","text":"<p>El operador <code>||</code> retorna <code>true</code> si al menos una condici\u00f3n es <code>true</code>.</p> Condici\u00f3n A Condici\u00f3n B A <code>\\|\\|</code> B <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#3-operador-not","title":"3. Operador <code>!</code> (NOT)","text":"<p>El operador <code>!</code> invierte el valor l\u00f3gico de la condici\u00f3n.</p> Condici\u00f3n !Condici\u00f3n <code>true</code> <code>false</code> <code>false</code> <code>true</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplos-de-operadores-logicos","title":"Ejemplos de Operadores L\u00f3gicos","text":"Operador Ejemplo Resultado <code>&amp;&amp;</code> <code>5 &gt; 3 &amp;&amp; 10 &gt; 8</code> <code>true</code> <code>&amp;&amp;</code> <code>5 &gt; 3 &amp;&amp; 10 &lt; 8</code> <code>false</code> <code>||</code> <code>5 &gt; 3 || 10 &lt; 8</code> <code>true</code> <code>||</code> <code>5 &lt; 3 || 10 &lt; 8</code> <code>false</code> <code>!</code> <code>!(5 &gt; 3)</code> <code>false</code> <code>!</code> <code>!(5 &lt; 3)</code> <code>true</code> Mixto <code>5 &gt; 3 &amp;&amp; (10 &lt; 8 || 2 === 2)</code> <code>true</code> Mixto <code>!(5 &gt; 3 &amp;&amp; 10 &gt; 8)</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#notas-clave","title":"Notas Clave","text":"<ol> <li> <p>Precedencia de Operadores:</p> <pre><code> - `!` tiene mayor precedencia que `&amp;&amp;` y `||`.\n - Agrupa condiciones con par\u00e9ntesis para asegurarte de que se eval\u00faan en el orden esperado.\n         - Ejemplo: `!(A &amp;&amp; B)` no es lo mismo que `!A &amp;&amp; B`.\n</code></pre> </li> <li> <p>Cortocircuito:</p> <pre><code> - En `&amp;&amp;`, si la primera condici\u00f3n es `false`, las dem\u00e1s no se eval\u00faan.\n - En `||`, si la primera condici\u00f3n es `true`, las dem\u00e1s no se eval\u00faan.\n</code></pre> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#leyes-de-de-morgan","title":"Leyes de De Morgan","text":"<p>Las Leyes de De Morgan son reglas fundamentales en l\u00f3gica y \u00e1lgebra booleana. Estas leyes ayudan a simplificar expresiones l\u00f3gicas y a entender c\u00f3mo se relacionan los operadores <code>&amp;&amp;</code> (AND), <code>||</code> (OR) y <code>!</code> (NOT).</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#las-dos-leyes-de-de-morgan","title":"Las dos leyes de De Morgan","text":"<ol> <li> <p>Primera ley:     &gt; La negaci\u00f3n de una conjunci\u00f3n (<code>A &amp;&amp; B</code>) es equivalente a la disyunci\u00f3n de las negaciones (<code>!A || !B</code>).</p> <p>Formalmente: <pre><code>!(A &amp;&amp; B) \u2261 !A || !B\n</code></pre></p> <p>Ejemplo en JavaScript: <pre><code>let A = true;\nlet B = false;\n\nconsole.log(!(A &amp;&amp; B));  // true\nconsole.log(!A || !B);   // true (equivalente por De Morgan)\n</code></pre></p> </li> </ol> <ol> <li> <p>Segunda ley:     &gt; La negaci\u00f3n de una disyunci\u00f3n (<code>A || B</code>) es equivalente a la conjunci\u00f3n de las negaciones (<code>!A &amp;&amp; !B</code>).</p> <p>Formalmente: <pre><code>!(A || B) \u2261 !A &amp;&amp; !B\n</code></pre></p> <p>Ejemplo en JavaScript: <pre><code>let A = true;\nlet B = false;\n\nconsole.log(!(A || B));  // false\nconsole.log(!A &amp;&amp; !B);   // false (equivalente por De Morgan)\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#como-entender-las-leyes-de-de-morgan","title":"C\u00f3mo entender las leyes de De Morgan","text":"<ol> <li> <p>Primera Ley (<code>!(A &amp;&amp; B) \u2261 !A || !B</code>):</p> <ul> <li>Si NO se cumplen ambas condiciones (A y B), entonces AL MENOS UNA de las condiciones debe ser falsa.</li> </ul> </li> <li> <p>Segunda Ley (<code>!(A || B) \u2261 !A &amp;&amp; !B</code>):</p> <ul> <li>Si NO se cumple ninguna de las condiciones (A o B), entonces AMBAS condiciones deben ser falsas.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tablas-de-verdad_1","title":"Tablas de Verdad","text":"<ul> <li>Primera Ley (<code>!(A &amp;&amp; B) \u2261 !A || !B</code>)</li> </ul> A B A &amp;&amp; B !(A &amp;&amp; B) !A !B !A || !B true true true false false false false true false false true false true true false true false true true false true false false false true true true true <ul> <li>Segunda Ley (<code>!(A || B) \u2261 !A &amp;&amp; !B</code>)</li> </ul> A B A || B !(A || B) !A !B !A &amp;&amp; !B true true true false false false false true false true false false true false false true true false true false false false false false true true true true <p>Ejemplos pr\u00e1cticos</p> <ul> <li>Ejemplo 1: Verificar si ninguna condici\u00f3n es verdadera Si queremos verificar si ni <code>A</code> ni <code>B</code> son verdaderos, podemos usar:</li> </ul> <pre><code>let A = false;\nlet B = false;\n\nconsole.log(!(A || B));  // true\nconsole.log(!A &amp;&amp; !B);   // true (equivalente)\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#por-que-son-importantes-las-leyes-de-de-morgan","title":"\u00bfPor qu\u00e9 son importantes las Leyes de De Morgan?","text":"<ol> <li> <p>Simplificaci\u00f3n de expresiones:</p> <ul> <li>Estas leyes permiten reescribir expresiones l\u00f3gicas de manera m\u00e1s comprensible o adecuada para ciertos contextos.</li> </ul> </li> <li> <p>Optimizaci\u00f3n del c\u00f3digo:</p> <ul> <li>Ayudan a escribir condiciones m\u00e1s eficientes o claras.</li> </ul> </li> <li> <p>Comprensi\u00f3n de la l\u00f3gica booleana:</p> <ul> <li>Son una base fundamental en programaci\u00f3n, especialmente en algoritmos, bases de datos y sistemas digitales.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-4-validar-acceso-segun-edad-y-rol","title":"Ejercicio 4: Validar acceso seg\u00fan edad y rol","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca su edad y su rol.</li> <li>Permite el acceso solo si:<ul> <li>El usuario tiene 18 a\u00f1os o m\u00e1s y es administrador.</li> <li>O si tiene menos de 18 a\u00f1os pero el rol es \"invitado\".</li> <li>Y se asegura de que el rol no est\u00e9 vac\u00edo.</li> </ul> </li> </ul> Soluci\u00f3n Validar acceso seg\u00fan edad y rol<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = parseInt(prompt(\"Introduce tu edad: \"));\nlet rol = prompt(\"Introduce tu rol (admin/invitado): \").trim();\n\nif ((edad &gt;= 18 &amp;&amp; rol === \"admin\") || (edad &lt; 18 &amp;&amp; rol === \"invitado\") &amp;&amp; rol !== \"\") {\n    console.log(\"Acceso permitido\");\n} else {\n    console.log(\"Acceso denegado\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-5-determinar-si-un-numero-cumple-multiples-condiciones","title":"Ejercicio 5: Determinar si un n\u00famero cumple m\u00faltiples condiciones","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Determina si el n\u00famero cumple al menos una de las siguientes condiciones:<ul> <li>Es divisible por 2 y mayor que 10.</li> <li>O es divisible por 3 pero no mayor que 50.</li> <li>Y que el n\u00famero no sea negativo.</li> </ul> </li> </ul> Soluci\u00f3n Validar n\u00famero con m\u00faltiples condiciones<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseInt(prompt(\"Introduce un n\u00famero: \"));\n\nif ((numero % 2 === 0 &amp;&amp; numero &gt; 10) || (numero % 3 === 0 &amp;&amp; !(numero &gt; 50)) &amp;&amp; numero &gt;= 0) {\n    console.log(\"El n\u00famero cumple al menos una condici\u00f3n\");\n} else {\n    console.log(\"El n\u00famero no cumple ninguna condici\u00f3n\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-6-validar-si-un-texto-cumple-criterios-mixtos","title":"Ejercicio 6: Validar si un texto cumple criterios mixtos","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca una cadena de texto.</li> <li>Determina si la cadena cumple todas las siguientes condiciones:<ul> <li>Tiene entre 5 y 15 caracteres.</li> <li>O comienza con la letra \"A\" pero no termina con la letra \"Z\".</li> <li>Y no contiene espacios en blanco.</li> </ul> </li> </ul> Soluci\u00f3n Validar texto con m\u00faltiples condiciones<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet texto = prompt(\"Introduce una cadena de texto: \").trim();\n\nif ((texto.length &gt;= 5 &amp;&amp; texto.length &lt;= 15) || (texto.startsWith(\"A\") &amp;&amp; !texto.endsWith(\"Z\")) &amp;&amp; !texto.includes(\" \")) {\n    console.log(\"El texto cumple las condiciones\");\n} else {\n    console.log(\"El texto no cumple las condiciones\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#132-if-else-anidado","title":"1.3.2 If-Else Anidado","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-if-else-anidado","title":"\u00bfQu\u00e9 es un if-else anidado?","text":"<p>Un if-else anidado permite evaluar m\u00faltiples condiciones de manera jer\u00e1rquica. Es una estructura donde un bloque <code>if</code> o <code>else</code> contiene otro bloque <code>if</code> o <code>else</code> en su interior.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-if-else-anidado","title":"Sintaxis de if-else anidado","text":"Sintaxis de If-Else Anidado<pre><code>if (condici\u00f3n1) {\n    // C\u00f3digo si condici\u00f3n1 es verdadera\n} else {\n    if (condici\u00f3n2) {\n        // C\u00f3digo si condici\u00f3n2 es verdadera\n    } else {\n        // C\u00f3digo si ninguna condici\u00f3n es verdadera\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplo","title":"Ejemplo","text":"<p>Ejemplo de If-Else Anidado</p> <p>En este ejemplo, se eval\u00faa la calificaci\u00f3n de un estudiante y se asigna una letra seg\u00fan el rango:</p> Calificaci\u00f3n con If-Else Anidado<pre><code>const nota = 75;\n\nif (nota &gt;= 90) {\n    console.log(\"Tu calificaci\u00f3n es A\");\n} else {\n    if (nota &gt;= 80) {\n        console.log(\"Tu calificaci\u00f3n es B\");\n    } else {\n        console.log(\"Tu calificaci\u00f3n es C\");\n    }\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfNota &gt;= 90?}\n    B --&gt;|S\u00ed| C[Calificaci\u00f3n: A]\n    B --&gt;|No| D{\u00bfNota &gt;= 80?}\n    D --&gt;|S\u00ed| E[Calificaci\u00f3n: B]\n    D --&gt;|No| F[Calificaci\u00f3n: C]\n    C --&gt; G[Fin]\n    E --&gt; G\n    F --&gt; G</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios-de-if-else-anidado","title":"Ejercicios de If-Else Anidado","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios","title":"Ejercicios","text":"<p>Ejercicio 1: Clasificaci\u00f3n de edades</p> <ul> <li>Crea un programa que solicite al usuario su edad.</li> <li>Seg\u00fan la edad introducida, muestra:<ul> <li>\"Ni\u00f1o\" si la edad es menor a 12.</li> <li>\"Adolescente\" si la edad est\u00e1 entre 12 y 17.</li> <li>\"Adulto\" si la edad es 18 o mayor.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de edades<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = parseInt(prompt(\"Introduce tu edad: \"));\n\nif (edad &lt; 12) {\n    console.log(\"Ni\u00f1o\");\n} else {\n    if (edad &lt;= 17) {\n        console.log(\"Adolescente\");\n    } else {\n        console.log(\"Adulto\");\n    }\n}\n</code></pre> <p>Ejercicio 2: Determinar un descuento</p> <ul> <li>Crea un programa que solicite el importe de una compra.</li> <li>Calcula y muestra el descuento seg\u00fan las siguientes reglas:<ul> <li>20% si el importe es mayor o igual a 100.</li> <li>10% si el importe est\u00e1 entre 50 y 99.</li> <li>Sin descuento si el importe es menor a 50.</li> </ul> </li> </ul> Soluci\u00f3n Determinaci\u00f3n de descuentos<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet importe = parseFloat(prompt(\"Introduce el importe de tu compra: \"));\n\nif (importe &gt;= 100) {\n    console.log(\"Descuento del 20% aplicado\");\n} else {\n    if (importe &gt;= 50) {\n        console.log(\"Descuento del 10% aplicado\");\n    } else {\n        console.log(\"Sin descuento\");\n    }\n}\n</code></pre> <p>Ejercicio 3: Clasificaci\u00f3n de temperaturas</p> <ul> <li>Crea un programa que solicite una temperatura en grados Celsius.</li> <li>Clasifica la temperatura seg\u00fan los siguientes rangos:<ul> <li>\"Fr\u00edo\" si es menor a 10\u00b0C.</li> <li>\"Templado\" si est\u00e1 entre 10\u00b0C y 25\u00b0C.</li> <li>\"Calor\" si es mayor a 25\u00b0C.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de temperaturas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet temperatura = parseFloat(prompt(\"Introduce la temperatura en grados Celsius: \"));\n\nif (temperatura &lt; 10) {\n    console.log(\"Fr\u00edo\");\n} else {\n    if (temperatura &lt;= 25) {\n        console.log(\"Templado\");\n    } else {\n        console.log(\"Calor\");\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#133-switch","title":"1.3.3 Switch","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-switch","title":"\u00bfQu\u00e9 es un switch?","text":"<p>El switch es una estructura de control que permite evaluar una expresi\u00f3n y ejecutar diferentes bloques de c\u00f3digo seg\u00fan su valor. Es \u00fatil cuando se tienen m\u00faltiples condiciones basadas en el mismo valor.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-switch","title":"Sintaxis de switch","text":"Sintaxis de Switch<pre><code>switch (expresi\u00f3n) {\n    case valor1:\n        // C\u00f3digo para el caso valor1\n        break;\n    case valor2:\n        // C\u00f3digo para el caso valor2\n        break;\n    default:\n        // C\u00f3digo si ning\u00fan caso coincide\n}\n</code></pre> <p>Nota: El uso de <code>break</code> asegura que el programa salga del bloque <code>switch</code> despu\u00e9s de ejecutar el caso correspondiente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplo_1","title":"Ejemplo","text":"<p>Ejemplo de Switch</p> <p>En este ejemplo, se determina el d\u00eda de la semana seg\u00fan un n\u00famero introducido:</p> D\u00eda de la semana con Switch<pre><code>const dia = 3;\n\nswitch (dia) {\n    case 1:\n        console.log(\"Lunes\");\n        break;\n    case 2:\n        console.log(\"Martes\");\n        break;\n    case 3:\n        console.log(\"Mi\u00e9rcoles\");\n        break;\n    case 4:\n        console.log(\"Jueves\");\n        break;\n    case 5:\n        console.log(\"Viernes\");\n        break;\n    default:\n        console.log(\"Fin de semana\");\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfD\u00eda = 1?}\n    B --&gt;|S\u00ed| C[Lunes]\n    B --&gt;|No| D{\u00bfD\u00eda = 2?}\n    D --&gt;|S\u00ed| E[Martes]\n    D --&gt;|No| F{\u00bfD\u00eda = 3?}\n    F --&gt;|S\u00ed| G[Mi\u00e9rcoles]\n    F --&gt;|No| H{\u00bfD\u00eda = 4?}\n    H --&gt;|S\u00ed| I[Jueves]\n    H --&gt;|No| J{\u00bfD\u00eda = 5?}\n    J --&gt;|S\u00ed| K[Viernes]\n    J --&gt;|No| L[Fin de semana]\n    C --&gt; M[Fin]\n    E --&gt; M\n    G --&gt; M\n    I --&gt; M\n    K --&gt; M\n    L --&gt; M</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios_1","title":"Ejercicios","text":"<p>Ejercicio 1: Clasificaci\u00f3n de veh\u00edculos</p> <ul> <li>Crea un programa que solicite al usuario el tipo de veh\u00edculo (\"coche\", \"moto\" o \"cami\u00f3n\").</li> <li>Muestra un mensaje con el n\u00famero de ruedas t\u00edpico para ese tipo de veh\u00edculo:<ul> <li>\"Coche\": 4 ruedas.</li> <li>\"Moto\": 2 ruedas.</li> <li>\"Cami\u00f3n\": m\u00e1s de 4 ruedas.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de veh\u00edculos<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet tipo = prompt(\"Introduce el tipo de veh\u00edculo: \").toLowerCase();\n\nswitch (tipo) {\n    case \"coche\":\n        console.log(\"Un coche tiene 4 ruedas.\");\n        break;\n    case \"moto\":\n        console.log(\"Una moto tiene 2 ruedas.\");\n        break;\n    case \"cami\u00f3n\":\n        console.log(\"Un cami\u00f3n tiene m\u00e1s de 4 ruedas.\");\n        break;\n    default:\n        console.log(\"Tipo de veh\u00edculo no reconocido.\");\n}\n</code></pre> <p>Ejercicio 2: Meses del a\u00f1o</p> <ul> <li>Crea un programa que solicite al usuario un n\u00famero del 1 al 12.</li> <li>Muestra el nombre del mes correspondiente:<ul> <li>1: Enero, 2: Febrero, etc.</li> <li>Si el n\u00famero no est\u00e1 en el rango, muestra un mensaje de error.</li> </ul> </li> </ul> Soluci\u00f3n Meses del a\u00f1o<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet mes = parseInt(prompt(\"Introduce un n\u00famero del 1 al 12: \"));\n\nswitch (mes) {\n    case 1:\n        console.log(\"Enero\");\n        break;\n    case 2:\n        console.log(\"Febrero\");\n        break;\n    case 3:\n        console.log(\"Marzo\");\n        break;\n    case 4:\n        console.log(\"Abril\");\n        break;\n    case 5:\n        console.log(\"Mayo\");\n        break;\n    case 6:\n        console.log(\"Junio\");\n        break;\n    case 7:\n        console.log(\"Julio\");\n        break;\n    case 8:\n        console.log(\"Agosto\");\n        break;\n    case 9:\n        console.log(\"Septiembre\");\n        break;\n    case 10:\n        console.log(\"Octubre\");\n        break;\n    case 11:\n        console.log(\"Noviembre\");\n        break;\n    case 12:\n        console.log(\"Diciembre\");\n        break;\n    default:\n        console.log(\"N\u00famero fuera de rango.\");\n}\n</code></pre> <p>Ejercicio 3: Clasificaci\u00f3n de frutas</p> <ul> <li>Crea un programa que solicite al usuario el nombre de una fruta (\"manzana\", \"pl\u00e1tano\", \"naranja\").</li> <li>Muestra un mensaje indicando el color t\u00edpico de la fruta:<ul> <li>\"Manzana\": Roja o verde.</li> <li>\"Pl\u00e1tano\": Amarillo.</li> <li>\"Naranja\": Naranja.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de frutas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fruta = prompt(\"Introduce el nombre de una fruta: \").toLowerCase();\n\nswitch (fruta) {\n    case \"manzana\":\n        console.log(\"Una manzana puede ser roja o verde.\");\n        break;\n    case \"pl\u00e1tano\":\n        console.log(\"Un pl\u00e1tano es amarillo.\");\n        break;\n    case \"naranja\":\n        console.log(\"Una naranja es naranja.\");\n        break;\n    default:\n        console.log(\"Fruta no reconocida.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#134-operador-ternario","title":"1.3.4 Operador Ternario","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-el-operador-ternario","title":"\u00bfQu\u00e9 es el operador ternario?","text":"<p>El operador ternario es una forma compacta de escribir una expresi\u00f3n condicional en JavaScript. Tiene la siguiente estructura:</p> Sintaxis del Operador Ternario<pre><code>condici\u00f3n ? expresi\u00f3n_si_verdadero : expresi\u00f3n_si_falso;\n</code></pre> <p>Ejemplo: Determinar si un n\u00famero es par o impar.</p> N\u00famero par o impar<pre><code>const numero = 5;\nconst resultado = (numero % 2 === 0) ? \"Par\" : \"Impar\";\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio","title":"Ejercicio","text":"<p>Ejercicio: Calificaci\u00f3n r\u00e1pida</p> <ul> <li>Crea un programa que solicite al usuario una calificaci\u00f3n num\u00e9rica.</li> <li>Muestra \"Aprobado\" si la calificaci\u00f3n es mayor o igual a 5, o \"Suspendido\" si es menor.</li> </ul> Soluci\u00f3n Calificaci\u00f3n r\u00e1pida<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet calificacion = parseFloat(prompt(\"Introduce tu calificaci\u00f3n: \"));\n\nlet resultado = (calificacion &gt;= 5) ? \"Aprobado\" : \"Suspendido\";\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#14-bucles","title":"1.4. Bucles","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-son-los-bucles","title":"\u00bfQu\u00e9 son los bucles?","text":"<p>Los bucles son estructuras de control que permiten repetir un bloque de c\u00f3digo varias veces. Son especialmente \u00fatiles para automatizar tareas repetitivas y evitar escribir m\u00faltiples l\u00edneas de c\u00f3digo de manera manual.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico","text":"<p>Supongamos que queremos imprimir los n\u00fameros del 1 al 10 en la consola. Sin un bucle, tendr\u00edamos que escribir:</p> <pre><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\nconsole.log(5);\nconsole.log(6);\n...\n...\nconsole.log(100);\n</code></pre> <p>Con un bucle, podemos reducir este c\u00f3digo a:</p> <pre><code>for (let i = 1; i &lt;= 100; i++) {\n    console.log(i);\n}\n</code></pre> <p>Tipos de bucles en JavaScript</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#tipos-de-bucles-en-js-y-cuando-utilizarlos","title":"Tipos de bucles en JS y cu\u00e1ndo utilizarlos","text":"<ul> <li><code>for</code>: Se utiliza cuando sabemos de antemano cu\u00e1ntas iteraciones queremos realizar.</li> <li><code>while</code>: Ideal para cuando no sabemos exactamente cu\u00e1ntas veces se repetir\u00e1 el bloque, pero tenemos una condici\u00f3n que lo determina.</li> <li><code>do-while</code>: Similar a <code>while</code>, pero asegura que el bloque de c\u00f3digo se ejecutar\u00e1 al menos una vez.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-for","title":"Bucle For","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-for","title":"\u00bfQu\u00e9 es un bucle for?","text":"<p>El bucle <code>for</code> se utiliza para repetir un bloque de c\u00f3digo un n\u00famero espec\u00edfico de veces. Consiste en tres partes: <code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {bloque de instrucciones;}</code>.</p> <ol> <li> <p>Inicializaci\u00f3n: Se define la variable de control que se usar\u00e1 para contar las iteraciones. Esto se realiza solo una vez al inicio del bucle.          - Ejemplo: <code>let i = 1;</code> establece que el contador comienza en 1.</p> </li> <li> <p>Condici\u00f3n: Es la expresi\u00f3n l\u00f3gica que se eval\u00faa antes de cada iteraci\u00f3n. Mientras sea <code>true</code>, el bucle continuar\u00e1 ejecut\u00e1ndose.</p> <ul> <li>Ejemplo: <code>i &lt;= 5</code> asegura que el bucle se detendr\u00e1 cuando <code>i</code> sea mayor a 5.</li> </ul> </li> <li> <p>Actualizaci\u00f3n: Es la operaci\u00f3n que modifica la variable de control al final de cada iteraci\u00f3n. Generalmente, se incrementa o decrementa.</p> <ul> <li>Ejemplo: <code>i++</code> incrementa el valor de <code>i</code> en 1 despu\u00e9s de cada iteraci\u00f3n.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-for","title":"Sintaxis de for","text":"Sintaxis de For<pre><code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {\n    // blque de \u00f3\u00f3digo a ejecutar en cada iteraci\u00f3n\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo","title":"Ejemplo","text":"<p>Ejemplo de Bucle For</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle For<pre><code>for (let i = 1; i &lt;= 5; i++) {\n    console.log(i);\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C{\u00bfi &lt;= 5?}\n    C --&gt;|S\u00ed| D[Ejecutar c\u00f3digo]\n    D --&gt; E[Incrementar i]\n    E --&gt; C\n    C --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-while","title":"Bucle While","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-while","title":"\u00bfQu\u00e9 es un bucle while?","text":"<p>El bucle <code>while</code> ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-while","title":"Sintaxis de while","text":"Sintaxis de While<pre><code>while (condici\u00f3n) {\n    // C\u00f3digo a ejecutar mientras la condici\u00f3n sea verdadera\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_1","title":"Ejemplo","text":"<p>Ejemplo de Bucle While</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle While<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    console.log(i);\n    i++;\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C{\u00bfi &lt;= 5?}\n    C --&gt;|S\u00ed| D[Ejecutar c\u00f3digo]\n    D --&gt; E[Incrementar i]\n    E --&gt; C\n    C --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-do-while","title":"Bucle Do-While","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-do-while","title":"\u00bfQu\u00e9 es un bucle do-while?","text":"<p>El bucle <code>do-while</code> es similar al <code>while</code>, pero garantiza que el bloque de c\u00f3digo se ejecute al menos una vez, incluso si la condici\u00f3n es falsa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-do-while","title":"Sintaxis de do-while","text":"Sintaxis de Do-While<pre><code>do {\n    // C\u00f3digo a ejecutar\n} while (condici\u00f3n);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_2","title":"Ejemplo","text":"<p>Ejemplo de Bucle Do-While</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle Do-While<pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 5);\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C[Ejecutar c\u00f3digo]\n    C --&gt; D[Incrementar i]\n    D --&gt; E{\u00bfi &lt;= 5?}\n    E --&gt;|S\u00ed| C\n    E --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicios-de-bucles","title":"Ejercicios de Bucles","text":"<p>Importante</p> <p>Todos los ejercicios deben resolverse utilizando los tres tipos de bucles: <code>for</code>, <code>while</code> y <code>do-while</code>. Esto ayuda a practicar y entender las diferencias y aplicaciones de cada tipo de bucle.</p> <p>Ejercicio 1: Imprimir un asterisco</p> <ul> <li>Usa un bucle para imprimir un * (<code>*</code>) en 10 veces. Resuelve este ejercicio utilizando los tres tipos de bucles: <code>for</code>, <code>while</code> y <code>do-while</code>.</li> </ul> <pre><code>*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle for <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(\"*\");\n}\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle while <pre><code>let i = 1;\nwhile (i &lt;= 10) {\n    console.log(\"*\");\n    i++;\n}\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle do-while <pre><code>let i = 1;\ndo {\n    console.log(\"*\");\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el ejercicio, de manera que tengamos una constante <code>N</code> que determine cu\u00e1ntas veces se imprime el asterisco.</li> </ul> <p>Ejercicio 2: Imprimir una secuencia de n\u00fameros</p> <ul> <li>Escribe un programa que imprima en la consola los n\u00fameros del 1 al 10, uno por l\u00ednea.</li> </ul> Soluci\u00f3n Imprimir n\u00fameros del 1 al 10<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> Solucion con bucle while Imprimir n\u00fameros del 1 al 10<pre><code>let i = 1;\nwhile (i &lt;= 10) {\n    console.log(i);\n    i++;\n}\n</code></pre> Soluci\u00f3n con bucle do-while Imprimir n\u00fameros del 1 al 10<pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Retos adicional</p> <ul> <li>Modifica el programa para que imprima los n\u00fameros del 10 al 1, en orden descendente.</li> <li>Define una constante <code>N</code> que determine cu\u00e1ntos n\u00fameros se imprimir\u00e1n.</li> </ul> <p>Ejercicio 3: Suma de los primeros 100 n\u00fameros</p> <ul> <li>Crea un programa que calcule la suma de los n\u00fameros del 1 al 100.</li> </ul> Soluci\u00f3n Suma de los primeros N n\u00fameros<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet suma = 0;\nfor (let i = 1; i &lt;= 100; i++) {\n    suma += i;\n}\nconsole.log(\"La suma es:\", suma);\n</code></pre> Soluci\u00f3n con bucle while Suma de los primeros N n\u00fameros<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet suma = 0;\nlet i = 1;\nwhile (i &lt;= 100) {\n    suma += i;\n    i++;\n}\nconsole.log(\"La suma es:\", suma);\n</code></pre> Soluci\u00f3n con bucle do-while Suma de los primeros N n\u00fameros<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet suma = 0;\nlet i = 1;\ndo {\n    suma += i;\n    i++;\n} while (i &lt;= 100);\nconsole.log(\"La suma es:\", suma);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa para que solicite al usuario un n\u00famero <code>N</code> y calcule la suma de los n\u00fameros del 1 al <code>N</code>.</li> </ul> <p>Ejercicio 4: Tabla de multiplicar</p> <ul> <li>Desarrolla un programa que pida al usuario un n\u00famero entero y muestre en la consola la tabla de multiplicar de ese n\u00famero del 1 al 10. El formato debe ser:</li> </ul> <pre><code>2 x 1 = 2\n2 x 2 = 4\n...\n...\n2 x 10 = 20\n</code></pre> Soluci\u00f3n Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`${num} x ${i} = ${num * i}`);\n}\n</code></pre> Soluci\u00f3n con bucle while Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 1;\nwhile (i &lt;= 10) {\n    console.log(`${num} x ${i} = ${num * i}`);\n    i++;\n}\n</code></pre> Soluci\u00f3n con bucle do-while Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 1;\ndo {\n    console.log(`${num} x ${i} = ${num * i}`);\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa tenga dos constantes <code>MIN</code> y <code>MAX</code>. Por ejemlo, si <code>MIN = 5</code> y <code>MAX = 15</code>, el programa mostrar\u00e1 la tabla de multiplicar del 5 al 15.</li> </ul> <p>Ejercicio 5: N\u00fameros pares entre 1 y N</p> <ul> <li>Escribe un programa que simprima en la consola todos los n\u00fameros pares desde 1 hasta 100.</li> </ul> Soluci\u00f3n N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nfor (let i = 2; i &lt;= 100; i += 2) {\n    console.log(i);\n}\n</code></pre> Soluci\u00f3n con bucle while N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 2;\nwhile (i &lt;= 100) {\n    console.log(i);\n    i += 2;\n}\n</code></pre> Soluci\u00f3n con bucle do-while N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 2;\ndo {\n    console.log(i);\n    i += 2;\n} while (i &lt;= 100);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa para que solicite al usuario un n\u00famero <code>N</code> y muestre los n\u00fameros pares desde 1 hasta <code>N</code>.</li> </ul> <p>Ejercicio 6: Invertir una cadena</p> <ul> <li>Crea un programa que pida al usuario una cadena de texto y luego imprima la cadena invertida.</li> <li>Aunque a\u00fan no hemos vista arrays, saber que con la expresi\u00f3n <code>texto[i]</code> se puede acceder a cada car\u00e1cter de la cadena (la i debe estar entre 0 y la longitud de la cadena(<code>length</code>)).</li> </ul> Soluci\u00f3n Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nfor (let i = texto.length - 1; i &gt;= 0; i--) {\n    invertida += texto[i];\n}\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> Soluci\u00f3n con bucle while Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nlet i = texto.length - 1;\nwhile (i &gt;= 0) {\n    invertida += texto[i];\n    i--;\n}\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> Soluci\u00f3n con bucle do-while Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nlet i = texto.length - 1;\ndo {\n    invertida += texto[i];\n    i--;\n} while (i &gt;= 0);\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> <p>Ejercicio 7: Contar vocales en una cadena</p> <ul> <li>Desarrolla un programa que solicite al usuario una cadena de texto y cuente cu\u00e1ntas vocales contiene.</li> <li>Para saber si una letra es una vocal podemos utilizar un <code>if</code> o utilizar el m\u00e9todo <code>includes()</code> de los strings.</li> </ul> Soluci\u00f3n <p>```javascript linenums=\"1\" title=\"Contar vocales en una cadena\" const prompt = require(\"prompt-sync\")(); let texto = prompt(\"Introduce una cadena: \").toLowerCase(); let contador = 0; let vocales = \"aeiou\"; for (let i = 0; i &lt; texto.length; i++) {     if (vocales.includes(texto[i])) {         contador++;     } } console.log(\"N\u00famero de vocales:\", contador);</p> Soluci\u00f3n con bucle while Contar vocales en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \").toLowerCase();\nlet contador = 0;\nlet vocales = \"aeiou\";\nlet i = 0;\nwhile (i &lt; texto.length) {\n    if (vocales.includes(texto[i])) {\n        contador++;\n    }\n    i++;\n}\nconsole.log(\"N\u00famero de vocales:\", contador);\n</code></pre> Soluci\u00f3n con bucle do-while Contar vocales en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \").toLowerCase();\nlet contador = 0;\nlet vocales = \"aeiou\";\nlet i = 0;\ndo {\n    if (vocales.includes(texto[i])) {\n        contador++;\n    }\n    i++;\n} while (i &lt; texto.length);\nconsole.log(\"N\u00famero de vocales:\", contador);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucles-anidados","title":"bucles anidados","text":"<p>Los bucles anidados son bucles que se encuentran dentro de otros bucles. Son \u00fatiles para realizar tareas m\u00e1s complejas que requieren m\u00faltiples iteraciones.  Sintaxis de un bucle <code>for</code> anidado:</p> <p>Bucle For Anidado<pre><code>for (let i = 1; i &lt;= 5; i++) {\n    for (let j = 1; j &lt;= 3; j++) {\n        console.log(i, j);\n    }\n}\n</code></pre> Este tipo de bucles se utilizan com\u00fanmente para recorrer matrices, tablas, realizar c\u00e1lculos matriciales, entre otros.</p> <p>Sistaxis de un bucle <code>while</code> anidado:</p> Bucle While Anidado<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    let j = 1;\n    while (j &lt;= 3) {\n        console.log(i, j);\n        j++;\n    }\n    i++;\n}\n</code></pre> <p>Este tipo de bucles se utilizan com\u00fanmente cuando no se conoce el n\u00famero exacto de iteraciones y se necesita una condici\u00f3n de salida m\u00e1s compleja.</p> <p>Tambi\u00e9n podemos encontrar bucles anidados mixtos como un bucle <code>for</code> dentro de un bucle <code>do-while</code> o viceversa.</p> Bucle Mixto Anidado<pre><code>let i = 1;\ndo {\n    for (let j = 1; j &lt;= 3; j++) {\n        console.log(i, j);\n    }\n    i++;\n} while (i &lt;= 5);\n</code></pre> <p>Nota</p> <p>Es importante tener en cuenta que los bucles anidados pueden aumentar la complejidad del c\u00f3digo y hacerlo m\u00e1s dif\u00edcil de entender. Por lo tanto, es recomendable utilizarlos con moderaci\u00f3n y asegurarse de que sean necesarios para la tarea en cuesti\u00f3n.</p> <p>Ejercicio 8: N\u00fameros primos</p> <ul> <li>Crea un programa que calcule y muestre todos los n\u00fameros primos entre 1 y 100.</li> </ul> <pre><code>1\n2\n3\n5\n7\n11\n13\n17\n...\n100\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle for <pre><code>for (let num = 2; num &lt;= 100; num++) {\n    let esPrimo = true;\n    for (let i = 2; i &lt; num; i++) {\n        if (num % i === 0) {\n            esPrimo = false;\n            break;\n        }\n    }\n    if (esPrimo) {\n        console.log(num);\n    }\n}\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle while <pre><code>let num = 2;\nwhile (num &lt;= 100) {\n    let esPrimo = true;\n    let i = 2;\n    while (i &lt; num) {\n        if (num % i === 0) {\n            esPrimo = false;\n            break;\n        }\n        i++;\n    }\n    if (esPrimo) {\n        console.log(num);\n    }\n    num++;\n}\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle do-while <pre><code>let num = 2;\ndo {\n    let esPrimo = true;\n    let i = 2;\n    do {\n        if (num % i === 0) {\n            esPrimo = false;\n            break;\n        }\n        i++;\n    } while (i &lt; num);\n    if (esPrimo) {\n        console.log(num);\n    }\n    num++;\n} while (num &lt;= 100);\n</code></pre> <p>Ejercicio 9, tri\u00e1ngulo rect\u00e1ngulo</p> <ul> <li>Usa un bucle para imprimir un tri\u00e1ngulo rect\u00e1ngulo de asteriscos:</li> </ul> <pre><code>*\n**\n***\n****\n*****\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle for <pre><code>for (let i = 1; i &lt;= 5; i++) {\n    let linea = \"\";\n    for (let j = 1; j &lt;= i; j++) {\n        linea += \"*\";\n    }\n    console.log(linea);\n}\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle while <pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    let linea = \"\";\n    let j = 1;\n    while (j &lt;= i) {\n        linea += \"*\";\n        j++;\n    }\n    console.log(linea);\n    i++;\n}\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle do-while <pre><code>let i = 1;\ndo {\n    let linea = \"\";\n    let j = 1;\n    do {\n        linea += \"*\";\n        j++;\n    } while (j &lt;= i);\n    console.log(linea);\n    i++;\n} while (i &lt;= 5);\n</code></pre> Reto adicional <ul> <li>Intenta imprimir el tri\u00e1ngulo al rev\u00e9s.</li> <li>Ejemplo:</li> </ul> <pre><code>*****\n****\n***\n**\n*\n</code></pre> <p>Ejercicio 10: Tablero ajedrez</p> <ul> <li>Crea un programa que imprima un tablero de ajedrez de 8x8 en la consola, utilizando los caracteres <code>#</code> y <code></code> (espacio en blanco).</li> </ul> <pre><code># # # #\n # # # #\n# # # #\n # # # #    \n# # # #\n # # # #\n# # # #\n # # # #\n</code></pre> Soluci\u00f3n con for <pre><code>for (let i = 1; i &lt;= 8; i++) {\n    let linea = \"\";\n    for (let j = 1; j &lt;= 8; j++) {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n    }\n    console.log(linea);\n}\n</code></pre> Soluci\u00f3n con while <pre><code>let i = 1;\nwhile (i &lt;= 8) {\n    let linea = \"\";\n    let j = 1;\n    while (j &lt;= 8) {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n        j++;\n    }\n    console.log(linea);\n    i++;\n}\n</code></pre> Soluci\u00f3n con do-while <pre><code>let i = 1;\ndo {\n    let linea = \"\";\n    let j = 1;\n    do {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n        j++;\n    } while (j &lt;= 8);\n    console.log(linea);\n    i++;\n} while (i &lt;= 8);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#errores-comunes-en-bucles","title":"Errores Comunes en Bucles","text":"<p>Los bucles son herramientas muy \u00fatiles, pero tambi\u00e9n pueden generar errores si no se utilizan correctamente. A continuaci\u00f3n, se explican algunos de los errores m\u00e1s comunes:</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#1-bucles-infinitos","title":"1. Bucles infinitos","text":"<p>Un bucle infinito ocurre cuando la condici\u00f3n para salir del bucle nunca se cumple, haciendo que el programa se ejecute indefinidamente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-bucle-infinito-con-while","title":"Ejemplo de bucle infinito con <code>while</code>","text":"<pre><code>let i = 0;\nwhile (i &lt; 10) {\n    console.log(i);\n    // Falta incrementar `i`, el bucle nunca termina\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion","title":"Soluci\u00f3n","text":"<pre><code>let i = 0;\nwhile (i &lt; 10) {\n    console.log(i);\n    i++; // Incrementar para salir del bucle\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#2-bucles-que-nunca-se-ejecutan","title":"2. Bucles que nunca se ejecutan","text":"<p>Esto ocurre cuando la condici\u00f3n inicial no se cumple, por lo que el bucle no se ejecuta ni una sola vez.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-bucle-que-nunca-se-ejecuta-con-for","title":"Ejemplo de bucle que nunca se ejecuta con <code>for</code>","text":"<pre><code>for (let i = 10; i &lt; 5; i++) {\n    console.log(i); // Nunca entra al bucle\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_1","title":"Soluci\u00f3n","text":"<p>Aseg\u00farate de que la condici\u00f3n inicial permita al menos una iteraci\u00f3n. <pre><code>for (let i = 5; i &lt; 10; i++) {\n    console.log(i); // Se ejecutar\u00e1 correctamente\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#3-modificar-la-variable-de-control-dentro-del-bucle","title":"3. Modificar la variable de control dentro del bucle","text":"<p>Cambiar la variable que controla el bucle puede generar resultados inesperados o bucles infinitos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-error-al-modificar-la-variable-de-control","title":"Ejemplo de error al modificar la variable de control","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n    i++; // Modificar `i` dentro del bucle genera resultados inesperados\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_2","title":"Soluci\u00f3n","text":"<p>Deja que el incremento de la variable de control lo maneje el propio bucle. <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i); // Incremento manejado autom\u00e1ticamente por el bucle\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#4-usar-la-condicion-incorrecta","title":"4. Usar la condici\u00f3n incorrecta","text":"<p>Un error com\u00fan es escribir mal la condici\u00f3n, lo que puede generar resultados inesperados o bucles infinitos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-condicion-incorrecta","title":"Ejemplo de condici\u00f3n incorrecta","text":"<pre><code>let i = 0;\nwhile (i = 10) { // Error: asignaci\u00f3n en lugar de comparaci\u00f3n\n    console.log(i);\n    i++;\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_3","title":"Soluci\u00f3n","text":"<p>Usa el operador de comparaci\u00f3n <code>===</code> o <code>==</code> seg\u00fan corresponda. <pre><code>let i = 0;\nwhile (i === 10) {\n    console.log(i);\n    i++;\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#5-salir-del-bucle-incorrectamente","title":"5. Salir del bucle incorrectamente","text":"<p>Usar <code>break</code> o <code>return</code> de forma incorrecta puede terminar el bucle antes de lo esperado o generar errores en el flujo del programa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-uso-incorrecto-de-break","title":"Ejemplo de uso incorrecto de <code>break</code>","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n    if (i === 2) {\n        break; // Termina el bucle antes de tiempo\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_4","title":"Soluci\u00f3n","text":"<p>Usa <code>break</code> solo cuando sea necesario salir del bucle en condiciones espec\u00edficas. <pre><code>for (let i = 0; i &lt; 5; i++) {\n    if (i === 2) {\n        continue; // Salta a la siguiente iteraci\u00f3n\n    }\n    console.log(i); // Se ejecutar\u00e1 para valores distintos de 2\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#6-variables-mal-inicializadas","title":"6. Variables mal inicializadas","text":"<p>Si no se inicializan correctamente las variables utilizadas en la condici\u00f3n o dentro del bucle, pueden generarse errores o resultados inesperados.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-variable-mal-inicializada","title":"Ejemplo de variable mal inicializada","text":"<pre><code>let suma;\nfor (let i = 0; i &lt; 5; i++) {\n    suma += i; // Error: `suma` no tiene un valor inicial\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_5","title":"Soluci\u00f3n","text":"<p>Inicializa las variables antes de usarlas. <pre><code>let suma = 0;\nfor (let i = 0; i &lt; 5; i++) {\n    suma += i;\n}\nconsole.log(suma);\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#instrucciones-break-y-continue","title":"Instrucciones <code>break</code> y <code>continue</code>","text":"<p>Las instrucciones <code>break</code> y <code>continue</code> pueden ser \u00fatiles en ciertas situaciones, pero su abuso o uso inadecuado puede hacer que el c\u00f3digo sea dif\u00edcil de leer y mantener.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#break","title":"<code>break</code>","text":"<ul> <li>Sirve para terminar un bucle de forma inmediata, sin importar si la condici\u00f3n del bucle a\u00fan es verdadera.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_3","title":"Ejemplo","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 5) {\n        break; // El bucle termina en 5\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#continue","title":"<code>continue</code>","text":"<ul> <li>Sirve para saltar a la siguiente iteraci\u00f3n del bucle, ignorando el resto del c\u00f3digo dentro del mismo.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_4","title":"Ejemplo","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 === 0) {\n        continue; // Ignora n\u00fameros pares\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#por-que-evitar-break-y-continue","title":"Por qu\u00e9 evitar <code>break</code> y <code>continue</code>","text":"<ul> <li>Reducci\u00f3n de claridad: El flujo de control se vuelve menos predecible y m\u00e1s dif\u00edcil de seguir.</li> <li>Alternativas m\u00e1s claras: Generalmente, es mejor estructurar el c\u00f3digo para que las condiciones de salida o iteraci\u00f3n se manejen de manera expl\u00edcita.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#alternativa-sin-break-y-continue","title":"Alternativa sin <code>break</code> y <code>continue</code>","text":"<p>En lugar de usar <code>break</code> o <code>continue</code>, se pueden reestructurar las condiciones del bucle:</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 !== 0) {\n        console.log(i); // Solo imprime n\u00fameros impares\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicios-de-bucles-en-este-caso-debes-determinar-que-tipo-de-bucle-es-el-mas-adecuado-para-cada-ejercicio","title":"Ejercicios de Bucles, en este caso debes determinar qu\u00e9 tipo de bucle es el m\u00e1s adecuado para cada ejercicio.","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-1-pin-de-seguridad","title":"Ejercicio 1: PIN de seguridad","text":"<ul> <li>Crea un programa que solicite al usuario un PIN de seguridad de 4 d\u00edgitos. Si el PIN ingresado no es correcto, el programa debe mostrar un mensaje de error y permitir al usuario intentarlo nuevamente. El programa debe finalizar cuando el PIN ingresado sea correcto. O si el usuario ha intentado 3 veces. </li> <li>Ampliaci\u00f3n: Si el usuario ha intentado 3 veces, el programa debe bloquearse durante 30 segundos antes de permitir nuevos intentos, investiga como bloquear el rograma 30 segundos.</li> </ul> <pre><code>Introduce tu PIN de 4 d\u00edgitos: 1234\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nIntroduce tu PIN de 4 d\u00edgitos: 5678\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nIntroduce tu PIN de 4 d\u00edgitos: 9999\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nEl programa se bloquear\u00e1 durante 30 segundos.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-2-adivina-el-numero","title":"Ejercicio 2: Adivina el n\u00famero","text":"<ul> <li>Crea un programa que genere un n\u00famero aleatorio entre 1 y 100. Luego, solicita al usuario que adivine el n\u00famero. Si el n\u00famero ingresado es mayor que el n\u00famero generado, muestra un mensaje indicando que el n\u00famero es demasiado alto. Si el n\u00famero ingresado es menor que el n\u00famero generado, muestra un mensaje indicando que el n\u00famero es demasiado bajo. El programa debe continuar solicitando al usuario que adivine el n\u00famero hasta que lo adivine correctamente.</li> <li>Investiga como generar n\u00fameros aleatorios en JavaScript. </li> </ul> <pre><code>Adivina el n\u00famero entre 1 y 100: 50\nEl n\u00famero es demasiado bajo. Int\u00e9ntalo de nuevo.\nAdivina el n\u00famero entre 1 y 100: 75\nEl n\u00famero es demasiado alto. Int\u00e9ntalo de nuevo.\nAdivina el n\u00famero entre 1 y 100: 60\n\u00a1Felicidades! Has adivinado el n\u00famero.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-3-calculadora-de-factorial","title":"Ejercicio 3: Calculadora de factorial","text":"<ul> <li>Crea un programa que solicite al usuario un n\u00famero entero positivo y calcule su factorial. El factorial de un n\u00famero <code>n</code> se define como el producto de todos los enteros positivos menores o iguales a <code>n</code>.</li> <li>Por ejemplo, el factorial de 5 (<code>5!</code>) es <code>5 x 4 x 3 x 2 x 1 = 120</code>.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: 5\nEl factorial de 5 es: 120\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-4-validacion-entrada-de-datos","title":"Ejercicio 4: Validaci\u00f3n entrada de datos","text":"<ul> <li>Crea un programa que solicite al usuario un n\u00famero entero positivo. Si el usuario ingresa un valor no num\u00e9rico o un n\u00famero negativo, el programa debe mostrar un mensaje de error y solicitar al usuario que ingrese un n\u00famero v\u00e1lido. El programa debe continuar solicitando al usuario que ingrese un n\u00famero v\u00e1lido hasta que lo haga.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: hola\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: -5\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: 10\nN\u00famero v\u00e1lido: 10\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-5-validacion-de-datos-con-operacion","title":"Ejercicio 5: Validaci\u00f3n de datos con operaci\u00f3n","text":"<ul> <li>Pide al usuario que introduzca un n\u00famero entero y positivo. Si es correcto que lo sume en un acumulador. Si el usuario introduce un n\u00famero negativo o no entero, debe mostrar un mensaje de error y solicitar al usuario que introduzca un n\u00famero v\u00e1lido. El programa finalizar\u00e1 cuando el usuario introduzca un <code>0</code>, en ese caso mostrar\u00e1 el total acumulado</li> <li>Ampliaci\u00f3n: Calcula tambi\u00e9n la media de los n\u00fameros introducidos.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: 5\nIntroduce un n\u00famero entero positivo: 10\nIntroduce un n\u00famero entero positivo: hola\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: -5\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: 15\nIntroduce un n\u00famero entero positivo: 0\nTotal acumulado: 30\nMedia de los n\u00fameros introducidos: 10\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/","title":"Unidad 1: Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_15/#15-uso-avanzado-de-numeros-cadenas-y-fechas","title":"1.5 Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":"<p>En este tema exploraremos las clases y bibliotecas integradas de JavaScript para trabajar con n\u00fameros, cadenas y fechas, sus m\u00e9todos y propiedades principales, y c\u00f3mo aplicar estas herramientas en escenarios pr\u00e1cticos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#151-clase-number","title":"1.5.1 Clase <code>Number</code>","text":"<p>La clase <code>Number</code> en JavaScript representa valores num\u00e9ricos y proporciona una serie de propiedades y m\u00e9todos \u00fatiles para trabajar con n\u00fameros.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#propiedades-de-la-clase-number","title":"Propiedades de la Clase <code>Number</code>","text":"<ol> <li> <p><code>Number.MAX_VALUE</code>: El n\u00famero positivo m\u00e1s grande que se puede representar en JavaScript.     <pre><code>console.log(Number.MAX_VALUE); // Ejemplo: 1.7976931348623157e+308\n</code></pre></p> </li> <li> <p><code>Number.MIN_VALUE</code>: El n\u00famero positivo m\u00e1s peque\u00f1o mayor que 0.     <pre><code>console.log(Number.MIN_VALUE); // Ejemplo: 5e-324\n</code></pre></p> </li> <li> <p><code>Number.POSITIVE_INFINITY</code>: Representa el infinito positivo.     <pre><code>console.log(Number.POSITIVE_INFINITY); // Infinity\n</code></pre></p> </li> <li> <p><code>Number.NEGATIVE_INFINITY</code>: Representa el infinito negativo.     <pre><code>console.log(Number.NEGATIVE_INFINITY); // -Infinity\n</code></pre></p> </li> <li> <p><code>Number.NaN</code>: Representa un valor que no es un n\u00famero (Not-a-Number).     <pre><code>console.log(Number.NaN); // NaN\n</code></pre></p> </li> </ol> <p>Importante</p> <p>El valor <code>NaN</code> suele aparecer como resultado de operaciones inv\u00e1lidas, como dividir 0 entre 0.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-de-la-clase-number","title":"M\u00e9todos de la Clase <code>Number</code>","text":"<ol> <li> <p><code>Number.isNaN(valor)</code>: Comprueba si un valor es <code>NaN</code>.     <pre><code>console.log(Number.isNaN(NaN)); // true\nconsole.log(Number.isNaN(10));  // false\n</code></pre></p> </li> <li> <p><code>Number.isInteger(valor)</code>: Determina si un valor es un n\u00famero entero.     <pre><code>console.log(Number.isInteger(42));    // true\nconsole.log(Number.isInteger(42.5)); // false\n</code></pre></p> </li> <li> <p><code>toFixed(decimales)</code>: Redondea un n\u00famero al n\u00famero de decimales especificado y lo convierte en una cadena.     <pre><code>let num = 3.14159;\nconsole.log(num.toFixed(2)); // \"3.14\"\n</code></pre></p> </li> <li> <p><code>toString(base)</code>: Convierte un n\u00famero en una cadena con la base especificada (binaria, octal, decimal, hexadecimal, etc.).     <pre><code>let num = 255;\nconsole.log(num.toString(16)); // \"ff\" (hexadecimal)\nconsole.log(num.toString(2));  // \"11111111\" (binario)\n</code></pre></p> </li> <li> <p><code>parseInt(cadena, base)</code>: Convierte una cadena en un n\u00famero entero seg\u00fan la base indicada.     <pre><code>console.log(parseInt(\"1010\", 2)); // 10 (binario a decimal)\nconsole.log(parseInt(\"FF\", 16)); // 255 (hexadecimal a decimal)\n</code></pre></p> </li> <li> <p><code>parseFloat(cadena)</code>: Convierte una cadena en un n\u00famero decimal.     <pre><code>console.log(parseFloat(\"3.14\")); // 3.14\nconsole.log(parseFloat(\"123abc\")); // 123\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo","title":"Ejemplo Completo","text":"Ejemplo de uso de la Clase <code>Number</code> <pre><code>let valor = 123.456;\n\nconsole.log(\"Valor original:\", valor);\nconsole.log(\"Redondeado a 2 decimales:\", valor.toFixed(2));\nconsole.log(\"\u00bfEs un entero?:\", Number.isInteger(valor));\nconsole.log(\"M\u00e1ximo valor representable:\", Number.MAX_VALUE);\nconsole.log(\"Valor en hexadecimal:\", valor.toString(16));\nconsole.log(\"N\u00famero desde cadena:\", parseFloat(\"123.45\"));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-number","title":"Ejercicios: Clase <code>Number</code>","text":"<p>Ejercicio 1: Propiedades y M\u00e9todos de Number</p> <ul> <li>Declara un n\u00famero y muestra:<ul> <li>Su valor redondeado a 2 decimales.</li> <li>Su representaci\u00f3n en binario y hexadecimal.</li> <li>Si es un entero o no.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>let numero = 42.789;\nconsole.log(\"Redondeado a 2 decimales:\", numero.toFixed(2));\nconsole.log(\"En binario:\", numero.toString(2));\nconsole.log(\"En hexadecimal:\", numero.toString(16));\nconsole.log(\"\u00bfEs un entero?:\", Number.isInteger(numero));\n</code></pre> <p>Ejercicio 2: Conversi\u00f3n de bases</p> <ul> <li>Escribe un programa que convierta un n\u00famero en distintas bases: binario, octal y hexadecimal.</li> </ul> Soluci\u00f3n <pre><code>let numero = 255;\nconsole.log(\"Binario:\", numero.toString(2));\nconsole.log(\"Octal:\", numero.toString(8));\nconsole.log(\"Hexadecimal:\", numero.toString(16));\n</code></pre> <p>Ejercicio 3: Validar valores num\u00e9ricos</p> <ul> <li>Dado un valor, verifica si es un n\u00famero v\u00e1lido o <code>NaN</code>.</li> </ul> Soluci\u00f3n <pre><code>let valor1 = NaN;\nlet valor2 = 42;\nconsole.log(\"\u00bfEs NaN (valor1)?:\", Number.isNaN(valor1));\nconsole.log(\"\u00bfEs NaN (valor2)?:\", Number.isNaN(valor2));\n</code></pre> <p>Ejercicio 4: Convertir binario a decimal</p> <ul> <li>Crea una funci\u00f3n que reciba una cadena con un n\u00famero binario y devuelva su valor en decimal.</li> </ul> Soluci\u00f3n <pre><code>function binarioADecimal(binario) {\n    return parseInt(binario, 2);\n}\nconsole.log(\"Binario 1010 a decimal:\", binarioADecimal(\"1010\"));\n</code></pre> <p>Ejercicio 5: C\u00e1lculo de porcentaje</p> <ul> <li>Calcula el porcentaje de un valor usando n\u00fameros decimales. Por ejemplo, el 15% de 200.</li> </ul> Soluci\u00f3n <pre><code>let total = 200;\nlet porcentaje = 15;\nlet resultado = (total * porcentaje) / 100;\nconsole.log(\"El 15% de 200 es:\", resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#152-biblioteca-math","title":"1.5.2 Biblioteca <code>Math</code>","text":"<p>La biblioteca <code>Math</code> proporciona una serie de constantes y funciones para realizar operaciones matem\u00e1ticas comunes.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#constantes-de-math","title":"Constantes de <code>Math</code>","text":"<ol> <li><code>Math.PI</code>: Representa el valor de \u03c0.     <pre><code>console.log(Math.PI); // 3.141592653589793\n</code></pre></li> <li><code>Math.E</code>: Base de los logaritmos naturales.     <pre><code>console.log(Math.E); // 2.718281828459045\n</code></pre></li> <li><code>Math.LN10</code>: Logaritmo natural de 10.     <pre><code>console.log(Math.LN10); // 2.302585092994046\n</code></pre></li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-de-math","title":"M\u00e9todos de <code>Math</code>","text":"<ol> <li><code>Math.sqrt(x)</code>: Calcula la ra\u00edz cuadrada de un n\u00famero.     <pre><code>console.log(Math.sqrt(16)); // 4\n</code></pre></li> <li><code>Math.pow(base, exponente)</code>: Calcula una potencia.     <pre><code>console.log(Math.pow(2, 3)); // 8\n</code></pre></li> <li><code>Math.abs(x)</code>: Devuelve el valor absoluto de un n\u00famero.     <pre><code>console.log(Math.abs(-5)); // 5\n</code></pre></li> <li><code>Math.round(x)</code>: Redondea un n\u00famero al entero m\u00e1s cercano.     <pre><code>console.log(Math.round(4.5)); // 5\n</code></pre></li> <li><code>Math.floor(x)</code> y <code>Math.ceil(x)</code>:<ul> <li><code>Math.floor(x)</code>: Redondea hacia abajo.</li> <li><code>Math.ceil(x)</code>: Redondea hacia arriba. <pre><code>console.log(Math.floor(4.7)); // 4\nconsole.log(Math.ceil(4.2));  // 5\n</code></pre></li> </ul> </li> <li><code>Math.random()</code>: Genera un n\u00famero aleatorio entre 0 y 1 (exclusivo).     <pre><code>console.log(Math.random()); // Ejemplo: 0.5487\n</code></pre></li> <li><code>Math.min(...valores)</code> y <code>Math.max(...valores)</code>:<ul> <li><code>Math.min</code>: Devuelve el menor valor.</li> <li><code>Math.max</code>: Devuelve el mayor valor. <pre><code>console.log(Math.min(3, 7, 2, 9)); // 2\nconsole.log(Math.max(3, 7, 2, 9)); // 9\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo_1","title":"Ejemplo Completo","text":"Ejemplo con la biblioteca Math <pre><code>let base = 5;\nlet exponente = 3;\n\nconsole.log(\"Potencia:\", Math.pow(base, exponente));\nconsole.log(\"Ra\u00edz cuadrada de 25:\", Math.sqrt(25));\nconsole.log(\"N\u00famero aleatorio entre 0 y 1:\", Math.random());\nconsole.log(\"Redondeado hacia abajo (4.7):\", Math.floor(4.7));\nconsole.log(\"Redondeado hacia arriba (4.2):\", Math.ceil(4.2));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-biblioteca-math","title":"Ejercicios: Biblioteca <code>Math</code>","text":"<p>Ejercicio 1: Generar n\u00famero aleatorio</p> <ul> <li>Escribe un programa que genere un n\u00famero aleatorio entre 1 y 100.</li> </ul> Soluci\u00f3n <pre><code>let aleatorio = Math.floor(Math.random() * 100) + 1;\nconsole.log(\"N\u00famero aleatorio entre 1 y 100:\", aleatorio);\n</code></pre> <p>Ejercicio 2: Redondeo de n\u00fameros</p> <ul> <li>Solicita al usuario un n\u00famero decimal y muestra:<ul> <li>Su valor redondeado hacia abajo.</li> <li>Su valor redondeado hacia arriba.</li> <li>Su valor redondeado al entero m\u00e1s cercano.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero decimal: \"));\n\nconsole.log(\"Redondeado hacia abajo:\", Math.floor(numero));\nconsole.log(\"Redondeado hacia arriba:\", Math.ceil(numero));\nconsole.log(\"Redondeado al m\u00e1s cercano:\", Math.round(numero));\n</code></pre> <p>Ejercicio 3: Calcular \u00e1rea de un c\u00edrculo</p> <ul> <li>Solicita al usuario el radio de un c\u00edrculo y calcula:<ul> <li>Su \u00e1rea usando la f\u00f3rmula: <code>\u00c1rea = \u03c0 * radio^2</code>.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet radio = parseFloat(prompt(\"Introduce el radio del c\u00edrculo: \"));\nlet area = Math.PI * Math.pow(radio, 2);\n\nconsole.log(\"El \u00e1rea del c\u00edrculo es:\", area);\n</code></pre> <p>Ejercicio 4: Valor absoluto</p> <ul> <li>Solicita un n\u00famero al usuario y muestra su valor absoluto.</li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\nconsole.log(\"El valor absoluto es:\", Math.abs(numero));\n</code></pre> <p>Ejercicio 5: Comparar n\u00fameros</p> <ul> <li>Solicita al usuario tres n\u00fameros y muestra:<ul> <li>El menor de los tres.</li> <li>El mayor de los tres.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\nlet num3 = parseFloat(prompt(\"Introduce el tercer n\u00famero: \"));\n\nconsole.log(\"El menor n\u00famero es:\", Math.min(num1, num2, num3));\nconsole.log(\"El mayor n\u00famero es:\", Math.max(num1, num2, num3));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#153-clase-string","title":"1.5.3 Clase <code>String</code>","text":"<p>La clase <code>String</code> se utiliza para trabajar con cadenas de texto en JavaScript. Proporciona numerosas propiedades y m\u00e9todos que facilitan la manipulaci\u00f3n de texto.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#propiedades-de-la-clase-string","title":"Propiedades de la Clase <code>String</code>","text":"<ol> <li><code>length</code>: Devuelve el n\u00famero de caracteres en una cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.length); // 11\n</code></pre></li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-comunes-de-string","title":"M\u00e9todos Comunes de <code>String</code>","text":"<ol> <li><code>toUpperCase()</code> y <code>toLowerCase()</code>:</li> <li> <p>Convierte una cadena a may\u00fasculas o min\u00fasculas respectivamente.     <pre><code>let texto = \"JavaScript\";\nconsole.log(texto.toUpperCase()); // \"JAVASCRIPT\"\nconsole.log(texto.toLowerCase()); // \"javascript\"\n</code></pre></p> </li> <li> <p><code>charAt(pos)</code>: Devuelve el car\u00e1cter en una posici\u00f3n espec\u00edfica.     <pre><code>let texto = \"Hola\";\nconsole.log(texto.charAt(1)); // \"o\"\n</code></pre></p> </li> <li> <p><code>includes(subcadena)</code>: Verifica si una subcadena est\u00e1 presente en la cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.includes(\"mundo\")); // true\n</code></pre></p> </li> <li> <p><code>indexOf(subcadena)</code>: Devuelve la posici\u00f3n de la primera aparici\u00f3n de una subcadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.indexOf(\"mundo\")); // 6\n</code></pre></p> </li> <li> <p><code>slice(inicio, fin)</code>: Extrae una secci\u00f3n de la cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.slice(0, 4)); // \"Hola\"\n</code></pre></p> </li> <li> <p><code>replace(buscar, reemplazo)</code>: Reemplaza una subcadena por otra.     <pre><code>let texto = \"El cielo es azul\";\nconsole.log(texto.replace(\"azul\", \"rojo\")); // \"El cielo es rojo\"\n</code></pre></p> </li> <li> <p><code>split(separador)</code>: Divide una cadena en un array seg\u00fan un separador.     <pre><code>let texto = \"manzana,banana,naranja\";\nconsole.log(texto.split(\",\")); // [\"manzana\", \"banana\", \"naranja\"]\n</code></pre></p> </li> <li> <p><code>trim()</code>: Elimina espacios en blanco al inicio y al final de una cadena.     <pre><code>let texto = \"   Hola   \";\nconsole.log(texto.trim()); // \"Hola\"\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplos-completos","title":"Ejemplos Completos","text":"Ejemplo con la Clase <code>String</code> <pre><code>let frase = \"  Aprende JavaScript, es genial!  \";\n\nconsole.log(\"Longitud:\", frase.length);\nconsole.log(\"En may\u00fasculas:\", frase.toUpperCase());\nconsole.log(\"Primera palabra:\", frase.slice(2, 9));\nconsole.log(\"\u00bfIncluye 'genial'?:\", frase.includes(\"genial\"));\nconsole.log(\"Sin espacios alrededor:\", frase.trim());\n</code></pre> <p>Trocear una cadena por espacios</p> <p>Dividir texto por espacios\"      - Declara una cadena con el texto \"nombre apellido1 apellido2\".      - Muestra cada parte del texto (nombre, apellido1, apellido2) en l\u00edneas separadas sin utilizar arrays.</p> Otro ejemplo de la case <code>Sttring</code> Dividir texto por espacios<pre><code>const texto = \"nombre apellido1 apellido2\";\n\nlet inicio = 0;\nlet espacio = texto.indexOf(\" \");\n\nwhile (espacio !== -1) {\n    console.log(texto.slice(inicio, espacio));\n    inicio = espacio + 1;\n    espacio = texto.indexOf(\" \", inicio);\n}\n\n// Imprime la \u00faltima parte de la cadena\nconsole.log(texto.slice(inicio));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-string","title":"Ejercicios: Clase <code>String</code>","text":"<p>Ejercicio 1: Manipulaci\u00f3n b\u00e1sica de cadenas</p> <ul> <li>Declara una cadena con el texto: <code>\"Bienvenido a JavaScript\"</code>.</li> <li>Convierte todo el texto a may\u00fasculas.</li> <li>Extrae la palabra <code>\"JavaScript\"</code>.</li> <li>Reemplaza la palabra <code>\"Bienvenido\"</code> por <code>\"Hola\"</code>.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>let texto = \"Bienvenido a JavaScript\";\n\nconsole.log(\"En may\u00fasculas:\", texto.toUpperCase());\nconsole.log(\"Extraer 'JavaScript':\", texto.slice(13));\nconsole.log(\"Reemplazar 'Bienvenido':\", texto.replace(\"Bienvenido\", \"Hola\"));\n</code></pre> <p>Ejercicio 2: Contar palabras</p> <ul> <li>Escribe un programa que cuente el n\u00famero de palabras en una cadena ingresada por el usuario.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nlet palabras = frase.trim().split(\" \").length;\n\nconsole.log(\"N\u00famero de palabras:\", palabras);\n</code></pre> <p>Ejercicio 3: Verificar contenido</p> <ul> <li>Solicita al usuario una frase y verifica si contiene la palabra <code>\"JavaScript\"</code>.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nconsole.log(\"\u00bfContiene 'JavaScript'?:\", frase.includes(\"JavaScript\"));\n</code></pre> <p>Ejercicio 4: Formatear una lista</p> <ul> <li>Dada una cadena con elementos separados por comas, convi\u00e9rtela en una lista con vi\u00f1etas.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>let lista = \"manzana,banana,naranja\";\nlet elementos = lista.split(\",\");\n\nconsole.log(\"Lista con vi\u00f1etas:\");\nelementos.forEach(item =&gt; console.log(\"-\", item));\n</code></pre> <p>Ejercicio 5: Eliminar espacios</p> <ul> <li>Solicita al usuario una frase y elimina todos los espacios en blanco.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nconsole.log(\"Sin espacios:\", frase.replace(/\\s/g, \"\"));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#154-clase-date","title":"1.5.4 Clase <code>Date</code>","text":"<p>La clase <code>Date</code> en JavaScript permite trabajar con fechas y horas, ofreciendo m\u00e9todos para obtener, establecer y manipular valores temporales.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#creacion-de-fechas","title":"Creaci\u00f3n de Fechas","text":"<ol> <li> <p>Fecha actual: <pre><code>const ahora = new Date();\nconsole.log(\"Fecha y hora actuales:\", ahora);\n</code></pre></p> </li> <li> <p>Fecha espec\u00edfica: <pre><code>const fechaEspecifica = new Date(2025, 0, 20); // A\u00f1o, mes (0-indexado), d\u00eda\nconsole.log(\"Fecha espec\u00edfica:\", fechaEspecifica);\n</code></pre></p> </li> <li> <p>Desde una cadena: <pre><code>const fechaCadena = new Date(\"2025-01-20T15:30:00\");\nconsole.log(\"Fecha desde cadena:\", fechaCadena);\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-comunes-de-date","title":"M\u00e9todos Comunes de <code>Date</code>","text":"<ol> <li> <p><code>getFullYear()</code>: Obtiene el a\u00f1o.     <pre><code>console.log(ahora.getFullYear()); // Ejemplo: 2025\n</code></pre></p> </li> <li> <p><code>getMonth()</code>: Obtiene el mes (0-indexado).     <pre><code>console.log(ahora.getMonth()); // Ejemplo: 0 para enero\n</code></pre></p> </li> <li> <p><code>getDate()</code>: Obtiene el d\u00eda del mes.     <pre><code>console.log(ahora.getDate()); // Ejemplo: 20\n</code></pre></p> </li> <li> <p><code>getDay()</code>: Obtiene el d\u00eda de la semana (0 es domingo).     <pre><code>console.log(ahora.getDay()); // Ejemplo: 1 para lunes\n</code></pre></p> </li> <li> <p><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>: Obtienen la hora, minutos y segundos.     <pre><code>console.log(ahora.getHours(), ahora.getMinutes(), ahora.getSeconds());\n</code></pre></p> </li> <li> <p><code>toLocaleDateString()</code>: Formatea la fecha en el formato local.     <pre><code>console.log(ahora.toLocaleDateString()); // Ejemplo: \"20/01/2025\"\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#comparar-fechas","title":"Comparar Fechas","text":"<p>Puedes comparar fechas usando operadores como <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p> <pre><code>const fecha1 = new Date(\"2025-01-20\");\nconst fecha2 = new Date(\"2025-01-25\");\n\nconsole.log(\"\u00bfFecha1 es anterior a Fecha2?:\", fecha1 &lt; fecha2); // true\nconsole.log(\"\u00bfSon iguales?:\", fecha1.getTime() === fecha2.getTime()); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo_2","title":"Ejemplo Completo","text":"Ejemplo con la Clase <code>Date</code> <pre><code>const ahora = new Date();\n\nconsole.log(\"Fecha y hora actuales:\", ahora);\nconsole.log(\"A\u00f1o:\", ahora.getFullYear());\nconsole.log(\"Mes:\", ahora.getMonth() + 1); // Se suma 1 porque es 0-indexado\nconsole.log(\"D\u00eda del mes:\", ahora.getDate());\nconsole.log(\"Hora actual:\", ahora.getHours(), \":\", ahora.getMinutes());\nconsole.log(\"Formato local:\", ahora.toLocaleDateString());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-date","title":"Ejercicios: Clase <code>Date</code>","text":"<p>Ejercicio 1: Obtener fecha y hora actuales</p> <ul> <li>Crea un programa que muestre:<ul> <li>La fecha actual en formato local.</li> <li>La hora actual (hora:minutos).</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio Fecha y hora actuales<pre><code>const ahora = new Date();\n\nconsole.log(\"Fecha actual:\", ahora.toLocaleDateString());\nconsole.log(\"Hora actual:\", ahora.getHours() + \":\" + ahora.getMinutes());\n</code></pre> <p>Ejercicio 2: Comparar dos fechas</p> <ul> <li>Solicita al usuario dos fechas en formato <code>YYYY-MM-DD</code>.</li> <li>Compara ambas fechas e indica cu\u00e1l es anterior o si son iguales.</li> </ul> Soluci\u00f3n del ejercicio Comparar fechas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fecha1 = new Date(prompt(\"Introduce la primera fecha (YYYY-MM-DD): \"));\nlet fecha2 = new Date(prompt(\"Introduce la segunda fecha (YYYY-MM-DD): \"));\n\nif (fecha1 &lt; fecha2) {\n    console.log(\"La primera fecha es anterior.\");\n} else if (fecha1 &gt; fecha2) {\n    console.log(\"La segunda fecha es anterior.\");\n} else {\n    console.log(\"Ambas fechas son iguales.\");\n}\n</code></pre> <p>Ejercicio 3: Calcular d\u00edas entre dos fechas</p> <ul> <li>Solicita al usuario dos fechas en formato <code>YYYY-MM-DD</code>.</li> <li>Calcula la diferencia en d\u00edas entre ambas fechas.</li> </ul> Soluci\u00f3n del ejercicio D\u00edas entre fechas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fecha1 = new Date(prompt(\"Introduce la primera fecha (YYYY-MM-DD): \"));\nlet fecha2 = new Date(prompt(\"Introduce la segunda fecha (YYYY-MM-DD): \"));\n\nlet diferencia = Math.abs(fecha2 - fecha1); // Diferencia en milisegundos\nlet dias = diferencia / (1000 * 60 * 60 * 24); // Convertir a d\u00edas\n\nconsole.log(\"Diferencia en d\u00edas:\", dias);\n</code></pre> <p>Ejercicio 4: Crear fecha a partir de valores</p> <ul> <li>Solicita al usuario que introduzca el a\u00f1o, mes y d\u00eda por separado.</li> <li>Crea un objeto <code>Date</code> con esos valores y muestra la fecha en formato local.</li> </ul> Soluci\u00f3n del ejercicio Crear fecha a partir de valores<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet anio = parseInt(prompt(\"Introduce el a\u00f1o: \"));\nlet mes = parseInt(prompt(\"Introduce el mes (1-12): \")) - 1; // Restar 1 porque es 0-indexado\nlet dia = parseInt(prompt(\"Introduce el d\u00eda: \"));\n\nlet fecha = new Date(anio, mes, dia);\nconsole.log(\"Fecha creada:\", fecha.toLocaleDateString());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_16/","title":"Unidad 1: Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_16/#16-ejercicios","title":"1.6 Ejercicios","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_16/#tenis","title":"Tenis","text":"<p>Ejercicio 1: Marcador de tenis simplificado</p> <ul> <li>Dise\u00f1a un programa que permita llevar el marcador de un partido de tenis:<ul> <li>Solicita los nombres de los jugadores.</li> <li>Permite ingresar qui\u00e9n gana cada punto y actualiza el marcador.</li> <li>Llega a \"deuce\" cuando ambos tienen 40 puntos.</li> <li>Lleva el conteo de juegos ganados, y cuando un jugador llega a 6 juegos, suma un set.</li> <li>Finaliza cuando un jugador gana 2 sets.</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad01_16/#fechas-de-pago","title":"Fechas de pago","text":"<p>Ejercicio 2: Fechas de pago</p> <ul> <li>Escribe un programa que reciba:<ul> <li>Un importe.</li> <li>Una fecha de factura en formato <code>YYYY-MM-DD</code>.</li> <li>Una opci\u00f3n para calcular fechas de pago: a 30 d\u00edas, a 30 y 60 d\u00edas, o a 30, 60 y 90 d\u00edas.</li> </ul> </li> <li>Muestra las fechas de pago correspondientes.</li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad01_16/#codificaciondecodificacion","title":"codificaci\u00f3n/decodificaci\u00f3n","text":"<p>Ejercicio 3: Codificaci\u00f3n de cadenas</p> <ul> <li>Dise\u00f1a un programa que permita codificar y decodificar cadenas de texto.<ul> <li>Solicita una cadena de texto </li> <li>Codifica y decodifica la cadena seg\u00fan la cadena de codificaci\u00f3n.</li> <li>La cadena de codificaci\u00f3n ser\u00e1: <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</code> por <code>DEFGHIJKLMNOPQRSTUVWXYZABCdefghijklmnopqrstuvwxyzabc</code>.</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad02_21/","title":"Unidad 3: Arrays, Objetos y Clases","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_21/#31-arrays-en-javascript","title":"3.1 Arrays en JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_21/#creacion-de-un-array","title":"Creaci\u00f3n de un Array","text":"<p>Un array en JavaScript es una colecci\u00f3n ordenada de elementos. Se puede crear de diferentes maneras:</p> <p>Ejemplo de creaci\u00f3n de un array</p> Definici\u00f3n de un array<pre><code>let elementos = []; // Array vac\u00edo\nlet frutas = [\"Manzana\", \"Banana\", \"Cereza\"]; // Array con elementos string\nlet numeros = [1, 2, 3, 4, 5]; // Array con elementos num\u00e9ricos\nlet mixto = [\"Hola\", 42, true, null]; // Array con elementos de diferentes tipos (mixto)\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#uso-de-indices","title":"Uso de \u00cdndices","text":"<p>Los elementos de un array est\u00e1n numerados, comenzando desde el \u00edndice <code>0</code>.</p> <p>Acceder a elementos mediante \u00edndice</p> Acceso a elementos del array<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nconsole.log(frutas[0]); // Manzana\nconsole.log(frutas[1]); // Banana\nconsole.log(frutas[2]); // Cereza\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#cambiar-un-valor-mediante-el-indice","title":"Cambiar un Valor mediante el \u00edndice","text":"<p>Podemos modificar los valores de un array asignando nuevos valores a sus \u00edndices:</p> <p>Modificar elementos en un array</p> Modificaci\u00f3n de elementos<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nfrutas[1] = \"Naranja\";\nconsole.log(frutas); // [\"Manzana\", \"Naranja\", \"Cereza\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#borrado-de-elementos-undefined","title":"Borrado de Elementos (<code>undefined</code>)","text":"<p>Si eliminamos un elemento sin reorganizar el array, su posici\u00f3n quedar\u00e1 vac\u00eda con un valor <code>undefined</code>.</p> <p>Eliminar un elemento y su problema</p> Eliminaci\u00f3n de elementos con delete<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\ndelete frutas[1];\nconsole.log(frutas); // [\"Manzana\", undefined, \"Cereza\"]\n</code></pre> <p>Este problema se soluciona utilizando m\u00e9todos espec\u00edficos para eliminar elementos, que veremos m\u00e1s adelante.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#propiedades-de-los-arrays","title":"Propiedades de los Arrays","text":"<p>La propiedad m\u00e1s importante de un array es <code>length</code>, que nos indica cu\u00e1ntos elementos tiene el array.</p> <p>Ejemplo de <code>length</code></p> Propiedad length<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nconsole.log(frutas.length); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#recorrer-un-array-con-for","title":"Recorrer un array con <code>for</code>","text":"<p>Podemos usar <code>length</code> para recorrer un array completamente con un bucle <code>for</code>.</p> <p>Ejemplo de recorrido con <code>for</code></p> <p>Recorrido con for<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nfor (let i = 0; i &lt; frutas.length; i++) {\n    console.log(frutas[i]);\n}\n</code></pre> <pre><code>Manzana\nBanana\nCereza\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#buscar-un-elemento-con-while-y-una-variable-bandera","title":"Buscar un elemento con <code>while</code> y una variable bandera","text":"<p>Una variable bandera es una variable booleana (<code>true</code> o <code>false</code>) que utilizamos para indicar si una condici\u00f3n se ha cumplido dentro de un bucle. Se usa com\u00fanmente cuando buscamos un valor en un array o cuando queremos detener un proceso una vez que se ha encontrado un resultado.</p> <p>En este caso, utilizamos la variable <code>encontrado</code> como bandera para saber si hemos encontrado el elemento dentro del array.</p> <p>Ejemplo de b\u00fasqueda con <code>while</code></p> <p>B\u00fasqueda con while y variable bandera<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\", \"Naranja\"];\nlet buscar = \"Cereza\";\nlet encontrado = false;\nlet i = 0;\n\nwhile (i &lt; frutas.length &amp;&amp; !encontrado) {\n    if (frutas[i] === buscar) {\n        encontrado = true;\n        console.log(`Elemento encontrado en la posici\u00f3n ${i}`);\n    }\n    i++;\n}\n\nif (!encontrado) {\n    console.log(\"Elemento no encontrado\");\n}\n</code></pre> <pre><code>Elemento encontrado en la posici\u00f3n 2\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodos-de-los-arrays","title":"M\u00e9todos de los Arrays","text":"<p>JavaScript proporciona varios m\u00e9todos para manipular arrays. A continuaci\u00f3n, explicamos cada uno junto con sus par\u00e1metros y el valor que devuelven.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#push-agregar-al-final","title":"<code>push()</code> - Agregar al final","text":"<p>Agrega uno o m\u00e1s elementos al final del array y devuelve la nueva longitud del array.</p> <p>Ejemplo de <code>push()</code></p> Ejemplo de push()<pre><code>let frutas = [\"Manzana\", \"Banana\"];\nlet nuevaLongitud = frutas.push(\"Cereza\");\nconsole.log(frutas); // [\"Manzana\", \"Banana\", \"Cereza\"]\nconsole.log(nuevaLongitud); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#pop-eliminar-el-ultimo-elemento","title":"<code>pop()</code> - Eliminar el \u00faltimo elemento","text":"<p>Elimina el \u00faltimo elemento del array y devuelve el elemento eliminado.</p> <p>Ejemplo de <code>pop()</code></p> Ejemplo de pop()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nlet eliminado = frutas.pop();\nconsole.log(frutas); // [\"Manzana\", \"Banana\"]\nconsole.log(eliminado); // \"Cereza\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#shift-eliminar-el-primer-elemento","title":"<code>shift()</code> - Eliminar el primer elemento","text":"<p>Elimina el primer elemento del array y devuelve el elemento eliminado.</p> <p>Ejemplo de <code>shift()</code></p> Ejemplo de shift()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nlet eliminado = frutas.shift();\nconsole.log(frutas); // [\"Banana\", \"Cereza\"]\nconsole.log(eliminado); // \"Manzana\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#unshift-agregar-al-inicio","title":"<code>unshift()</code> - Agregar al inicio","text":"<p>Agrega uno o m\u00e1s elementos al inicio del array y devuelve la nueva longitud del array.</p> <p>Ejemplo de <code>unshift()</code></p> Ejemplo de unshift()<pre><code>let frutas = [\"Banana\", \"Cereza\"];\nlet nuevaLongitud = frutas.unshift(\"Manzana\");\nconsole.log(frutas); // [\"Manzana\", \"Banana\", \"Cereza\"]\nconsole.log(nuevaLongitud); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#splice-agregar-o-eliminar-elementos","title":"<code>splice()</code> - Agregar o eliminar elementos","text":"<p>Permite agregar, eliminar o reemplazar elementos en una posici\u00f3n espec\u00edfica.</p> <p>Par\u00e1metros: 1. \u00cdndice de inicio: Posici\u00f3n donde se comenzar\u00e1 la modificaci\u00f3n. 2. N\u00famero de elementos a eliminar: Define cu\u00e1ntos elementos se eliminan desde el \u00edndice indicado. 3. Elementos a agregar (opcional): Elementos que se agregar\u00e1n en la posici\u00f3n indicada.</p> <p>Ejemplo de <code>splice()</code></p> Ejemplo de splice()<pre><code>let colores = [\"Rojo\", \"Verde\", \"Azul\"];\n\n// Elimina 1 elemento desde la posici\u00f3n 1 (elimina \"Verde\")\ncolores.splice(1, 1);\nconsole.log(colores); // [\"Rojo\", \"Azul\"]\n\n// Agrega dos elementos en la posici\u00f3n 1 sin eliminar ninguno\ncolores.splice(1, 0, \"Amarillo\", \"Violeta\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Violeta\", \"Azul\"]\n\n// Reemplaza un elemento en la posici\u00f3n 2\ncolores.splice(2, 1, \"Negro\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Negro\", \"Azul\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#isarray-verificar-si-es-un-array","title":"<code>isArray()</code> - Verificar si es un array","text":"<p>Devuelve <code>true</code> si el valor es un array, de lo contrario <code>false</code>.</p> <p>Ejemplo de <code>isArray()</code></p> Ejemplo de isArray()<pre><code>console.log(Array.isArray([1, 2, 3])); // true\nconsole.log(Array.isArray(\"Hola\")); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#sort-ordenar-un-array","title":"<code>sort()</code> - Ordenar un array","text":"<p>Ordena los elementos del array alfab\u00e9ticamente.</p> <p>Ejemplo de <code>sort()</code></p> Ejemplo de sort()<pre><code>let frutas = [\"Banana\", \"Manzana\", \"Cereza\"];\nfrutas.sort();\nconsole.log(frutas); // [\"Banana\", \"Cereza\", \"Manzana\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#reverse-invertir-el-orden-de-los-elementos","title":"<code>reverse()</code> - Invertir el orden de los elementos","text":"<p>Invierte el orden de los elementos en un array.</p> <p>Ejemplo de <code>reverse()</code></p> Ejemplo de reverse()<pre><code>let frutas = [\"Banana\", \"Manzana\", \"Cereza\"];\nfrutas.reverse();\nconsole.log(frutas); // [\"Manzana\", \"Cereza\", \"Banana\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#join-convertir-un-array-en-una-cadena","title":"<code>join()</code> - Convertir un array en una cadena","text":"<p>Une los elementos del array en una cadena de texto con un separador especificado.</p> <p>Ejemplo de <code>join()</code></p> Ejemplo de join()<pre><code>console.log(frutas.join(\", \")); // \"Manzana, Cereza, Banana\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#concat-unir-arrays","title":"<code>concat()</code> - Unir arrays","text":"<p>Concatena uno o m\u00e1s arrays y devuelve un nuevo array.</p> <p>Ejemplo de <code>concat()</code></p> Ejemplo de concat()<pre><code>let numeros1 = [1, 2, 3];\nlet numeros2 = [4, 5, 6];\nlet resultado = numeros1.concat(numeros2);\nconsole.log(resultado); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#indexof-encontrar-la-posicion-de-un-elemento","title":"<code>indexOf()</code> - Encontrar la posici\u00f3n de un elemento","text":"<p>Devuelve el primer \u00edndice donde se encuentra el elemento en el array, o <code>-1</code> si no existe.</p> <p>Ejemplo de <code>indexOf()</code></p> Ejemplo de indexOf()<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.indexOf(20)); // 1\nconsole.log(numeros.indexOf(100)); // -1\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#lastindexof-encontrar-la-ultima-aparicion-de-un-elemento","title":"<code>lastIndexOf()</code> - Encontrar la \u00faltima aparici\u00f3n de un elemento","text":"<p>Devuelve el \u00faltimo \u00edndice donde se encuentra el elemento en el array.</p> <p>Ejemplo de <code>lastIndexOf()</code></p> Ejemplo de lastIndexOf()<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.lastIndexOf(20)); // 4\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodos-avanzados-de-arrays","title":"M\u00e9todos Avanzados de Arrays","text":"<p>Estos m\u00e9todos permiten realizar operaciones m\u00e1s avanzadas sobre los arrays.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#some-verificar-si-algun-elemento-cumple-una-condicion","title":"<code>some()</code> - Verificar si alg\u00fan elemento cumple una condici\u00f3n","text":"<p>Devuelve <code>true</code> si al menos un elemento cumple la condici\u00f3n dada.</p> <p>Ejemplo de <code>some()</code></p> Ejemplo de some()<pre><code>let edades = [10, 20, 30, 40];\nlet hayMayoresDe18 = edades.some(edad =&gt; edad &gt; 18);\nconsole.log(hayMayoresDe18); // true\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#every-verificar-si-todos-los-elementos-cumplen-una-condicion","title":"<code>every()</code> - Verificar si todos los elementos cumplen una condici\u00f3n","text":"<p>Devuelve <code>true</code> si todos los elementos cumplen la condici\u00f3n dada.</p> <p>Ejemplo de <code>every()</code></p> Ejemplo de every()<pre><code>let edades = [10, 20, 30, 40];\nlet todosMayoresDe18 = edades.every(edad =&gt; edad &gt; 18);\nconsole.log(todosMayoresDe18); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#filter-filtrar-elementos-de-un-array","title":"<code>filter()</code> - Filtrar elementos de un array","text":"<p>Devuelve un nuevo array con los elementos que cumplen una condici\u00f3n.</p> <p>Ejemplo de <code>filter()</code></p> Ejemplo de filter()<pre><code>let edades = [10, 20, 30, 40];\nlet mayoresDe18 = edades.filter(edad =&gt; edad &gt; 18);\nconsole.log(mayoresDe18); // [20, 30, 40]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#foreach-recorrer-un-array-ejecutando-una-funcion","title":"<code>forEach()</code> - Recorrer un array ejecutando una funci\u00f3n","text":"<p>Ejecuta una funci\u00f3n sobre cada elemento del array.</p> <p>Ejemplo de <code>forEach()</code></p> Ejemplo de forEach()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nfrutas.forEach(fruta =&gt; console.log(fruta));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#map-transformar-elementos-de-un-array","title":"<code>map()</code> - Transformar elementos de un array","text":"<p>Devuelve un nuevo array con los elementos transformados por una funci\u00f3n.</p> <p>Ejemplo de <code>map()</code></p> Ejemplo de map()<pre><code>let edades = [10, 20, 30, 40];\nlet edadesDobladas = edades.map(edad =&gt; edad * 2);\nconsole.log(edadesDobladas); // [20, 40, 60, 80]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodo-reduce-en-arrays","title":"M\u00e9todo <code>reduce()</code> en Arrays","text":"<p>El m\u00e9todo <code>reduce()</code> permite recorrer un array y acumular un resultado a partir de los elementos. Se utiliza com\u00fanmente para sumar valores, calcular promedios o transformar datos de una colecci\u00f3n.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#sintaxis-de-reduce","title":"Sintaxis de <code>reduce()</code>","text":"<pre><code>array.reduce((acumulador, elementoActual) =&gt; {\n    // Operaci\u00f3n sobre cada elemento\n    return nuevoAcumulador;\n}, valorInicial);\n</code></pre> <ul> <li><code>acumulador</code>: Es el valor acumulado en cada iteraci\u00f3n.</li> <li><code>elementoActual</code>: Es el elemento actual del array en la iteraci\u00f3n.</li> <li><code>valorInicial</code> (opcional): Es el valor inicial del acumulador. Si no se proporciona, toma el primer elemento del array.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-basico-sumar-elementos-de-un-array","title":"Ejemplo b\u00e1sico: Sumar elementos de un array","text":"<p>Ejemplo de uso de <code>reduce()</code></p> Suma de elementos con reduce()<pre><code>let numeros = [10, 20, 30, 40];\nlet suma = numeros.reduce((acumulador, num) =&gt; acumulador + num, 0);\nconsole.log(\"Suma total:\", suma); // 100\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-contar-elementos-con-una-condicion","title":"Ejemplo: Contar elementos con una condici\u00f3n","text":"<p>Ejemplo de contar elementos con <code>reduce()</code></p> Contar elementos con reduce()<pre><code>let respuestas = [5, 3, 4, 2, 5, 1, 4, 3, 5, 2];\n\nlet insatisfechos = respuestas.reduce((contador, respuesta) =&gt; {\n    return respuesta &lt;= 3 ? contador + 1 : contador;\n}, 0);\n\nconsole.log(\"N\u00famero de clientes insatisfechos:\", insatisfechos);\n</code></pre> <p><code>reduce()</code> es una herramienta poderosa cuando se necesita transformar un array en un \u00fanico valor acumulado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#foreach-vs-for-vs-forof-en-arrays","title":"forEach vs for vs for...of en Arrays","text":"<p>Existen varias formas de recorrer un array en JavaScript, cada una con sus ventajas y desventajas:</p> <ul> <li><code>forEach()</code>: Es m\u00e1s limpio y legible cuando solo necesitamos aplicar una funci\u00f3n a cada elemento.</li> <li>El bucle <code>for</code>: Ofrece m\u00e1s flexibilidad, ya que permite controlar el \u00edndice y usar <code>break</code> o <code>continue</code>.</li> <li>El bucle <code>for...of</code>: Es una sintaxis m\u00e1s moderna para iterar sobre los valores de un array sin necesidad de acceder a los \u00edndices.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-comparativo-foreach-vs-for-vs-forof","title":"Ejemplo Comparativo: <code>forEach</code> vs <code>for</code> vs <code>for...of</code>","text":"Comparaci\u00f3n de <code>forEach()</code>, <code>for</code> y <code>for...of</code> Comparaci\u00f3n de forEach(), for y for...of<pre><code>let numeros = [10, 20, 30, 40, 50];\n\nconsole.log(\"Recorriendo con forEach:\");\nnumeros.forEach(num =&gt; console.log(num));\n\nconsole.log(\"Recorriendo con for:\");\nfor (let i = 0; i &lt; numeros.length; i++) {\n    console.log(numeros[i]);\n}\n\nconsole.log(\"Recorriendo con for...of:\");\nfor (let numero of numeros) {\n    console.log(numero);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#cuando-usar-foreach-for-o-forof","title":"\u00bfCu\u00e1ndo usar <code>forEach()</code>, <code>for</code> o <code>for...of</code>?","text":"M\u00e9todo Cu\u00e1ndo Usarlo <code>forEach()</code> Cuando solo queremos ejecutar una acci\u00f3n sobre cada elemento sin modificar el array ni necesitar el \u00edndice. <code>for</code> Cuando necesitamos acceder a los \u00edndices, modificar el array o salir del bucle con <code>break</code>. <code>for...of</code> Cuando queremos recorrer directamente los valores del array sin preocuparnos por los \u00edndices. <p>El <code>forEach()</code> es conveniente para realizar tareas simples sobre cada elemento, <code>for</code> nos da m\u00e1s control sobre la iteraci\u00f3n, y <code>for...of</code> es una alternativa moderna y clara para recorrer los valores del array directamente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#arrays-multidimensionales","title":"Arrays Multidimensionales","text":"<p>Un array puede contener otros arrays dentro de s\u00ed, formando una estructura de datos multidimensional.</p> <p>Ejemplo de array multidimensional</p> Array de arrays<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(matriz[1][2]); // 6\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#recorrer-un-array-multidimensional-con-for-anidado","title":"Recorrer un array multidimensional con <code>for</code> anidado","text":"<p>Ejemplo de recorrido con <code>for</code> anidado</p> Recorrer array multidimensional<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor (let i = 0; i &lt; matriz.length; i++) {\n    for (let j = 0; j &lt; matriz[i].length; j++) {\n        console.log(`Elemento [${i}][${j}] = ${matriz[i][j]}`);\n    }\n}\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo anterior para que muestre el array completo en forma de matriz.</li> </ol> </li> <li> <ol> <li>Modifica el array completo para que muestre la diagonal principal de la matriz. (la diagonal principal son los elementos donde <code>i</code> y <code>j</code> son iguales).</li> </ol> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#multiplicacion-de-dos-matrices","title":"Multiplicaci\u00f3n de dos matrices","text":"<p>En este ejemplo, multiplicamos dos matrices <code>A</code> y <code>B</code> para obtener un resultado <code>C</code>. Para multiplicar dos matrices, el n\u00famero de columnas de la primera matriz debe ser igual al n\u00famero de filas de la segunda matriz. Podemos encontrar m\u00e1s informaci\u00f3n sobre multiplicaci\u00f3n de matrices aqu\u00ed </p> <p>Ejemplo de multiplicaci\u00f3n de matrices</p> Multiplicaci\u00f3n de matrices<pre><code>let A = [\n    [1, 2],\n    [3, 4]\n];\n\nLet B = [\n    [5, 6],\n    [7, 8]\n];\n\nLet resultado =[];\n\nfor (let i = 0; i &lt; A.length; i++) {\n    resultado[i] = [];\n    for (let j = 0; j &lt; B[0].length; j++) {\n        let suma = 0;\n        for (let k = 0; k &lt; A[0].length; k++) {\n            suma += A[i][k] * B[k][j];\n        }\n        resultado[i][j] = suma;\n    }\n}\n\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejercicios-sobre-arrays-en-javascript","title":"Ejercicios sobre Arrays en JavaScript","text":"<p>A continuaci\u00f3n, se presentan una serie de ejercicios que ponen en pr\u00e1ctica los conceptos aprendidos en este tema.</p> <p>Ejercicio 1: Crear un array y mostrar su contenido</p> <ul> <li>Crea un array con cinco nombres y muestra su contenido utilizando <code>for</code>.</li> </ul> Soluci\u00f3n Mostrar contenido de un array<pre><code>let nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nfor (let i = 0; i &lt; nombres.length; i++) {\n    console.log(nombres[i]);\n}\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo anterior para que muestre los nombres en orden inverso.</li> </ol> </li> <li> <ol> <li>Modifica el c\u00f3digo para que muestre solo los nombres que empiecen con la letra \"A\".</li> </ol> </li> <li> <ol> <li>Utiliza forEach para mostrar los nombres en lugar de un bucle <code>for</code>.</li> </ol> </li> </ul> <p>Ejercicio 2: Buscar un elemento en un array</p> <ul> <li>Pide al usuario un nombre y verifica si existe en un array de nombres utilizando <code>indexOf()</code>.</li> </ul> Soluci\u00f3n B\u00fasqueda en un array<pre><code>const prompt = require(\"prompt-sync\")();\nlet nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nlet nombreBuscado = prompt(\"Introduce un nombre: \");\n\nlet posicion = nombres.indexOf(nombreBuscado);\nif (posicion !== -1) {\n    console.log(`El nombre est\u00e1 en la posici\u00f3n ${posicion}`);\n} else {\n    console.log(\"Nombre no encontrado\");\n}\n</code></pre> <p>Ejercicio 3: Uso de <code>push()</code> y <code>pop()</code></p> <ul> <li>Crea un array vac\u00edo.</li> <li>Usa <code>push()</code> para agregar tres elementos.</li> <li>Usa <code>pop()</code> para eliminar el \u00faltimo elemento y mostrar el resultado.</li> </ul> Soluci\u00f3n Agregar y eliminar con push y pop<pre><code>let numeros = [];\nnumeros.push(10, 20, 30);\nconsole.log(numeros);\n\nnumeros.pop();\nconsole.log(numeros);\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para pedir al usuario los elementos a agregar hasta que ponga un 0.</li> </ol> </li> </ul> <p>Ejercicio 4: Filtrar elementos con <code>filter()</code></p> <ul> <li>Crea un array de n\u00fameros.</li> <li>Usa <code>filter()</code> para obtener solo los n\u00fameros mayores de 50.</li> </ul> Soluci\u00f3n Uso de filter()<pre><code>let numeros = [10, 55, 60, 32, 70];\nlet mayoresDe50 = numeros.filter(num =&gt; num &gt; 50);\nconsole.log(mayoresDe50); // [55, 60, 70]\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para que el usuario introduza un m\u00ednimo y m\u00e1ximo para filtrar.</li> </ol> </li> </ul> <p>Ejercicio 5: Transformar elementos con <code>map()</code></p> <ul> <li>Dado un array de precios en euros, convi\u00e9rtelos a d\u00f3lares (suponiendo que 1\u20ac = 1.1$).</li> </ul> Soluci\u00f3n Uso de map()<pre><code>let preciosEuros = [10, 20, 30];\nlet preciosDolares = preciosEuros.map(precio =&gt; precio * 1.1);\nconsole.log(preciosDolares);\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica con un array de cambios (dolares, yenes y libras) con el valor de cada uno respecto al euro. Pide al usuario a qu\u00e9 moneda quiere cambiar los precios. Y muestra los precios en la moneda seleccionada.</li> </ol> </li> </ul> <p>Ejercicio 6: Recorriendo un array con <code>forEach()</code></p> <ul> <li>Dado un array de nombres, usa <code>forEach()</code> para mostrarlos en la consola.</li> </ul> Soluci\u00f3n Uso de forEach()<pre><code>let nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nnombres.forEach(nombre =&gt; console.log(nombre));\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para que muestre los nombres en may\u00fasculas.</li> </ol> </li> <li> <ol> <li>Modifica el c\u00f3digo para que muestre los nombres con su longitud.</li> </ol> </li> </ul> <p>Ejercicio 7: Uso de <code>splice()</code> para modificar un array</p> <ul> <li>Dado un array de colores, usa <code>splice()</code> para eliminar el segundo elemento y agregar un nuevo color en su lugar.</li> </ul> Soluci\u00f3n Uso de splice()<pre><code>let colores = [\"Rojo\", \"Verde\", \"Azul\"];\ncolores.splice(1, 1, \"Amarillo\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Azul\"]\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para que el usuario pueda elegir el color a elagregar y en qu\u00e9 posici\u00f3n lo quiere. Si el color est\u00e1 repetido, mostrar un mensaje de error.</li> </ol> </li> <li> <ol> <li>Modifica el c\u00f3digo para que el usuario pueda elegir el color a eliminar. Si el color no se encuntra dar un mensaje de error.</li> </ol> </li> </ul> <p>Ejercicio 8: Uso de <code>sort()</code> y <code>reverse()</code></p> <ul> <li>Dado un array de palabras, ord\u00e9nalas alfab\u00e9ticamente y luego en orden inverso.</li> </ul> Soluci\u00f3n Uso de sort() y reverse()<pre><code>let palabras = [\"manzana\", \"banana\", \"cereza\", \"durazno\"];\npalabras.sort();\nconsole.log(palabras);\n\npalabras.reverse();\nconsole.log(palabras);\n</code></pre> <p>Ejercicio 9: Matriz bidimensional</p> <ul> <li>Crea una matriz 3x3 e imprime todos sus elementos con un <code>for</code> anidado.</li> </ul> Soluci\u00f3n Recorrer matriz bidimensional<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor (let i = 0; i &lt; matriz.length; i++) {\n    for (let j = 0; j &lt; matriz[i].length; j++) {\n        console.log(`Elemento [${i}][${j}] = ${matriz[i][j]}`);\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#proyecto-final-eleccion-de-delegado","title":"Proyecto Final: Elecci\u00f3n de Delegado","text":"<p>En este proyecto, gestionaremos la elecci\u00f3n de delegado de clase. Contamos con 5 candidatos y 50 votos de alumnos. Nuestro objetivo es calcular el n\u00famero de votos obtenidos por cada candidato y mostrar el ranking en orden descendente.</p> <p>El inicio de nuestro programe debe ser: Elecci\u00f3n de delegado<pre><code>let candidatos = [\"Ana\", \"Luis\", \"Carlos\", \"Mar\u00eda\", \"Pedro\"];\nlet votos = [\n    1, 2, 3, 4, 5, 1, 1, 3, 4, 2,\n    5, 3, 2, 1, 4, 5, 3, 1, 2, 4,\n    3, 5, 2, 1, 3, 4, 5, 1, 2, 3,\n    1, 2, 3, 4, 5, 2, 1, 5, 3, 4,\n    5, 1, 2, 3, 4, 2, 5, 1, 3, 4\n];\n...\n...\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#solucion-con-bucles","title":"Soluci\u00f3n con Bucles","text":"<p>Usaremos bucles para contar los votos y ordenar los resultados.</p> Soluci\u00f3n con Bucles Elecci\u00f3n de delegado con bucles<pre><code>let candidatos = [\"Ana\", \"Luis\", \"Carlos\", \"Mar\u00eda\", \"Pedro\"];\nlet votos = [\n    1, 2, 3, 4, 5, 1, 1, 3, 4, 2,\n    5, 3, 2, 1, 4, 5, 3, 1, 2, 4,\n    3, 5, 2, 1, 3, 4, 5, 1, 2, 3,\n    1, 2, 3, 4, 5, 2, 1, 5, 3, 4,\n    5, 1, 2, 3, 4, 2, 5, 1, 3, 4\n];\n\nlet conteo = [0, 0, 0, 0, 0];\n\nfor (let i = 0; i &lt; votos.length; i++) {\n    let indice = votos[i] - 1;\n    conteo[indice]++;\n}\n\nlet resultados = [];\nfor (let i = 0; i &lt; candidatos.length; i++) {\n    resultados.push({ nombre: candidatos[i], votos: conteo[i] });\n}\n\nresultados.sort((a, b) =&gt; b.votos - a.votos);\nconsole.log(\"Resultados de la elecci\u00f3n:\", resultados);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#solucion-con-metodos-de-arrays","title":"Soluci\u00f3n con M\u00e9todos de Arrays","text":"<p>Ahora usaremos m\u00e9todos como <code>reduce()</code>, <code>map()</code> y <code>sort()</code> para simplificar el c\u00f3digo.</p> Soluci\u00f3n con M\u00e9todos de Arrays Elecci\u00f3n de delegado con m\u00e9todos de arrays<pre><code>let conteoVotos = votos.reduce((acc, voto) =&gt; {\n    acc[voto - 1]++;\n    return acc;\n}, [0, 0, 0, 0, 0]);\n\nlet resultadosFinales = candidatos.map((nombre, i) =&gt; ({ nombre, votos: conteoVotos[i] }))\n                                 .sort((a, b) =&gt; b.votos - a.votos);\n\nconsole.log(\"Resultados de la elecci\u00f3n:\", resultadosFinales);\n</code></pre> <p>Esta segunda soluci\u00f3n es m\u00e1s concisa y aprovecha mejor las funciones avanzadas de los arrays.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/","title":"Unidad 3: Arrays, Objetos y Clases","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_22/#22-objetos-y-su-uso","title":"2.2 Objetos y su uso","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_22/#introduccion-a-los-objetos-en-javascript","title":"Introducci\u00f3n a los Objetos en JavaScript","text":"<p>Los objetos en JavaScript son estructuras de datos que permiten agrupar informaci\u00f3n en un mismo lugar. Son clave en el desarrollo de aplicaciones ya que representan entidades del mundo real, como por ejemplo: usuarios, productos o empleados. </p> <p>A diferencia de los arrays, que almacenan valores en una lista indexada, los objetos almacenan datos en pares clave-valor, lo que permite un acceso m\u00e1s intuitivo a la informaci\u00f3n.</p> <p>Algunas de las ventajas de los objetos son:</p> <ul> <li>Permiten organizar datos de forma estructurada.</li> <li>Facilitan la manipulaci\u00f3n y consulta de informaci\u00f3n.</li> <li>Son fundamentales para la programaci\u00f3n orientada a objetos en JavaScript.</li> <li>Se utilizan en APIs, almacenamiento en JSON y modelado de datos, etc.</li> </ul> <p>En esta secci\u00f3n, trabajaremos con un objeto <code>empleado</code>, al que iremos a\u00f1adiendo nuevas caracter\u00edsticas en cada secci\u00f3n para entender mejor su utilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#declarando-objetos","title":"Declarando Objetos","text":"<p>Existen varias maneras de declarar un objeto en JavaScript:</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#1-declaracion-con-llaves-objeto-literal","title":"1\ufe0f Declaraci\u00f3n con llaves <code>{}</code> (Objeto Literal)","text":"<p>La manera m\u00e1s intuitiva de declarar un objeto es mediante la notaci\u00f3n de llaves <code>{}</code>. Es la primera opci\u00f3n a considerar para crear objetos simples.</p> <p>Ejemplo de Objeto Literal</p> Declaraci\u00f3n de un objeto<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#2-creacion-con-new-object","title":"2\ufe0f Creaci\u00f3n con <code>new Object()</code>","text":"<p>la palabra clave <code>new</code> se utiliza para crear un nuevo objeto. Se pueden crear tantos objetos como se necesiten.</p> <p>Ejemplo con <code>new Object()</code></p> Declaraci\u00f3n con new Object()<pre><code>let empleado = new Object();\nempleado.nombre = \"Carlos P\u00e9rez\";\nempleado.edad = 35;\nempleado.puesto = \"Desarrollador Web\";\n</code></pre> <p>Accediendo a Propiedades</p> <p>Podemos acceder a las propiedades de un objeto mediante la notaci\u00f3n de punto <code>.</code> o corchetes <code>[]</code>.</p> <p>Acceso a propiedades</p> Acceso a propiedades<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\nconsole.log(empleado.nombre); // Carlos P\u00e9rez\nconsole.log(empleado[\"edad\"]); // 35\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#3-agregar-propiedades-en-tiempo-de-ejecucion","title":"3\ufe0f Agregar Propiedades en Tiempo de Ejecuci\u00f3n","text":"<p>Podemos agregar propiedades despu\u00e9s de haber creado el objeto. Para ello bastar\u00e1 con asignar un nuevo valor a una propiedad que no exista.</p> <p>Agregar propiedades din\u00e1micamente</p> Agregar nuevas propiedades<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\nempleado.salario = 3000;\nconsole.log(empleado.salario); // 3000\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#metodos-en-objetos","title":"M\u00e9todos en Objetos","text":"<p>Los m\u00e9todos son funciones dentro de un objeto que permiten realizar acciones sobre \u00e9l.</p> <p>Declaraci\u00f3n y uso de m\u00e9todos</p> M\u00e9todo en un objeto<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\",\n    saludar: function() {\n        console.log(\"Hola, mi nombre es \" + this.nombre);\n    }\n};\n\nempleado.saludar(); // Hola, mi nombre es Carlos P\u00e9rez\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#la-palabra-clave-this","title":"La Palabra Clave <code>this</code>","text":"<p>El uso de <code>this</code> en JavaScript hace referencia al objeto actual, lo que nos permite acceder a sus propiedades dentro de un m\u00e9todo.</p> <p>Uso de <code>this</code> en m\u00e9todos</p> Ejemplo de this en objetos<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\",\n    mostrarInfo: function() {\n        console.log(`${this.nombre}, ${this.puesto}, ${this.edad} a\u00f1os`);\n    }\n};\n\nempleado.mostrarInfo(); // Carlos P\u00e9rez, Desarrollador Web, 35 a\u00f1os\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#constructores-de-objetos","title":"Constructores de Objetos","text":"<p>Los constructores permiten crear m\u00faltiples objetos con la misma estructura de forma eficiente. De esta manera los objetos comparten la misma estructura y m\u00e9todos. Ahorrando tiempo y c\u00f3digo. </p> <p>Primero veamos un ejemplo con un constructor sin par\u00e1metros.</p> <p>Declaraci\u00f3n de un objeto con constructor sin inicialzaci\u00f3n de propiedades</p> Uso de constructores<pre><code>function Empleado() {\n    this.nombre = \"Carlos P\u00e9rez\";\n    this.edad = 35;\n    this.puesto = \"Desarrollador\";\n}\n\nlet emp1 = new Empleado();\nlet emp2 = new Empleado();\n\nconsole.log(emp1.nombre); // Carlos P\u00e9rez\nconsole.log(emp2.nombre); // Carlos P\u00e9rez\n</code></pre> <p>Este m\u00e9todo es \u00fatil para crear objetos con la misma estructura, pero si queremos personalizar los valores de las propiedades, podemos pasar par\u00e1metros al constructor.</p> <p>Declaraci\u00f3n de un constructor</p> Uso de constructores<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n    this.mostrarNombre = function() {\n        console.log(`Mi nombre es ${this.nombre}`);\n    }\n}\n// Otra manera de declarar el objeto\nfunction Articulo(nombre, precio) {\n    let obj = {\n        nombre: nombre,\n        precio: precio\n        mostrarPrecio: function() {\n            console.log(`El precio de ${this.nombre} es ${this.precio}`);\n        }\n    }\n    return obj;\n}\n\nlet emp1 = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nlet emp2 = new Empleado(\"Laura G\u00f3mez\", 29, \"Dise\u00f1adora\");\nlet art1 = new Articulo(\"Camisa\", 20);\n\nconsole.log(emp1.nombre); // Carlos P\u00e9rez\nconsole.log(emp2.nombre); // Laura G\u00f3mez\nconsole.log(art1.nombre); // Camisa\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#el-operador-new","title":"El Operador <code>new</code>","text":"<p>El operador <code>new</code> se usa para crear instancias de un constructor. La diferencia con el objeto literal es que permite generar m\u00faltiples objetos con la misma estructura sin repetir c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#herencia-y-prototipos","title":"Herencia y Prototipos","text":"<p>En JS, cuando creamos m\u00faltimples objetos estos no comparten la misma estructura, por lo que si creamos centenares o miles de objetos estamos usando una cantidad de memoria innecesaria. Para solucionar esto, podemos usar prototipos. En los prototipos, los objetos comparten la misma estructura y m\u00e9todos, lo que ahorra memoria.</p> <p>En JavaScript, los objetos pueden heredar propiedades y m\u00e9todos de otros objetos usando prototipos.</p> <p>Ejemplo de herencia con prototipos</p> Herencia con prototipos<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n}\n\nEmpleado.prototype.saludar = function() {\n    console.log(\"Hola, soy \" + this.nombre);\n};\n\nlet emp1 = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nlet emp2 = new Empleado(\"Laura G\u00f3mez\", 29, \"Dise\u00f1adora\");\nLet emp3 = new Empleado(\"Juan P\u00e9rez\", 45, \"Gerente\");\nemp1.saludar(); // Hola, soy Carlos P\u00e9rez\n</code></pre> <p>En el ejemplo anterior los 3 objetos comparten la misma estructura y el m\u00e9todo <code>saludar</code>. Lo que ahorra memoria y c\u00f3digo.</p> <p>Ahora si tenemos 2 objetos que heredan de empleado como pueden ser director y gerente, podemos hacer lo siguiente:</p> <p>Ejemplo de herencia con prototipos</p> Herencia con prototipos<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n}\n\nEmpleado.prototype.saludar = function() {\n    console.log(\"Hola, soy \" + this.nombre);\n};\n\nfunction Director(nombre, edad, puesto, departamento) {\n    Empleado.call(this, nombre, edad, puesto);\n    this.departamento = departamento;\n}\n\nDirector.prototype = Object.create(Empleado.prototype);\nDirector.prototype.constructor = Director;\n\nlet dir1 = new Director(\"Ana L\u00f3pez\", 50, \"Directora\", \"Marketing\");\ndir1.saludar(); // Hola, soy Ana L\u00f3pez\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#ejercicios-sobre-objetos-en-javascript","title":"Ejercicios sobre Objetos en JavaScript","text":"<p>A continuaci\u00f3n, se presentan una serie de ejercicios que ponen en pr\u00e1ctica los conceptos aprendidos en este tema, sin utilizar <code>class</code>, solo con funciones constructoras y prototipos.</p> <p>Ejercicio 1: Crear un objeto <code>c\u00edrculo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>c\u00edrculo</code> con la propiedad <code>radio</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto C\u00edrculo<pre><code>function Circulo(radio) {\n    this.radio = radio;\n}\n\nCirculo.prototype.area = function() {\n    return Math.PI * this.radio ** 2;\n};\n\nCirculo.prototype.perimetro = function() {\n    return 2 * Math.PI * this.radio;\n};\n\nlet c = new Circulo(5);\nconsole.log(\"\u00c1rea:\", c.area());\nconsole.log(\"Per\u00edmetro:\", c.perimetro());\n</code></pre> <p>Ejercicio 2: Crear un objeto <code>rect\u00e1ngulo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>rect\u00e1ngulo</code> con propiedades <code>base</code> y <code>altura</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Rect\u00e1ngulo<pre><code>function Rectangulo(base, altura) {\n    this.base = base;\n    this.altura = altura;\n}\n\nRectangulo.prototype.area = function() {\n    return this.base * this.altura;\n};\n\nRectangulo.prototype.perimetro = function() {\n    return 2 * (this.base + this.altura);\n};\n\nlet r = new Rectangulo(10, 5);\nconsole.log(\"\u00c1rea:\", r.area());\nconsole.log(\"Per\u00edmetro:\", r.perimetro());\n</code></pre> <p>Ejercicio 3: Crear un objeto <code>tri\u00e1ngulo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>tri\u00e1ngulo</code> con propiedades <code>base</code>, <code>altura</code> y <code>lados</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Tri\u00e1ngulo<pre><code>function Triangulo(base, altura, lado1, lado2, lado3) {\n    this.base = base;\n    this.altura = altura;\n    this.lados = [lado1, lado2, lado3];\n}\n\nTriangulo.prototype.area = function() {\n    return (this.base * this.altura) / 2;\n};\n\nTriangulo.prototype.perimetro = function() {\n    return this.lados.reduce((a, b) =&gt; a + b, 0);\n};\n\nlet t = new Triangulo(6, 4, 3, 4, 5);\nconsole.log(\"\u00c1rea:\", t.area());\nconsole.log(\"Per\u00edmetro:\", t.perimetro());\n</code></pre> <p>Ejercicio 4: Crear un objeto <code>cuadrado</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>cuadrado</code> con la propiedad <code>lado</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Cuadrado<pre><code>function Cuadrado(lado) {\n    this.lado = lado;\n}\n\nCuadrado.prototype.area = function() {\n    return this.lado ** 2;\n};\n\nCuadrado.prototype.perimetro = function() {\n    return 4 * this.lado;\n};\n\nlet q = new Cuadrado(4);\nconsole.log(\"\u00c1rea:\", q.area());\nconsole.log(\"Per\u00edmetro:\", q.perimetro());\n</code></pre> <p>Ejercicio 5: Crear una superclase <code>Figura</code> y herencia para las dem\u00e1s figuras</p> <ul> <li>Crea una superclase <code>Figura</code> que tenga los m\u00e9todos <code>calcularArea()</code> y <code>calcularPerimetro()</code>.</li> <li>Haz que <code>C\u00edrculo</code>, <code>Rect\u00e1ngulo</code>, <code>Tri\u00e1ngulo</code> y <code>Cuadrado</code> hereden de <code>Figura</code>.</li> </ul> Soluci\u00f3n Herencia con Prototipos<pre><code>function Figura() {}\n\nFigura.prototype.calcularArea = function() {\n    throw \"Este m\u00e9todo debe ser implementado en la subclase\";\n};\n\nFigura.prototype.calcularPerimetro = function() {\n    throw \"Este m\u00e9todo debe ser implementado en la subclase\";\n};\n\nfunction Circulo(radio) {\n    this.radio = radio;\n}\nCirculo.prototype = Object.create(Figura.prototype);\nCirculo.prototype.calcularArea = function() {\n    return Math.PI * this.radio ** 2;\n};\nCirculo.prototype.calcularPerimetro = function() {\n    return 2 * Math.PI * this.radio;\n};\n\nlet c = new Circulo(5);\nconsole.log(\"\u00c1rea:\", c.calcularArea());\nconsole.log(\"Per\u00edmetro:\", c.calcularPerimetro());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#clases-en-javascript","title":"Clases en JavaScript","text":"<p>Desde ES6, JavaScript permite definir objetos mediante <code>class</code>. La </p> Declaraci\u00f3n de una clase Definici\u00f3n de una clase<pre><code>class Empleado {\n    constructor(nombre, edad, puesto) {\n        this.nombre = nombre;\n        this.edad = edad;\n        this.puesto = puesto;\n    }\n}\n\nlet emp1 = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nconsole.log(emp1.nombre); // Carlos P\u00e9rez\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#cuando-usar-class-o-prototipos","title":"\u00bfCu\u00e1ndo Usar <code>class</code> o Prototipos?","text":"<ul> <li><code>class</code> es m\u00e1s intuitivo y f\u00e1cil de leer.</li> <li>Los prototipos permiten m\u00e1s flexibilidad en algunos casos avanzados.</li> </ul> <p>En general, <code>class</code> es recomendado para la mayor\u00eda de proyectos modernos, ya que es m\u00e1s claro y se asemeja a la sintaxis de otros lenguajes orientados a objetos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/","title":"Unidad 2: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_31/#21-funciones-en-javascript","title":"2.1 Funciones en JavaScript","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables que permiten organizar y estructurar mejor nuestros programas. Nos ayudan a reducir la repetici\u00f3n de c\u00f3digo y mejorar la legibilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#como-se-ejecutan-las-funciones-en-un-programa","title":"\u00bfC\u00f3mo se ejecutan las funciones en un programa?","text":"<p>Cuando declaramos una funci\u00f3n en JavaScript, esta no se ejecuta inmediatamente, sino que se almacena en memoria y solo se ejecuta cuando es llamada en el c\u00f3digo. Esto nos permite definir funciones al inicio de un programa y utilizarlas en cualquier momento posterior.</p> Ejemplo de declaraci\u00f3n y llamada de funci\u00f3n Ejemplo b\u00e1sico de funci\u00f3n<pre><code>function mensaje() {\n    console.log(\"Este mensaje se muestra solo cuando se llama a la funci\u00f3n.\");\n}\n\n// Llamamos a la funci\u00f3n\nmensaje();\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#211-declaracion-y-uso-de-funciones","title":"2.1.1 Declaraci\u00f3n y Uso de Funciones","text":"<p>Las funciones en JavaScript se pueden declarar utilizando la palabra clave <code>function</code>. Estas permiten organizar el c\u00f3digo en bloques reutilizables.</p> <p>Ejemplo de funci\u00f3n simple</p> Funci\u00f3n que muestra un mensaje<pre><code>function saludar() {\n    console.log(\"Hola, bienvenido a JavaScript!\");\n}\n\nsaludar(); // Llamada a la funci\u00f3n\n</code></pre> <p>Las funciones pueden aceptar par\u00e1metros para hacerlas m\u00e1s din\u00e1micas:</p> <p>Ejemplo con par\u00e1metros</p> Funci\u00f3n con par\u00e1metros<pre><code>function saludar(nombre) {\n    console.log(\"Hola, \" + nombre + \"!\");\n}\n\nsaludar(\"Carlos\"); // Salida: Hola, Carlos!\nsaludar(\"Mar\u00eda\"); // Salida: Hola, Mar\u00eda!\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#212-parametros-y-valores-de-retorno","title":"2.1.2 Par\u00e1metros y Valores de Retorno","text":"<p>Las funciones pueden devolver valores utilizando la palabra clave <code>return</code>. Esto permite que el resultado de una funci\u00f3n pueda ser utilizado posteriormente en el programa.</p> <p>Ejemplo con valor de retorno</p> Funci\u00f3n que retorna un valor<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\nlet resultado = sumar(5, 3);\nconsole.log(\"La suma es:\", resultado);\n</code></pre> <p>Si una funci\u00f3n no tiene <code>return</code>, devuelve <code>undefined</code> de forma impl\u00edcita.</p> <p>Ejemplo de funci\u00f3n sin retorno</p> Funci\u00f3n sin return<pre><code>function mostrarMensaje() {\n    console.log(\"Este es un mensaje de prueba\");\n}\n\nlet mensaje = mostrarMensaje();\nconsole.log(mensaje); // undefined\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#213-funciones-anonimas","title":"2.1.3 Funciones An\u00f3nimas","text":"<p>Las funciones an\u00f3nimas son aquellas que no tienen un nombre definido. Se suelen asignar a variables:</p> <p>Ejemplo de funci\u00f3n an\u00f3nima</p> Funci\u00f3n an\u00f3nima asignada a una variable<pre><code>let multiplicar = function(a, b) {\n    return a * b;\n};\n\nconsole.log(multiplicar(4, 5)); // Salida: 20\n</code></pre> <p>Las funciones an\u00f3nimas son \u00fatiles para definir comportamientos que solo se usan en un contexto espec\u00edfico.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#214-funciones-como-expresiones","title":"2.1.4 Funciones como Expresiones","text":"<p>En JavaScript, las funciones pueden ser declaradas como expresiones y asignadas a variables.</p> <p>Ejemplo de funci\u00f3n como expresi\u00f3n</p> Funci\u00f3n como expresi\u00f3n<pre><code>let suma = function(a, b) {\n    return a + b;\n};\n\nconsole.log(suma(3, 4)); // Salida: 7\n</code></pre> <p>Las funciones expresadas se usan cuando queremos definir una funci\u00f3n y almacenarla en una variable para luego ejecutarla en un momento determinado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#215-paso-de-parametros-por-valor-y-por-referencia","title":"2.1.5 Paso de Par\u00e1metros por Valor y por Referencia","text":"<p>En JavaScript, los tipos primitivos (n\u00fameros, cadenas, booleanos) se pasan por valor, mientras que los objetos y arrays se pasan por referencia.</p> <p>Nota</p> <p>Pasar por valor significa que se crea una copia del valor original, mientras que pasar por referencia significa que se comparte la misma referencia en memoria. En los casos de los tipos primitivos, cualquier cambio dentro de la funci\u00f3n no afectar\u00e1 a la variable original. Por tanto el paso es por valor.</p> <p>Ejemplo de paso por valor</p> Paso por valor<pre><code>function cambiarValor(numero) {\n    numero = 100;\n    console.log(\"Dentro de la funci\u00f3n:\", numero);\n}\n\nlet x = 10;\ncambiarValor(x);\nconsole.log(\"Fuera de la funci\u00f3n:\", x); // x sigue siendo 10\n</code></pre> <p>Nota</p> <p>En el caso de los objetos y arrays, si modificamos el objeto dentro de la funci\u00f3n, los cambios se reflejar\u00e1n fuera de la funci\u00f3n. Por tanto en este caso se pasa siempre por referencia.</p> <p>Ejemplo de paso por referencia</p> Paso por referencia<pre><code>function modificarObjeto(objeto) {\n    objeto.nombre = \"Modificado\";\n}\n\nlet persona = { nombre: \"Original\" };\nmodificarObjeto(persona);\nconsole.log(\"Despu\u00e9s de la funci\u00f3n:\", persona.nombre); // \"Modificado\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#216-alcance-de-las-variables-local-y-global","title":"2.1.6 Alcance de las Variables: Local y Global","text":"<p>Las variables en JavaScript pueden tener \u00e1mbito global o \u00e1mbito local dependiendo de d\u00f3nde sean declaradas.</p> <ul> <li>Variables globales: Son accesibles desde cualquier parte del c\u00f3digo.</li> <li>Variables locales: Solo existen dentro de la funci\u00f3n donde fueron declaradas.</li> </ul> <p>Ejemplo de variables globales y locales</p> \u00c1mbito de variables<pre><code>let global = \"Soy global\";\n\nfunction mostrarAmbito() {\n    let local = \"Soy local\";\n    console.log(global); // Accede a la variable global\n    console.log(local);  // Accede a la variable local\n}\n\nmostrarAmbito();\nconsole.log(global); // Funciona\n// console.log(local); // Error: local no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#217-funciones-recursivas-introduccion","title":"2.1.7 Funciones recursivas (Introducci\u00f3n)","text":"<p>Una funci\u00f3n recursiva es aquella que se llama a s\u00ed misma dentro de su propio cuerpo. Es una t\u00e9cnica muy poderosa y \u00fatil en programaci\u00f3n, especialmente para resolver problemas que se pueden dividir en subproblemas m\u00e1s peque\u00f1os.</p> <p>Algunos ejemplos t\u00edpicos de resoluci\u00f3n de problemas mediante funciones recursivas son el c\u00e1lculo de factoriales, la serie de Fibonacci, la b\u00fasqueda de elementos en \u00e1rboles, entre otros.</p> <p>Vamos a ver como ejercicios pr\u00e1cticos algunos ejemplos de funciones recursivas.</p> <p>Ejemplo de funci\u00f3n recursiva: Factorial</p> Funci\u00f3n recursiva: Factorial<pre><code>function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconsole.log(factorial(5)); // 5! = 120\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#218-retorno-de-funciones","title":"2.1.8 Retorno de Funciones","text":"<p>Las funciones en JavaScript pueden devolver un valor mediante la palabra clave <code>return</code>. Esto permite que el resultado de una funci\u00f3n pueda ser utilizado posteriormente en el programa.</p> <p>Ejemplo de retorno en funciones</p> Uso del return en funciones<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\nlet resultado = sumar(5, 3);\nconsole.log(\"El resultado de la suma es:\", resultado);\n</code></pre> <p>Cuando una funci\u00f3n no tiene <code>return</code>, devuelve <code>undefined</code> de forma impl\u00edcita.</p> <p>Ejemplo de funci\u00f3n sin retorno</p> Funci\u00f3n sin return<pre><code>function mostrarMensaje() {\n    console.log(\"Este es un mensaje de prueba\");\n}\n\nlet mensaje = mostrarMensaje();\nconsole.log(mensaje); // undefined\n</code></pre> <p>Las funciones pueden retornar distintos tipos de valores:</p> <ol> <li> <p>Valores primitivos (n\u00fameros, cadenas, booleanos): Retorno de valores primitivos<pre><code>function obtenerNombre() {\n    return \"Carlos\";\n}\n\nconsole.log(obtenerNombre());\n</code></pre></p> </li> <li> <p>Expresiones o c\u00e1lculos: Retorno de una expresi\u00f3n<pre><code>function calcularDoble(x) {\n    return x * 2;\n}\n\nconsole.log(calcularDoble(10)); // Salida: 20\n</code></pre></p> </li> <li> <p>Objetos (tema que veremos m\u00e1s adelante): Retorno de un objeto<pre><code>function crearPersona(nombre, edad) {\n    return { nombre: nombre, edad: edad };\n}\n\nlet persona = crearPersona(\"Ana\", 30);\nconsole.log(persona.nombre, persona.edad); // Salida: Ana 30\n</code></pre></p> </li> <li> <p>Otras funciones: Retorno de una funci\u00f3n<pre><code>function crearFuncion() {\n    return function() {\n        console.log(\"Soy una funci\u00f3n retornada\");\n    };\n}\n\nlet nuevaFuncion = crearFuncion();\nnuevaFuncion();\n</code></pre></p> </li> </ol> <p>El uso adecuado de <code>return</code> permite que las funciones sean m\u00e1s reutilizables y organizadas dentro del c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#219-funciones-anonimas-autoejecutadas-iife","title":"2.1.9 Funciones An\u00f3nimas Autoejecutadas (IIFE)","text":"<p>Las funciones an\u00f3nimas autoejecutadas (IIFE, Immediately Invoked Function Expressions) son funciones que se ejecutan inmediatamente despu\u00e9s de ser definidas. Se usan para evitar contaminar el \u00e1mbito global y encapsular variables.</p> <p>Ejemplo de funci\u00f3n autoejecutada</p> IIFE b\u00e1sica<pre><code>(function() {\n    console.log(\"Esta funci\u00f3n se ejecuta inmediatamente\");\n})();\n</code></pre> <p>Tambi\u00e9n pueden recibir par\u00e1metros:</p> <p>IIFE con par\u00e1metros</p> IIFE con par\u00e1metros<pre><code>(function(nombre) {\n    console.log(\"Hola, \" + nombre);\n})(\"Carlos\");\n</code></pre> <p>En este punto podemos a\u00f1adir la <code>funci\u00f3n cierre</code> o <code>closure</code> que es una funci\u00f3n anidada dentro de otra funci\u00f3n que tiene acceso a las variables de la funci\u00f3n exterior. Veamos un ejemplo con una funci\u00f3n <code>contador</code> con un atributo <code>valor</code> y m\u00e9todos <code>getValor</code> y <code>incrementar</code> y <code>decrementar</code>:</p> <p>Ejemplo de funci\u00f3n cierre</p> Funci\u00f3n cierre<pre><code>var miContador = (function contador() {\n    let valor = 0;\n\n    return {\n        getValor: function() {\n            return valor;\n        },\n        incrementar: function() {\n            valor++;\n        },\n        decrementar: function() {\n            valor--;\n        }\n    };\n})();\n\nconsole.log(miContador.getValor()); // 0\nmiContador.incrementar();\nmiContador.incrementar();\nconsole.log(miContador.getValor()); // 2\nmiContador.decrementar();\nconsole.log(miContador.getValor()); // 1\n</code></pre> <p>Este patr\u00f3n de dise\u00f1o es muy \u00fatil para proteger variables y m\u00e9todos de ser accedidos desde fuera de la funci\u00f3n. Su principal diferencia con los objetos (clases) es que no se pueden crear instancias de la funci\u00f3n <code>contador</code> y solo se puede acceder a sus m\u00e9todos a trav\u00e9s de la funci\u00f3n <code>contador</code>.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#2110-funciones-flecha-arrow-functions","title":"2.1.10 Funciones Flecha (<code>Arrow Functions</code>)","text":"<p>Las funciones flecha (<code>=&gt;</code>) son una forma m\u00e1s concisa de escribir funciones en JavaScript. Se utilizan sobre todo en funciones cortas y expresiones de retorno r\u00e1pido.</p> <p>Sintaxis b\u00e1sica:</p> Sintaxis de una funci\u00f3n flecha<pre><code>const sumar = (a, b) =&gt; a + b;\nconsole.log(sumar(5, 3)); // Salida: 8\n</code></pre> <p>Si la funci\u00f3n tiene una sola l\u00ednea, el <code>return</code> es impl\u00edcito. Si tiene varias l\u00edneas, se necesita escribir un bloque con <code>{}</code> y <code>return</code>:</p> <p>Ejemplo con varias l\u00edneas</p> Funci\u00f3n flecha con varias l\u00edneas<pre><code>const multiplicar = (a, b) =&gt; {\n    let resultado = a * b;\n    return resultado;\n};\nconsole.log(multiplicar(4, 5)); // Salida: 20\n</code></pre> <p>Las funciones flecha no tienen su propio <code>this</code>, lo que las hace \u00fatiles en ciertos casos (aunque esto se ver\u00e1 m\u00e1s adelante).</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#ejercicios-funciones-en-javascript","title":"Ejercicios: Funciones en JavaScript","text":"<p>Ejercicio 1: Funci\u00f3n para determinar si un n\u00famero es positivo, negativo o cero</p> <ul> <li>Crea una funci\u00f3n llamada <code>determinarSigno</code> que reciba un n\u00famero como par\u00e1metro.</li> <li>La funci\u00f3n debe devolver <code>\"positivo\"</code> si el n\u00famero es mayor que cero, <code>\"negativo\"</code> si es menor que cero, y <code>\"cero\"</code> si es exactamente cero.</li> </ul> Soluci\u00f3n Funci\u00f3n para determinar signo de un n\u00famero<pre><code>function determinarSigno(numero) {\n    if (numero &gt; 0) {\n        return \"positivo\";\n    } else if (numero &lt; 0) {\n        return \"negativo\";\n    } else {\n        return \"cero\";\n    }\n}\n\nconsole.log(determinarSigno(10));  // positivo\nconsole.log(determinarSigno(-5));  // negativo\nconsole.log(determinarSigno(0));   // cero\n</code></pre> <p>Ejercicio 2: Funci\u00f3n para verificar si una palabra es un pal\u00edndromo</p> <ul> <li>Crea una funci\u00f3n <code>esPalindromo</code> que reciba una palabra y devuelva <code>true</code> si se lee igual de izquierda a derecha que de derecha a izquierda, y <code>false</code> en caso contrario.</li> </ul> Soluci\u00f3n Funci\u00f3n para verificar pal\u00edndromos usando bucles<pre><code>function esPalindromo(palabra) {\n    let longitud = palabra.length;\n    for (let i = 0; i &lt; longitud / 2; i++) {\n        if (palabra[i].toLowerCase() !== palabra[longitud - 1 - i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(esPalindromo(\"reconocer\")); // true\nconsole.log(esPalindromo(\"javascript\")); // false\n</code></pre> <p>Ejercicio 3: Funci\u00f3n para calcular la media de tres n\u00fameros</p> <ul> <li>Crea una funci\u00f3n llamada <code>calcularMedia</code> que reciba tres n\u00fameros como par\u00e1metros y devuelva la media aritm\u00e9tica de los tres.</li> </ul> Soluci\u00f3n Funci\u00f3n para calcular la media<pre><code>function calcularMedia(a, b, c) {\n    return (a + b + c) / 3;\n}\n\nconsole.log(calcularMedia(5, 10, 15)); // 10\nconsole.log(calcularMedia(7, 14, 21)); // 14\n</code></pre> <p>Ejercicio 4: Funci\u00f3n para determinar si un n\u00famero es primo</p> <ul> <li>Crea una funci\u00f3n <code>esPrimo</code> que reciba un n\u00famero entero positivo y devuelva <code>true</code> si es primo y <code>false</code> en caso contrario.</li> </ul> Soluci\u00f3n Funci\u00f3n para verificar si un n\u00famero es primo<pre><code>function esPrimo(numero) {\n    if (numero &lt; 2) return false;\n    for (let i = 2; i &lt; numero; i++) {\n        if (numero % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(esPrimo(7)); // true\nconsole.log(esPrimo(10)); // false\n</code></pre> <p>Ejercicio 5: Funci\u00f3n que devuelve la cantidad de vocales en una palabra</p> <ul> <li>Crea una funci\u00f3n <code>contarVocales</code> que reciba una palabra y devuelva cu\u00e1ntas vocales contiene.</li> </ul> Soluci\u00f3n Funci\u00f3n para contar vocales en una palabra<pre><code>function contarVocales(palabra) {\n    let contador = 0;\n    let vocales = \"aeiouAEIOU\";\n    for (let i = 0; i &lt; palabra.length; i++) {\n        if (vocales.includes(palabra[i])) {\n            contador++;\n        }\n    }\n    return contador;\n}\n\nconsole.log(contarVocales(\"javascript\")); // 3\nconsole.log(contarVocales(\"programaci\u00f3n\")); // 5\n</code></pre> <p>Ejercicio 6: Funci\u00f3n para generar un n\u00famero aleatorio entre dos valores</p> <ul> <li>Crea una funci\u00f3n <code>numeroAleatorio</code> que reciba dos n\u00fameros (<code>min</code> y <code>max</code>) y devuelva un n\u00famero entero aleatorio dentro de ese rango, incluyendo ambos valores.</li> </ul> Soluci\u00f3n Funci\u00f3n para generar un n\u00famero aleatorio<pre><code>function numeroAleatorio(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log(numeroAleatorio(1, 10)); // N\u00famero aleatorio entre 1 y 10\nconsole.log(numeroAleatorio(50, 100)); // N\u00famero aleatorio entre 50 y 100\n</code></pre> <p>Ejercicio 7: Funci\u00f3n como expresi\u00f3n</p> <ul> <li>Crea una funci\u00f3n como expresi\u00f3n que calcule el cuadrado de un n\u00famero y la almacene en una variable.</li> </ul> Soluci\u00f3n Funci\u00f3n como expresi\u00f3n<pre><code>let cuadrado = function(n) {\n    return n * n;\n};\n\nconsole.log(cuadrado(5)); // Salida: 25\n</code></pre> <p>Ejercicio 8: Diferencia entre paso por valor y referencia</p> <ul> <li>Declara una funci\u00f3n que intente modificar una variable primitiva y otra que modifique un objeto. Explica la diferencia.</li> </ul> Soluci\u00f3n Paso por valor y referencia<pre><code>function cambiarNumero(num) {\n    num = 50;\n}\n\nfunction cambiarObjeto(obj) {\n    obj.nombre = \"Nuevo\";\n}\n\nlet numero = 10;\nlet persona = { nombre: \"Viejo\" };\n\ncambiarNumero(numero);\ncambiarObjeto(persona);\n\nconsole.log(numero); // Sigue siendo 10 (paso por valor)\nconsole.log(persona.nombre); // \"Nuevo\" (paso por referencia)\n</code></pre> <p>Ejercicio 9: Comprender el \u00e1mbito de variables</p> <ul> <li>Crea una funci\u00f3n que defina una variable local e intenta acceder a ella desde fuera de la funci\u00f3n. \u00bfQu\u00e9 sucede?</li> </ul> Soluci\u00f3n \u00c1mbito de variables<pre><code>function definirVariable() {\n    let local = \"Solo existo aqu\u00ed\";\n    console.log(local); // Funciona dentro de la funci\u00f3n\n}\n\ndefinirVariable();\n// console.log(local); // Error: local no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#ejercicios-adicionales","title":"Ejercicios adicionales","text":"<p>Ejercicio 10: Validar la letra del DNI</p> <ul> <li>Crea una funci\u00f3n que reciba un n\u00famero de DNI y su letra.</li> <li>Comprueba si la letra es correcta (usando el m\u00e9todo oficial de c\u00e1lculo del DNI en Espa\u00f1a).</li> <li>Pista: define y utiliza la constante <code>const letras = \"TRWAGMYFPDXBNJZSQVHLCKE\"</code>;</li> <li>Pide al usuario el n\u00famero de DNI y su letra y verifica si son correctos.</li> </ul> Soluci\u00f3n Validaci\u00f3n de letra del DNI<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction calcularLetraDNI(numero) {\n    const letras = \"TRWAGMYFPDXBNJZSQVHLCKE\";\n    return letras[numero % 23];\n}\n\nlet dni = prompt(\"Introduce el n\u00famero del DNI: \");\nlet letra = prompt(\"Introduce la letra del DNI: \").toUpperCase();\n\nlet letraCalculada = calcularLetraDNI(parseInt(dni));\n\nif (letra === letraCalculada) {\n    console.log(\"DNI correcto.\");\n} else {\n    console.log(\"DNI incorrecto. La letra deber\u00eda ser:\", letraCalculada);\n}\n</code></pre> <p>Ejercicio 11: Contar repeticiones de una letra en una cadena</p> <ul> <li>Crea una funci\u00f3n que reciba una cadena y una letra.</li> <li>Devuelve cu\u00e1ntas veces aparece esa letra en la cadena.</li> <li>Pide al usuario una cadena y una letra y muestra el resultado.</li> </ul> Soluci\u00f3n Contar letras en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction contarLetra(cadena, letra) {\n    let contador = 0;\n    for (let i = 0; i &lt; cadena.length; i++) {\n        if (cadena[i].toLowerCase() === letra.toLowerCase()) {\n            contador++;\n        }\n    }\n    return contador;\n}\n\nlet cadenaUsuario = prompt(\"Introduce una cadena: \");\nlet letraUsuario = prompt(\"Introduce una letra: \");\n\nconsole.log(`La letra '${letraUsuario}' aparece`, contarLetra(cadenaUsuario, letraUsuario), \"veces en la cadena.\");\n</code></pre> <p>Ejercicio 12: C\u00e1lculo \u00e1rea de diferentes figuras</p> <ul> <li>Crea funciones que calculen el \u00e1rea de diferentes figuras geom\u00e9tricas. (<code>\"cuadrado\"</code>, <code>\"triangulo\"</code>, <code>\"circulo\"</code>).</li> <li>Crea una funci\u00f3n para pedir al usuario un n\u00famero positivo y validar que sea un n\u00famero, devolver -1 si no es v\u00e1lido.</li> <li>Pide al usuario la figura y dependiendo d la figura pide los par\u00e1metros necesarios.</li> <li>Calcula el \u00e1rea de la figura y mu\u00e9strala (utilizando la funci\u00f3n correspondiente). </li> </ul> Soluci\u00f3n con <code>if...else</code> C\u00e1lculo de \u00e1reas de figuras geom\u00e9tricas<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction pedirNumero() {\n    let numero = prompt(\"Introduce un n\u00famero positivo (el s\u00edmbolo decimal es la ','): \");\n    if (isNaN(numero) || numero &lt;= 0) {\n        return -1;\n    }\n    return parseFloat(numero);\n}\n\nfunction calcularAreaCuadrado(lado) {\n    return lado * lado;\n}\n\nfunction calcularAreaTriangulo(base, altura) {\n    return (base * altura) / 2;\n}\n\nfunction calcularAreaCirculo(radio) {\n    return Math.PI * radio * radio;\n}\n\nlet figura = prompt(\"Introduce la figura (cuadrado, triangulo, circulo): \").toLowerCase();\n\nif (figura === \"cuadrado\") {\n    let lado = pedirNumero();\n    if (lado !== -1) {\n        console.log(\"El \u00e1rea del cuadrado es:\", calcularAreaCuadrado(lado));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else if (figura === \"triangulo\") {\n    let base = pedirNumero();\n    let altura = pedirNumero();\n    if (base !== -1 &amp;&amp; altura !== -1) {\n        console.log(\"El \u00e1rea del tri\u00e1ngulo es:\", calcularAreaTriangulo(base, altura));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else if (figura === \"circulo\") {\n    let radio = pedirNumero();\n    if (radio !== -1) {\n        console.log(\"El \u00e1rea del c\u00edrculo es:\", calcularAreaCirculo(radio));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else {\n    console.log(\"Figura no v\u00e1lida.\");\n}\n</code></pre> Soluci\u00f3n con <code>switch</code> C\u00e1lculo de \u00e1reas de figuras geom\u00e9tricas con switch<pre><code>const prompt = require(\"prompt-sync\")();\nfunction pedirNumero() {\n    let numero = prompt(\"Introduce un n\u00famero positivo (el s\u00edmbolo decimal es la ','): \");\n    if (isNaN(numero) || numero &lt;= 0) {\n        return -1;\n    }\n    return parseFloat(numero);\n}\n\nfunction calcularAreaCuadrado(lado) {\n    return lado * lado;\n}\nfunction calcularAreaTriangulo(base, altura) {\n    return (base * altura) / 2;\n}\nfunction calcularAreaCirculo(radio) {\n    return Math.PI * radio * radio;\n}\nlet figura = prompt(\"Introduce la figura (cuadrado, triangulo, circulo): \").toLowerCase();\n\nswitch (figura) {\n    case \"cuadrado\":\n        let lado = pedirNumero();\n        if (lado !== -1) {\n            console.log(\"El \u00e1rea del cuadrado es:\", calcularAreaCuadrado(lado));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    case \"triangulo\":\n        let base = pedirNumero();\n        let altura = pedirNumero();\n        if (base !== -1 &amp;&amp; altura !== -1) {\n            console.log(\"El \u00e1rea del tri\u00e1ngulo es:\", calcularAreaTriangulo(base, altura));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    case \"circulo\":\n        let radio = pedirNumero();\n        if (radio !== -1) {\n            console.log(\"El \u00e1rea del c\u00edrculo es:\", calcularAreaCirculo(radio));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    default:\n        console.log(\"Figura no v\u00e1lida.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/","title":"Unidad 2: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_32/#22-manejo-de-errores-en-javascript","title":"2.2 Manejo de Errores en JavaScript","text":"<p>JavaScript proporciona mecanismos para manejar errores y prevenir que un programa falle completamente cuando ocurre un problema inesperado. </p> <p>El uso de <code>try...catch</code> nos permite capturar errores y tomar decisiones sobre c\u00f3mo manejarlos sin interrumpir la ejecuci\u00f3n del programa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#221-el-bloque-trycatch","title":"2.2.1 El Bloque <code>try...catch</code>","text":"<p>La estructura b\u00e1sica para manejar errores en JavaScript es:</p> Sintaxis de try...catch<pre><code>try {\n    // C\u00f3digo que puede generar un error\n} catch (error) {\n    // C\u00f3digo que se ejecuta si ocurre un error\n}\n</code></pre> <p>Cuando el c\u00f3digo dentro de <code>try</code> genera un error, la ejecuci\u00f3n se detiene y se pasa autom\u00e1ticamente al bloque <code>catch</code>, donde podemos manejar el error.</p> <p>Ejemplo b\u00e1sico de <code>try...catch</code></p> Captura de error con try...catch<pre><code>try {\n    let resultado = 10 / 0;\n    console.log(resultado);\n} catch (error) {\n    console.log(\"Se ha producido un error:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#222-uso-del-bloque-finally","title":"2.2.2 Uso del Bloque <code>finally</code>","text":"<p>El bloque <code>finally</code> se ejecuta siempre, independientemente de si hubo o no un error.</p> <p>Ejemplo con <code>finally</code></p> Uso de try...catch...finally<pre><code>try {\n    let x = 5;\n    console.log(x.toUpperCase()); // Error: toUpperCase no existe en un n\u00famero\n} catch (error) {\n    console.log(\"Se ha capturado un error:\", error.message);\n} finally {\n    console.log(\"Este mensaje siempre se mostrar\u00e1.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#223-lanzar-errores-con-throw","title":"2.2.3 Lanzar Errores con <code>throw</code>","text":"<p>Podemos generar errores manualmente usando <code>throw</code>. Esto es \u00fatil cuando queremos validar datos y detener la ejecuci\u00f3n si no son correctos.</p> <p>Ejemplo con <code>throw</code></p> Lanzamiento de errores con throw<pre><code>function verificarEdad(edad) {\n    if (edad &lt; 18) {\n        throw new Error(\"No puedes acceder, eres menor de edad.\");\n    }\n    return \"Acceso permitido.\";\n}\n\ntry {\n    console.log(verificarEdad(16)); // Esto generar\u00e1 un error\n} catch (error) {\n    console.log(\"Error detectado:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#223-tipos-de-errores-comunes-en-javascript","title":"2.2.3 Tipos de Errores Comunes en JavaScript","text":"<p>JavaScript tiene varios tipos de errores que pueden ocurrir durante la ejecuci\u00f3n de un programa. Algunos de los errores m\u00e1s comunes son:</p> <ul> <li><code>SyntaxError</code>: Ocurre cuando hay un error en la sintaxis del c\u00f3digo.</li> <li><code>ReferenceError</code>: Sucede cuando intentamos acceder a una variable que no est\u00e1 definida.</li> <li><code>TypeError</code>: Aparece cuando intentamos ejecutar una operaci\u00f3n sobre un tipo de dato incorrecto.</li> <li><code>RangeError</code>: Se produce cuando un valor num\u00e9rico est\u00e1 fuera del rango permitido.</li> <li><code>EvalError</code>: Relacionado con el uso incorrecto de <code>eval()</code> (aunque es poco com\u00fan en c\u00f3digo moderno).</li> </ul> <p>Ejemplo de errores comunes</p> Errores comunes en JavaScript<pre><code>// SyntaxError (descomenta para ver el error)\n// console.log(\"Hola);\n\n// ReferenceError\ntry {\n    console.log(variableNoDefinida);\n} catch (error) {\n    console.log(\"ReferenceError detectado:\", error.message);\n}\n\n// TypeError\ntry {\n    let num = 5;\n    num(); // No se puede llamar un n\u00famero como funci\u00f3n\n} catch (error) {\n    console.log(\"TypeError detectado:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#224-personalizacion-de-mensajes-de-error","title":"2.2.4 Personalizaci\u00f3n de Mensajes de Error","text":"<p>Podemos personalizar los errores en JavaScript lanzando mensajes descriptivos mediante <code>throw</code>. Esto es \u00fatil cuando queremos manejar errores espec\u00edficos en nuestro c\u00f3digo.</p> <p>Ejemplo de personalizaci\u00f3n de errores</p> Lanzar errores personalizados<pre><code>function dividir(a, b) {\n    if (b === 0) {\n        throw new Error(\"No se puede dividir por cero.\");\n    }\n    return a / b;\n}\n\ntry {\n    console.log(dividir(10, 2)); // 5\n    console.log(dividir(10, 0)); // Error\n} catch (error) {\n    console.log(\"Error personalizado:\", error.message);\n}\n</code></pre> <p>Los mensajes de error personalizados permiten que el c\u00f3digo sea m\u00e1s claro y f\u00e1cil de depurar.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#ejercicios-manejo-de-errores-en-javascript","title":"Ejercicios: Manejo de Errores en JavaScript","text":"<p>Ejercicio 1: Validaci\u00f3n de entrada num\u00e9rica</p> <ul> <li>Crea una funci\u00f3n <code>pedirNumero</code> que solicite un n\u00famero al usuario.</li> <li>Usa <code>try...catch</code> para asegurarte de que el usuario ingrese un n\u00famero v\u00e1lido.</li> <li>Si el usuario ingresa algo que no sea un n\u00famero, lanza un error con <code>throw</code> y captura el error.</li> </ul> Soluci\u00f3n Validaci\u00f3n de entrada num\u00e9rica<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction pedirNumero() {\n    try {\n        let input = prompt(\"Introduce un n\u00famero: \");\n        let numero = Number(input);\n        if (isNaN(numero)) {\n            throw new Error(\"El valor introducido no es un n\u00famero v\u00e1lido.\");\n        }\n        console.log(\"N\u00famero ingresado:\", numero);\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\npedirNumero();\n</code></pre> <p>Reto</p> <ul> <li>Modifica la funci\u00f3n <code>pedirNumero</code>, que tenga un valir m\u00ednimo y uno m\u00e1ximo, que de dos tipos de errores, uno si la entrada no es num\u00e9rica y otro si el n\u00famero no est\u00e1 en el rango permitido.</li> </ul> <p>Ejercicio 2: Divisi\u00f3n segura</p> <ul> <li>Crea una funci\u00f3n <code>dividir</code> que reciba dos n\u00fameros y los divida.</li> <li>Usa <code>try...catch</code> para evitar divisiones entre cero.</li> <li>Si el divisor es cero, lanza un error con <code>throw</code>.</li> </ul> Soluci\u00f3n Divisi\u00f3n segura con manejo de errores<pre><code>function dividir(a, b) {\n    try {\n        if (b === 0) {\n            throw new Error(\"No se puede dividir por cero.\");\n        }\n        return a / b;\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\nconsole.log(dividir(10, 2)); // 5\nconsole.log(dividir(10, 0)); // Error: No se puede dividir por cero.\n</code></pre> <p>Ejercicio 3: Validaci\u00f3n de edad para votar</p> <ul> <li>Crea una funci\u00f3n <code>validarEdadVotacion</code> que reciba una edad como par\u00e1metro.</li> <li>Si la edad es menor que 18, lanza un error con <code>throw</code> indicando que la persona no puede votar.</li> <li>Usa <code>try...catch</code> para capturar el error y mostrar un mensaje adecuado.</li> </ul> Soluci\u00f3n Validaci\u00f3n de edad para votar<pre><code>function validarEdadVotacion(edad) {\n    try {\n        if (edad &lt; 18) {\n            throw new Error(\"No puedes votar, debes tener al menos 18 a\u00f1os.\");\n        }\n        console.log(\"Puedes votar.\");\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\nvalidarEdadVotacion(20); // Puedes votar.\nvalidarEdadVotacion(16); // Error: No puedes votar, debes tener al menos 18 a\u00f1os.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/","title":"Unidad 2: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_33/#23-asincronia-en-javascript","title":"2.3 Asincron\u00eda en JavaScript","text":"<p>JavaScript es un lenguaje de programaci\u00f3n monohilo, lo que significa que ejecuta una sola operaci\u00f3n a la vez en su hilo principal. Sin embargo, permite manejar tareas asincr\u00f3nicas mediante callbacks, promesas y <code>async/await</code>, evitando bloqueos en la ejecuci\u00f3n del c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#231-concurrencia-y-paralelismo-en-javascript","title":"2.3.1 Concurrencia y Paralelismo en JavaScript","text":"<p>En programaci\u00f3n, concurrencia y paralelismo son dos conceptos clave cuando se trabaja con tareas as\u00edncronas:</p> <ul> <li>Concurrencia: Es la capacidad de manejar m\u00faltiples tareas a la vez, pero no necesariamente ejecut\u00e1ndolas simult\u00e1neamente.</li> <li>Paralelismo: Implica la ejecuci\u00f3n de m\u00faltiples tareas al mismo tiempo en diferentes hilos o n\u00facleos de procesamiento.</li> </ul> <p>N\u00f3tese la diferencia: que varias tareas\u00a0progresen\u00a0simult\u00e1neamente no tiene porque significar que sucedan al mismo tiempo. Mientras que la concurrencia aborda un problema m\u00e1s general, el paralelismo es un sub-caso de la concurrencia donde las cosas suceden exactamente al mismo tiempo.</p> <p>Mucha gente a\u00fan sigue creyendo que la concurrencia implica necesariamente m\u00e1s de un\u00a0thread.\u00a0Esto no es cierto. El entrelazado (o multiplexado), por ejemplo, es un mecanismo com\u00fan para implementar concurrencia en escenarios donde los recursos son limitados. Piensa en cualquier sistema operativo moderno haciendo multitarea con un \u00fanico\u00a0core. Simplemente trocea las tareas en tareas m\u00e1s peque\u00f1as y las entrelaza, de modo que cada una de ellas se ejecutar\u00e1 durante un breve instante. Sin embargo, a largo plazo, la impresi\u00f3n es que todas progresan a la vez.</p> <p>JavaScript utiliza un modelo basado en eventos con un bucle de eventos (Event Loop) para manejar la concurrencia, en lugar de m\u00faltiples hilos de ejecuci\u00f3n como otros lenguajes.</p> <p></p> <ul> <li>Escenario 1: no es ni concurrente ni paralelo. Es simplemente una ejecuci\u00f3n secuencial, primero una tarea, despu\u00e9s la siguiente.</li> <li> <p>Escenario 2,\u00a03\u00a0y\u00a04: son escenarios donde se ilustra la concurrencia bajo distintas t\u00e9cnicas:</p> <ol> <li>Escenario 3: muestra como la concurrencia puede conseguirse con un \u00fanico\u00a0thread. Peque\u00f1as porciones de cada tarea se entrelazan para que ambas mantengan un progreso constante. Esto es posible siempre y cuando las tareas puedan descompuestas en subtareas mas simples.</li> <li>Escenario 2\u00a0y\u00a04: ilustran paralelismo, utilizando multiples\u00a0threads\u00a0donde las tareas o subtareas corren en paralelo exactamente al mismo tiempo. A nivel de\u00a0thread, el escenario\u00a02\u00a0es secuencial, mientras que\u00a04\u00a0aplica entrelazado.</li> </ol> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#naturaleza-de-io-bloqueante-vs-no-bloqueante","title":"Naturaleza de I/O Bloqueante vs No Bloqueante","text":"<p>Cuando un programa interact\u00faa con operaciones de entrada/salida (I/O), puede hacerlo de dos maneras:</p> <ul> <li>I/O Bloqueante: La ejecuci\u00f3n del programa se detiene hasta que la operaci\u00f3n de I/O finaliza.</li> <li>I/O No Bloqueante: Permite que el programa siga ejecutando otras tareas mientras la operaci\u00f3n de I/O se completa en segundo plano.</li> </ul> <p>JavaScript implementa I/O no bloqueante, lo que significa que puede manejar m\u00faltiples operaciones as\u00edncronas sin detener la ejecuci\u00f3n del programa.</p> <p></p> <p>S\u00edncrono vs As\u00edncrono se refiere a cuando tendr\u00e1 lugar la respuesta:</p> <ul> <li>S\u00edncrono: es frecuente emplear 'bloqueante' y 's\u00edncrono' como sin\u00f3nimos, dando a entender que toda la operaci\u00f3n de entrada/salida se ejecuta de forma secuencial y, por tanto, debemos esperar a que se complete para procesar el resultado.</li> <li>As\u00edncrono: la finalizaci\u00f3n de la operaci\u00f3n\u00a0I/O\u00a0se se\u00f1aliza m\u00e1s tarde, mediante un mecanismo espec\u00edfico como por ejemplo un\u00a0callback, una promesa o un evento (se explicar\u00e1n despu\u00e9s), lo que hace posible que la respuesta sea procesada en diferido. Como se puede adivinar, su comportamiento es no bloqueante ya que la llamda\u00a0I/O\u00a0devuelve inmediatamente.</li> </ul> <p></p> <p>Seg\u00fan la clasificaci\u00f3n anterior, podemos tener operaciones\u00a0I/O\u00a0de tipo:</p> <ul> <li>S\u00edncronas y Bloqueantes. Toda la operaci\u00f3n se hace de una vez, bloqueando el flujo de ejecuci\u00f3n:          1.  El\u00a0thread\u00a0es bloqueado mientras espera.          2.  La respuesta se procesa inmediatamente despu\u00e9s de terminar la operaci\u00f3n.</li> <li>S\u00edncronas y No-Bloqueantes. Similar a la anterior pero usando alguna t\u00e9cnica de\u00a0polling\u00a0para evitar el bloqueo en la primera fase:          1.  La llamada devuelve inmediatamente, el\u00a0thread\u00a0no se bloquea. Se necesitar\u00e1n sucesivos intentos hasta completar la operaci\u00f3n.          2.  La respuesta se procesa inmediatamente despu\u00e9s de terminar la operaci\u00f3n.</li> <li>As\u00edncronas y No-Bloqueantes:          1.  La petici\u00f3n devuelve inmediatamente para evitar el bloqueo.          2.  Se env\u00eda una notificaci\u00f3n una vez que la operaci\u00f3n se ha completado. Es entonces cuando la funci\u00f3n que procesar\u00e1 la respuesta (callback) se encola para ser ejecutada en alg\u00fan momento en nuestra aplicaci\u00f3n.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#el-modelo-de-javascript-event-loop-y-paralelismo","title":"El Modelo de JavaScript: Event Loop y Paralelismo","text":"<p>JavaScript usa un bucle de eventos (Event Loop) para gestionar la ejecuci\u00f3n de c\u00f3digo as\u00edncrono.</p> <p>Gracias a esta soluci\u00f3n, Javascript es \u00e1ltamente concurrente a pesar de emplear un \u00fanico\u00a0thread. Ya conocemos el significado de\u00a0as\u00edncrono\u00a0y\u00a0no bloqueante, pero \u00bfqu\u00e9 es el\u00a0loop\u00a0de eventos? Este mecanismo ser\u00e1 explicado en el siguiente cap\u00edtulo. Antes, a modo de repaso, veamos el aspecto de una operaci\u00f3n\u00a0I/O\u00a0as\u00edncrona en Javascript:</p> <p>Modelo:  </p> <p>Paso a paso:</p> <p> </p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#el-loop-de-eventos","title":"El loop de eventos","text":"<ol> <li>Heap: Donde se almacenan los objetos y datos.</li> <li>Call Stack (Pila de llamadas): Donde se ejecuta el c\u00f3digo de forma secuencial.</li> <li>Web APIs (para c\u00f3digo as\u00edncrono): Maneja operaciones como <code>setTimeout()</code>, eventos de usuario, o peticiones HTTP.</li> <li>Task Queue (Cola de tareas): Donde se encolan las funciones de callback hasta que el <code>Call Stack</code> est\u00e9 libre.</li> <li>Event Loop: Coordina el flujo de ejecuci\u00f3n y mueve las tareas desde la <code>Task Queue</code> al <code>Call Stack</code> cuando este \u00faltimo est\u00e1 vac\u00edo.</li> </ol> <p>De esta forma, podemos entender\u00a0la cola como el almac\u00e9n de los mensajes (notificaciones) y sus\u00a0callbacks\u00a0asociados\u00a0mientras que\u00a0el\u00a0loop\u00a0de eventos es el mecanismo para despacharlos. Este mecanismo sigue un comportamiento s\u00edncrono: cada mensaje debe ser procesado de forma completa para que pueda comenzar el siguiente.</p> <p>Una de las implicaciones m\u00e1s relevantes de este bucle de eventos es que\u00a0los\u00a0callbacks\u00a0no ser\u00e1n despachados tan pronto como sean encolados, sino que deben esperar su turno. Este tiempo de espera depender\u00e1 del numero de mensajes pendientes de procesar (por delante en la cola) as\u00ed como del tiempo que se tardar\u00e1 en cada uno de ellos. Aunque pueda parecer obvio, esto explica la raz\u00f3n por la cual la finalizaci\u00f3n de una operaci\u00f3n as\u00edncrona no puede predecirse con seguridad, sino que se atiende en modo\u00a0best effort.</p> <p>El\u00a0loop\u00a0de eventos no est\u00e1 libre de problemas, y podr\u00edan darse situaciones comprometidas en los siguientes casos:</p> <ul> <li>La pila de llamadas no se vac\u00eda ya que nuestra aplicaci\u00f3n hace uso intensivo de ella. No habr\u00e1\u00a0tick\u00a0en el bucle de eventos y por tanto los mensajes no se procesan.</li> <li>El flujo de mensajes que se van encolando es mayor que el de mensajes procesados. Demasiados eventos a la vez.</li> <li>Un\u00a0callback\u00a0requiere procesamiento intensivo y acapara la pila. De nuevo bloqueamos los\u00a0ticks\u00a0del bucle de eventos y el resto de mensajes no se despachan.</li> </ul> <p>Lo m\u00e1s probable es que un cuello de botella se produzca como consecuencia de una mezcla de factores. En cualquier caso, acabar\u00edan\u00a0retrasando el flujo de ejecuci\u00f3n. Y por tanto retrasando el renderizado, el procesado de eventos, etc. La experiencia de usuario se degradar\u00eda y la aplicaci\u00f3n dejar\u00eda de responder de forma fluida. Para evitar esta situaci\u00f3n, recuerda siempre\u00a0mantener los\u00a0callbacks\u00a0lo m\u00e1s ligeros posible. En general, evita c\u00f3digo que acapare la CPU y permite que el\u00a0loop\u00a0de eventos se ejecute a buen ritmo.</p> <p>Ejemplo de c\u00f3mo funciona el Event Loop</p> Ejemplo del Event Loop<pre><code>console.log(\"Inicio\");\n\nsetTimeout(() =&gt; {\n    console.log(\"Mensaje dentro de setTimeout\");\n}, 0);\n\nconsole.log(\"Fin\");\n</code></pre> <p>Salida esperada: <pre><code>Inicio\nFin\nMensaje dentro de setTimeout\n</code></pre></p> <p>Incluso con un tiempo de espera de <code>0</code>, la funci\u00f3n en <code>setTimeout</code> se ejecuta despu\u00e9s porque se encola en la <code>Task Queue</code> y solo se ejecuta cuando el <code>Call Stack</code> est\u00e1 vac\u00edo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#nota-sobre-paralelismo-en-javascript","title":"Nota sobre Paralelismo en JavaScript","text":"<p>Aunque JavaScript es monohilo, puede ejecutar tareas en paralelo a trav\u00e9s de Web Workers o m\u00f3dulos como <code>Worker Threads</code> en Node.js, lo que permite aprovechar m\u00faltiples n\u00facleos de CPU.</p> <p>Esto no es lo mismo que el Event Loop, ya que los Web Workers ejecutan c\u00f3digo en hilos separados sin acceso al <code>Call Stack</code> principal.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#232-callbacks","title":"2.3.2 Callbacks","text":"<p>Los\u00a0callbacks\u00a0son la pieza clave para que Javascript pueda funcionar de forma as\u00edncrona. De hecho, el resto de patrones as\u00edncronos en Javascript est\u00e1 basado en\u00a0callbacks\u00a0de un modo u otro, simplemente a\u00f1aden az\u00facar sint\u00e1ctico para trabajar con ellos m\u00e1s c\u00f3modamente.</p> <p>Un\u00a0callback\u00a0no es m\u00e1s que\u00a0una funci\u00f3n que se pasa como argumento de otra funci\u00f3n, y que ser\u00e1 invocada para completar alg\u00fan tipo de acci\u00f3n. En nuestro contexto as\u00edncrono, un\u00a0callback\u00a0representa el '\u00bfQu\u00e9 quieres hacer una vez que tu operaci\u00f3n as\u00edncrona termine?'. Por tanto, es el trozo de c\u00f3digo que ser\u00e1 ejecutado una vez que una operaci\u00f3n as\u00edncrona notifique que ha terminado. Esta ejecuci\u00f3n se har\u00e1 en alg\u00fan momento futuro, gracias al mecanismo que implementa el bucle de eventos.</p> <p>F\u00edjate en el siguiente ejemplo sencillo utilizando un callback:</p> <p>Ejemplo de callback</p> Uso de un callback<pre><code>function operacion(a, b, callback) {\n    let resultado = a + b;\n    callback(resultado);\n}\n\nfunction mostrarResultado(resultado) {\n    console.log(\"El resultado es:\", resultado);\n}\n\n// Uso de un callback\noperacion(5, 3, mostrarResultado); \n// callback an\u00f3nimo, funci\u00f3n flecha\noperacion(10, 20, resultado =&gt; console.log(\"El resultado es:\", resultado)); \n// callback an\u00f3nimo, funci\u00f3n tradicional\noperacion(15, 25, function(resultado) {\n    console.log(\"El resultado es:\", resultado);\n});\n</code></pre> <p>Problema con los Callbacks: Callback Hell</p> <p>Cuando encadenamos m\u00faltiples callbacks, el c\u00f3digo se vuelve dif\u00edcil de leer y mantener. Esto se conoce como callback hell.</p> <p>Ejemplo de Callback Hell</p> Callback Hell<pre><code>function paso1(callback) {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 1 completado\");\n        callback();\n    }, 1000);\n}\n\nfunction paso2(callback) {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 2 completado\");\n        callback();\n    }, 1000);\n}\n\nfunction paso3() {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 3 completado\");\n    }, 1000);\n}\n\npaso1(() =&gt; {\n    paso2(() =&gt; {\n        paso3();\n    });\n});\n</code></pre> <p>Para evitar este problema, se introdujeron las Promesas.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#233-promesas-en-javascript","title":"2.3.3 Promesas en JavaScript","text":"<p>Una promesa es un objeto que representa\u00a0el resultado de una operaci\u00f3n as\u00edncrona. Este resultado podr\u00eda estar disponible\u00a0ahora\u00a0o en el\u00a0futuro. Las promesas se basan en\u00a0callbacks pero a\u00f1aden az\u00facar para un mejor manejo y sintaxis. Las promesas son especiales en t\u00e9rminos de asincron\u00eda ya que a\u00f1aden un nuevo nivel de prioridad que estudiaremos a continuaci\u00f3n.</p> <p>Cuando llamamos a una funci\u00f3n as\u00edncrona implementada con este patr\u00f3n, nos devolver\u00e1 inmediatamente una promesa como garant\u00eda de que la operaci\u00f3n as\u00edncrona finalizar\u00e1 en alg\u00fan momento, ya sea con \u00e9xito o con fallo. Una vez que tengamos el objeto promesa en nuestro poder, registramos un par de\u00a0callbacks: uno para indicarle a la promesa 'que debe hacer en caso de que todo vaya bien' (resoluci\u00f3n de la promesa o\u00a0resolve) y otro para determinar 'que hacer en caso de fallo' (rechazo de la promesa o\u00a0reject).</p> <p>A resumidas cuentas, una promesa es un objeto al que le\u00a0adjuntamos\u00a0callbacks, en lugar de pasarlos directamente a la funci\u00f3n as\u00edncrona. La forma en que registramos esos dos\u00a0callbacks\u00a0es mediante el m\u00e9todo\u00a0.then(resolveCallback, rejectCallback). En terminolog\u00eda de promesas, decimos que una promesa se resuelve con \u00e9xito (resolved) o se rechaza con fallo (rejected). Echa un vistazo al siguiente ejemplo:</p> <p>Una promesa es un objeto que representa un valor que puede estar disponible ahora, en el futuro o nunca. Las promesas tienen tres estados:</p> <ul> <li>Pendiente (<code>pending</code>): La operaci\u00f3n a\u00fan no ha finalizado.</li> <li>Resuelta (<code>fulfilled</code>): La operaci\u00f3n se complet\u00f3 con \u00e9xito.</li> <li>Rechazada (<code>rejected</code>): Ocurri\u00f3 un error.</li> </ul> <p>Sintaxis de la promesa</p> Sintaxis de una Promesa<pre><code>const currentURL = document.URL.toString();\nconst promise = fetch(currentURL);\n\npromise.then(result =&gt; console.log(result), e =&gt; console.log(`Error capturado:  ${e}`));\n</code></pre> <p>Es m\u00e1s legible de esta manera:</p> <p>Sintaxis de la promesa m\u00e1s legible</p> Sintaxis de una Promesa<pre><code>fetch(document.URL.toString())\n    .then(result =&gt; console.log(result),\n        e =&gt; console.log(`Error capturado:  ${e}`));\n</code></pre> <p>En el ejemplo anterior, pedimos al servidor que nos provea una URL utilizando la funci\u00f3n as\u00edncrona fetch y nos devuelve una promesa. Configuramos la promesa con dos callbacks: uno para resolver la promesa, que mostrar\u00e1 la p\u00e1gina por consola en caso de \u00e9xito, y otro para rechazarla en caso de fallo que mostrar\u00e1 el error asociado.</p> <p>Creando una Promesa</p> <p>Ejemplo de Promesa</p> Uso de Promesas<pre><code>function operacionAsincrona() {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            let exito = true;\n            if (exito) {\n                resolve(\"Operaci\u00f3n completada\");\n            } else {\n                reject(\"Error en la operaci\u00f3n\");\n            }\n        }, 2000);\n    });\n}\n\noperacionAsincrona()\n    .then(mensaje =&gt; console.log(mensaje))\n    .catch(error =&gt; console.log(\"Error:\", error));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#234-asyncawait-manejo-de-codigo-asincrono-de-forma-mas-clara","title":"2.3.4 <code>async/await</code>: Manejo de C\u00f3digo As\u00edncrono de Forma M\u00e1s Clara","text":"<p>Las promesas supusieron un gran salto en Javascript al introducir una mejora sustancial sobre los\u00a0callbacks\u00a0y un manejo m\u00e1s elegante de nuestras tareas as\u00edncronas. Sin embargo, tambi\u00e9n pueden llegar a ser tediosas y verbosas a medida que se requieren m\u00e1s y m\u00e1s\u00a0.then().\u00a0Las palabras clave\u00a0async\u00a0y\u00a0await\u00a0surgieron para simplificar el manejo de las promesas. Son puro az\u00facar para hacer las promesas m\u00e1s amigables, escribir c\u00f3digo m\u00e1s sencillo, reducir el anidamiento y mejorar la trazabilidad al depurar. Pero recuerda,\u00a0async\u00a0\\\u00a0await\u00a0y las promesas son lo mismo en el fondo.</p> <p>La etiqueta\u00a0async\u00a0declara una funci\u00f3n como as\u00edncrona e indica que una promesa ser\u00e1 autom\u00e1ticamente devuelta. Podemos declarar como\u00a0async\u00a0tanto funciones con nombre, an\u00f3nimas, o funciones flecha. Por otro lado,\u00a0await\u00a0debe ser usado siempre dentro de una funci\u00f3n declarada como\u00a0async\u00a0y esperar\u00e1 autom\u00e1ticamente (de forma as\u00edncrona y no bloqueante) a que una promesa se resuelva.</p> <p><code>async/await</code> es una forma m\u00e1s sencilla y clara de manejar operaciones asincr\u00f3nicas sin caer en la anidaci\u00f3n de callbacks o el uso complejo de <code>.then()</code> y <code>.catch()</code>.</p> <p>Para usarlo: - Se define una funci\u00f3n con la palabra clave <code>async</code>. - Se usa <code>await</code> para esperar el resultado de una promesa.</p> <p>Sintaxis de <code>async/await</code> AJAX</p> Uso de async/await<pre><code>const checkServerWithSugar = async (url) =&gt; {\n    try {\n        const response = await fetch(url);\n        return `Estado del servidor: ${response.status === 200 ? \"OK\" : \"NOT OK\"}`;\n    } catch (e) {\n        throw `Manejo intero del error. Error original: ${e}`;\n    }\n}\n\ncheckServerWithSugar(document.URL.toString())\n    .then(result =&gt; console.log(result))\n    .catch(e =&gt; console.log(`Error Capturado Fuera de la funci\u00f3n async: ${e}`));\n</code></pre> <p>Ejemplo con <code>async/await</code></p> Uso de async/await<pre><code>function operacionAsincrona() {\n    return new Promise(resolve =&gt; {\n        setTimeout(() =&gt; resolve(\"Operaci\u00f3n completada\"), 2000);\n    });\n}\n\nasync function ejecutarOperacion() {\n    console.log(\"Iniciando operaci\u00f3n...\");\n    let resultado = await operacionAsincrona();\n    console.log(resultado);\n}\n\nejecutarOperacion();\n</code></pre> <p>Otro ejemplo de uso de <code>async/await</code> puede ser:</p> <p>Ejemplo con <code>async/await</code></p> Uso de async/await<pre><code>async function myDisplay() {\n    let myPromise = new Promise(function(resolve, reject) {\n        resolve(\"I love You !!\");\n    });\n    document.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#comparacion-entre-callbacks-promesas-y-asyncawait","title":"Comparaci\u00f3n entre Callbacks, Promesas y <code>async/await</code>","text":"M\u00e9todo Facilidad de lectura Manejo de errores Callbacks Baja (callback hell) Uso de m\u00faltiples <code>if</code> Promesas Media <code>.then()</code> y <code>.catch()</code> async/await Alta (c\u00f3digo m\u00e1s limpio) Uso de <code>try...catch</code> <p>Las promesas y <code>async/await</code> son la mejor opci\u00f3n en proyectos modernos para manejar c\u00f3digo asincr\u00f3nico de manera eficiente y legible.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/","title":"Unidad 2: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#24-ejemplo-practico-con-asyncawait","title":"2.4 Ejemplo pr\u00e1ctico con Async/Await","text":"<p>Este microservicio proporciona informaci\u00f3n sobre ciudades espa\u00f1olas almacenadas en un archivo JSON.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#introduccion-a-las-api-rest","title":"\ud83d\udccc Introducci\u00f3n a las API REST","text":"<p>Este microservicio sigue el concepto de API REST (Representational State Transfer), un estilo arquitect\u00f3nico que permite la comunicaci\u00f3n entre sistemas a trav\u00e9s de HTTP. </p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#caracteristicas-de-una-api-rest","title":"Caracter\u00edsticas de una API REST","text":"<ul> <li>Basado en recursos: Cada entidad (en este caso, ciudades) es un recurso accesible mediante una URL \u00fanica.</li> <li>Uso de m\u00e9todos HTTP est\u00e1ndar: Se utilizan m\u00e9todos como:</li> <li><code>GET</code> para obtener datos.</li> <li><code>POST</code> para enviar datos (no implementado en este ejemplo).</li> <li><code>PUT</code> para actualizar datos.</li> <li><code>DELETE</code> para eliminar recursos.</li> <li>Formato de datos JSON: Los datos se env\u00edan y reciben en formato JSON, lo que facilita la interoperabilidad con otros sistemas.</li> </ul> <p>Este microservicio REST proporciona informaci\u00f3n sobre ciudades espa\u00f1olas mediante dos endpoints:</p> <ol> <li><code>GET /ciudades</code> \u2192 Devuelve la lista completa de ciudades.</li> <li><code>GET /ciudades/:codigo</code> \u2192 Devuelve la informaci\u00f3n de una ciudad espec\u00edfica seg\u00fan su c\u00f3digo.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#1-archivo-json-con-los-datos-ciudadesjson","title":"1\ufe0f\u20e3 Archivo JSON con los datos (<code>ciudades.json</code>)","text":"ciudades.json<pre><code>[\n    { \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 },\n    { \"codigo\": \"BCN\", \"nombre\": \"Barcelona\", \"poblacion\": 1620000 },\n    { \"codigo\": \"VAL\", \"nombre\": \"Valencia\", \"poblacion\": 791000 },\n    { \"codigo\": \"SEV\", \"nombre\": \"Sevilla\", \"poblacion\": 688000 },\n    { \"codigo\": \"ZAR\", \"nombre\": \"Zaragoza\", \"poblacion\": 674000 },\n    { \"codigo\": \"MAL\", \"nombre\": \"M\u00e1laga\", \"poblacion\": 574000 },\n    { \"codigo\": \"MUR\", \"nombre\": \"Murcia\", \"poblacion\": 460000 },\n    { \"codigo\": \"PAL\", \"nombre\": \"Palma de Mallorca\", \"poblacion\": 415000 },\n    { \"codigo\": \"BIL\", \"nombre\": \"Bilbao\", \"poblacion\": 345000 },\n    { \"codigo\": \"VGO\", \"nombre\": \"Vigo\", \"poblacion\": 296000 }\n]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#2-servidor-nodejs-con-express-y-asyncawait-serverjs","title":"2\ufe0f\u20e3 Servidor Node.js con Express y Async/Await (<code>server.js</code>)","text":"server.js<pre><code>const express = require(\"express\");\nconst fs = require(\"fs/promises\"); // Uso de fs con promesas para async/await\nconst app = express();\nconst PORT = 3000;\n\n// Funci\u00f3n para leer el JSON de ciudades\nasync function cargarCiudades() {\n    try {\n        const data = await fs.readFile(\"ciudades.json\", \"utf-8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error al leer el archivo JSON\", error);\n        return [];\n    }\n}\n\n// \ud83d\udccc Endpoint para obtener todas las ciudades\napp.get(\"/ciudades\", async (req, res) =&gt; {\n    const ciudades = await cargarCiudades();\n    res.json(ciudades);\n});\n\n// \ud83d\udccc Endpoint para obtener una ciudad por su c\u00f3digo\napp.get(\"/ciudades/:codigo\", async (req, res) =&gt; {\n    const codigo = req.params.codigo.toUpperCase();\n    const ciudades = await cargarCiudades();\n    const ciudad = ciudades.find(c =&gt; c.codigo === codigo);\n\n    if (ciudad) {\n        res.json(ciudad);\n    } else {\n        res.status(404).json({ error: \"Ciudad no encontrada\" });\n    }\n});\n\n// Iniciar servidor\napp.listen(PORT, () =&gt; {\n    console.log(`Servidor ejecut\u00e1ndose en http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#3-como-ejecutar-el-microservicio","title":"3\ufe0f\u20e3 C\u00f3mo Ejecutar el Microservicio","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#1-instalar-nodejs-y-express","title":"\ud83d\udccc 1. Instalar Node.js y Express","text":"<p>Ejecuta los siguientes comandos: <pre><code>npm init -y\nnpm install express\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#2-crear-los-archivos","title":"\ud83d\udccc 2. Crear los archivos","text":"<ul> <li>Guarda el archivo <code>ciudades.json</code> con los datos.</li> <li>Guarda el archivo <code>server.js</code> con el c\u00f3digo del servidor.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#3-iniciar-el-servidor","title":"\ud83d\udccc 3. Iniciar el servidor","text":"<p>Ejecuta el siguiente comando: <pre><code>node server.js\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#4-pruebas-con-el-servidor","title":"4\ufe0f\u20e3 Pruebas con el Servidor","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#obtener-todas-las-ciudades","title":"\u2714 Obtener todas las ciudades","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades</code></p> <p>\ud83d\udccc Ejemplo de respuesta: <pre><code>[\n    { \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 },\n    { \"codigo\": \"BCN\", \"nombre\": \"Barcelona\", \"poblacion\": 1620000 }\n]\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#obtener-una-ciudad-por-codigo","title":"\u2714 Obtener una ciudad por c\u00f3digo","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades/MAD</code></p> <p>\ud83d\udccc Ejemplo de respuesta: <pre><code>{ \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 }\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#ciudad-no-encontrada","title":"\u274c Ciudad no encontrada","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades/XYZ</code></p> <p>\ud83d\udccc Respuesta: <pre><code>{ \"error\": \"Ciudad no encontrada\" }\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#5-como-acceder-a-los-servicios-rest","title":"5\ufe0f\u20e3 C\u00f3mo acceder a los servicios REST","text":"<p>Existen varias formas de probar y consumir servicios REST. Aqu\u00ed te mostramos tres m\u00e9todos: desde un plugin de VSCode, desde un navegador web y con Postman.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-1-usar-una-extension-de-vscode-rest-client","title":"\u2714 Opci\u00f3n 1: Usar una Extensi\u00f3n de VSCode (REST Client)","text":"<ol> <li>Instalar la extensi\u00f3n REST Client en VSCode.</li> <li>Crear un archivo con extensi\u00f3n <code>.http</code> o <code>.rest</code>.</li> <li>Escribir la petici\u00f3n:</li> </ol> <pre><code>GET http://localhost:3000/ciudades\n</code></pre> <ol> <li>Hacer clic en Send Request para ver la respuesta en JSON.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-2-desde-el-navegador-chrome","title":"\u2714 Opci\u00f3n 2: Desde el navegador Chrome","text":"<p>Si solo necesitas probar las peticiones <code>GET</code>, puedes hacerlo desde el navegador:</p> <ol> <li>Abre Google Chrome.</li> <li>Escribe en la barra de direcciones:    <pre><code>http://localhost:3000/ciudades\n</code></pre></li> <li>Ver\u00e1s la respuesta en formato JSON en pantalla.</li> <li>Para buscar una ciudad espec\u00edfica:    <pre><code>http://localhost:3000/ciudades/MAD\n</code></pre></li> </ol> <p>Esto mostrar\u00e1 la informaci\u00f3n de la ciudad de Madrid.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-3-usar-postman-para-probar-la-api","title":"\u2714 Opci\u00f3n 3: Usar Postman para probar la API","text":"<ol> <li>Descargar e instalar Postman desde postman.com.</li> <li>Abrir Postman y crear una nueva solicitud (<code>New Request</code>).</li> <li>Seleccionar el m\u00e9todo GET e ingresar la URL:    <pre><code>http://localhost:3000/ciudades\n</code></pre></li> <li>Hacer clic en Send y ver la respuesta JSON.</li> <li>Para buscar una ciudad espec\u00edfica, cambia la URL:    <pre><code>http://localhost:3000/ciudades/MAD\n</code></pre></li> <li>Si deseas probar otros m\u00e9todos como <code>POST</code> o <code>PUT</code>, puedes enviar datos JSON en el Body.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#conclusion","title":"Conclusi\u00f3n","text":"<p>Este microservicio muestra c\u00f3mo utilizar async/await en Node.js para manejar archivos JSON de manera as\u00edncrona y proporcionar datos a trav\u00e9s de una API sencilla con Express.js. \ud83d\ude80</p>"},{"location":"content/MF_0967_3/UF2216/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0967_3/UF2217/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0967_3/UF2218/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0968_3/UF1643/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0968_3/UF1644/","title":"En construcci\u00f3n","text":""},{"location":"content/MP0459/Practicas/","title":"En construcci\u00f3n","text":""},{"location":"content/MP0459/Practicas/#amonitions","title":"Amonitions","text":""},{"location":"content/MP0459/Practicas/#nota","title":"Nota","text":"<p>Nota - note</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#advertencia","title":"Advertencia","text":"<p>Advertencia - warning</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#resumen","title":"Resumen","text":"Resumen - abstract <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#informacion","title":"Informaci\u00f3n","text":"<p>Informaci\u00f3n - info</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#pregunta","title":"Pregunta","text":"Pregunta - question <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#consejo","title":"Consejo","text":"Consejo - tip <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#pregunta_1","title":"Pregunta","text":"Pregunta - discussion <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#ejemplo","title":"Ejemplo","text":"Ejemplo - example <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#importante","title":"Importante","text":"Importante - important <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#botones","title":"Botones","text":""},{"location":"content/MP0459/Practicas/#boton-estilo-1","title":"Bot\u00f3n estilo 1","text":"<p>Bot\u00f3n estilo normal</p> <p><code>[Google](https://www.google.com){.md-button}</code></p> <p>Google</p> <p>Bot\u00f3n estilo primary</p> <p><code>[Google](https://www.google.com){.md-button .md-button--primary}</code></p> <p>Google</p> <p>Bot\u00f3n estilo secondary</p> <p><code>[Google](https://www.google.com){.md-button .md-button--secondary}</code></p> <p>Google</p> <p>Bot\u00f3n estilo success con icono</p> <p>No funciona, no saca el icono</p> <p><code>[Send :fontawesome-solid-paper-plane:](https://www.google.com){.md-button}</code></p> <p>Send :fontawesome-solid-paper-plane:</p>"},{"location":"content/MP0459/Practicas/#codigo","title":"Codigo","text":"<p>Este ejemplo pide un n\u00famero y muestra su tabla de multiplicar.</p> Tabla de multiplicar<pre><code>let numero = parseInt(prompt(\"Ingrese un n\u00famero: \"));\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`${numero} x ${i} = ${numero * i}`);\n}\n</code></pre>"},{"location":"content/MP0459/Practicas/#mermaid","title":"Mermaid","text":"<p>Ejemplo con mermaid.</p> <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar n\u00famero al usuario]\n    B --&gt; C[Convertir entrada a entero: parseInt]\n    C --&gt; D[Inicializar i = 1]\n    D --&gt; E{\u00bfi &lt;= 10?}\n    E --&gt;|S\u00ed| F[Calcular: numero x i]\n    F --&gt; G[Mostrar resultado en consola]\n    G --&gt; H[Incrementar i en 1]\n    H --&gt; E\n    E --&gt;|No| I[Fin]</code></pre>"},{"location":"content/MP0459/Practicas/#juntar-codigo-y-diagrama-utilizando-pestanas-tabs","title":"Juntar c\u00f3digo y diagrama utilizando pesta\u00f1as <code>tabs</code>","text":"<p>En este ejemplo, mostramos c\u00f3mo funciona un bucle <code>while</code> para sumar n\u00fameros del 1 al 5. Puedes alternar entre el ordinograma y el c\u00f3digo usando las pesta\u00f1as.</p> C\u00f3digo de ejemplo C\u00f3digo PythonOrdinograma Suma de n\u00fameros del 1 al 5<pre><code>    total = 0\n    num = 1\n    while num &lt;= 5:\n        total += num\n        num += 1\n    print(\"La suma es:\", total)\n</code></pre> <pre><code>    flowchart TD\n        Start([Inicio])\n        Check{\u00bfnum &lt;= 5?}\n        Incremento[Incrementar num en 1]\n        Suma[total += num]\n        End([Fin])\n\n    Start --&gt; Check\n    Check --&gt;|S\u00ed| Suma --&gt; Incremento --&gt; Check\n    Check --&gt;|No| End</code></pre>"},{"location":"normativa19/IFCD0211/","title":"Sistemas de Gesti\u00f3n de Informaci\u00f3n (IFCD0211)","text":""},{"location":"normativa19/IFCD0211/#introduccion","title":"Introducci\u00f3n","text":"<p>El certificado de profesionalidad Sistemas de Gesti\u00f3n de Informaci\u00f3n tiene como objetivo implementar y administrar sistemas de gesti\u00f3n de informaci\u00f3n en organizaciones, garantizando la seguridad, accesibilidad y rendimiento.</p>"},{"location":"normativa19/IFCD0211/#informacion-general","title":"Informaci\u00f3n General:","text":"<ul> <li>C\u00f3digo: IFCD0211</li> <li>Familia Profesional: Inform\u00e1tica y Comunicaciones</li> <li>\u00c1rea Profesional: Desarrollo</li> <li>Nivel de Cualificaci\u00f3n: 3</li> <li>Duraci\u00f3n Total: 590 horas</li> <li>Competencia general: IFC304_3: Administrar sistemas de gesti\u00f3n de informaci\u00f3n en el \u00e1mbito del desarrollo de aplicaciones y contenidos.</li> </ul>"},{"location":"normativa19/IFCD0211/#unidades-de-competencia","title":"Unidades de Competencia:","text":"<ul> <li>UC0966_3: Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos.</li> <li>UC0967_3: Crear y gestionar repositorios de contenidos.</li> <li>UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n.</li> </ul> <p>Podemos encontrar m\u00e1s informaci\u00f3n sobre las unidades de competencia en el documento UCs.</p>"},{"location":"normativa19/IFCD0211/#modulos-formativos","title":"M\u00f3dulos Formativos:","text":"M\u00f3dulo Formativo Duraci\u00f3n Descripci\u00f3n MF0966_3 210 horas Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos MF0967_3 200 horas Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos MF0968_3 100 horas Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n MP0459 80 horas Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n Total 590 horas <ul> <li>MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos</li> <li>MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos</li> <li>MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n</li> <li>MP0459: Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n</li> </ul>"},{"location":"normativa19/IFCD0211/#detalle-de-los-modulos-formativos","title":"Detalle de los M\u00f3dulos Formativos","text":""},{"location":"normativa19/IFCD0211/#mf0966_3-consulta-y-manipulacion-de-informacion-contenida-en-gestores-de-datos","title":"MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos","text":"<ul> <li>Duraci\u00f3n: 210 horas</li> <li>Unidades Formativas:<ul> <li>UF2213: Modelos de datos y visi\u00f3n conceptual de una base de datos</li> <li>UF2214: Implementaci\u00f3n y uso de una base de datos</li> <li>UF2215: Herramientas de los sistemas gestores de bases de datos, pasarelas y medios de conexi\u00f3n</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mf0967_3-creacion-y-gestion-de-repositorios-de-contenidos","title":"MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos","text":"<ul> <li>Duraci\u00f3n: 200 horas</li> <li>Unidades Formativas:<ul> <li>UF2216: Repositorios de contenidos</li> <li>UF2217: Lenguaje XML</li> <li>UF2218: Desarrollo de un gestor de contenidos (CMS)</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mf0968_3-administracion-de-sistemas-de-gestion-de-informacion","title":"MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n","text":"<ul> <li>Duraci\u00f3n: 100 horas</li> <li>Unidades Formativas:<ul> <li>UF1643: Gesti\u00f3n y control de los sistemas de informaci\u00f3n</li> <li>UF1644: Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mp0459-practicas-profesionales-no-laborales","title":"MP0459: Pr\u00e1cticas Profesionales No Laborales","text":"<ul> <li>Duraci\u00f3n: 80 horas</li> </ul>"},{"location":"normativa19/IFCD0211/#relacion-entre-los-modulos-formativos-y-las-unidades-de-competencia","title":"Relaci\u00f3n entre los m\u00f3dulos formativos y las unidades de competencia:","text":""},{"location":"normativa19/IFCD0211/#unidades-de-competencia-uc-y-realizaciones-profesionales-rp","title":"Unidades de Competencia (UC) y Realizaciones Profesionales (RP)","text":"C\u00f3digo UC C\u00f3digo RP Descripci\u00f3n UC0966_3 Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos. RP1 Dise\u00f1ar consultas para extraer informaci\u00f3n de una base de datos conforme a necesidades espec\u00edficas. RP2 Comprobar que las consultas y manipulaciones de datos se ajustan a las necesidades especificadas. RP3 Realizar informes que representen la informaci\u00f3n almacenada en el sistema de gesti\u00f3n de datos. UC0967_3 Crear y gestionar repositorios de contenidos. RP1 Dise\u00f1ar repositorios de contenidos en funci\u00f3n de las necesidades de la organizaci\u00f3n. RP2 Implementar repositorios mediante el uso de lenguajes espec\u00edficos de marcas y est\u00e1ndares de desarrollo. RP3 Administrar repositorios de contenidos garantizando su operatividad y disponibilidad. UC0968_3 Administrar el sistema de gesti\u00f3n de informaci\u00f3n. RP1 Determinar las pol\u00edticas y controles de acceso al sistema de gesti\u00f3n de informaci\u00f3n seg\u00fan especificaciones funcionales. RP2 Aplicar t\u00e9cnicas de auditor\u00eda en el sistema de gesti\u00f3n de informaci\u00f3n para garantizar su seguridad. RP3 Realizar el mantenimiento del flujo de informaci\u00f3n en el sistema de gesti\u00f3n, conforme a las necesidades organizativas. RP4 Publicar los contenidos del sistema de informaci\u00f3n utilizando canales de distribuci\u00f3n."},{"location":"normativa19/IFCD0211/#modulos-formativos-mf-y-unidades-formativas-uf","title":"M\u00f3dulos Formativos (MF) y Unidades Formativas (UF)","text":"C\u00f3digo MF C\u00f3digo UF Descripci\u00f3n MF0966_3 Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. UF2213 Modelos de datos y visi\u00f3n conceptual de una base de datos. UF2214 Implementaci\u00f3n y uso de una base de datos. UF2215 Herramientas de los sistemas gestores de bases de datos, pasarelas y medios de conexi\u00f3n. MF0967_3 Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos. UF2216 Repositorios de contenidos. UF2217 Lenguaje XML. UF2218 Desarrollo de un gestor de contenidos (CMS). MF0968_3 Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n. UF1643 Gesti\u00f3n y control de los sistemas de informaci\u00f3n. UF1644 Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n. MP0459 Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n."},{"location":"normativa19/IFCD0211/#relacion-de-unidades-de-competencia-realizaciones-profesionales-modulos-y-unidades-formativas","title":"Relaci\u00f3n de Unidades de Competencia, Realizaciones Profesionales, M\u00f3dulos y Unidades Formativas","text":"UC RP M\u00f3dulo Formativo (MF) Unidades Formativas (UF) UC0966_3 RP1, RP2, RP3 MF0966_3 UF2213, UF2214, UF2215 UC0967_3 RP1, RP2, RP3 MF0967_3 UF2216, UF2217, UF2218 UC0968_3 RP1, RP2, RP3, RP4 MF0968_3 UF1643, UF1644"},{"location":"normativa19/IFCD0211/#entorno-profesional","title":"Entorno Profesional","text":""},{"location":"normativa19/IFCD0211/#ambito-profesional","title":"\u00c1mbito Profesional:","text":"<p>Desarrolla su actividad profesional en el departamento de desarrollo de software dedicado a los sistemas de gesti\u00f3n de informaci\u00f3n, en entidades de naturaleza p\u00fablica o privada, empresas de cualquier tama\u00f1o, tanto por cuenta propia como ajena, con independencia de su forma jur\u00eddica. Desarrolla su actividad dependiendo, en su caso, funcional y/o jer\u00e1rquicamente de un superior. Puede tener personal a su cargo en ocasiones, por temporadas o de forma estable. En el desarrollo de la actividad profesional se aplican los principios de accesibilidad universal y dise\u00f1o universal o dise\u00f1o para todas las personas de acuerdo con la normativa aplicable.</p>"},{"location":"normativa19/IFCD0211/#sectores-productivos","title":"Sectores Productivos:","text":"<p>Se ubica sobre todo en el sector servicios, en el subsector del desarrollo de software, en la comercializaci\u00f3n de servicios de gesti\u00f3n de contenidos para infraestructuras de redes intranet, Internet y extranet; y en cualquier otro sector que utilizan sistemas inform\u00e1ticos para su gesti\u00f3n.</p>"},{"location":"normativa19/IFCD0211/#ocupaciones-relacionadas","title":"Ocupaciones Relacionadas:","text":"<ul> <li>Gestor de contenidos.</li> <li>Gestor de portales web.</li> <li>Administrador de sistemas de contenidos.</li> <li>Integrador de sistemas de informaci\u00f3n.</li> </ul>"},{"location":"normativa19/IFCD0211/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Legislaci\u00f3n aplicable: BOE-A-2013-9707</li> <li>Normativa de protecci\u00f3n de datos y seguridad inform\u00e1tica.</li> <li>Documentaci\u00f3n t\u00e9cnica y manuales asociados.</li> </ul>"},{"location":"normativa19/MF0966_3/","title":"M\u00f3dulo Formativo: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos","text":"Campo Detalle C\u00f3digo MF0966_3 Nombre Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos Nivel 3 Unidad de Competencia UC0966_3 Denominaci\u00f3n UC Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos Duraci\u00f3n 210 horas"},{"location":"normativa19/MF0966_3/#unidad-formativa-1-modelos-de-datos-y-vision-conceptual-de-una-base-de-datos","title":"Unidad Formativa 1: Modelos de datos y visi\u00f3n conceptual de una base de datos","text":"Campo Detalle C\u00f3digo UF2213 Nombre Modelos de datos y visi\u00f3n conceptual de una base de datos Duraci\u00f3n 60 horas Referente de Competencia RP1: Analizar las plataformas de almacenamiento de datos"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Identificar las tipolog\u00edas de los gestores y sus correspondientes modelos de datos.</p> <ul> <li>CE1.1: Describir los atributos y propiedades de los elementos que componen los gestores de datos.</li> <li>CE1.2: Distinguir los diferentes tipos de gestores de datos operacionales.</li> <li>CE1.3: Explicar las caracter\u00edsticas de los sistemas orientados a la toma de decisiones.</li> <li>CE1.4: Diferenciar los modelos de datos utilizados por los gestores.</li> <li>CE1.5: Reconocer los sistemas orientados a contenidos multimedia.</li> <li>CE1.6: Clasificar las herramientas utilizadas en la gesti\u00f3n y consulta de informaci\u00f3n.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Modelo de datos conceptual:</p> <ul> <li>Conceptos b\u00e1sicos:<ul> <li>La realidad: los objetos.</li> <li>Las concepciones: la informaci\u00f3n.</li> <li>Las representaciones: los datos.</li> </ul> </li> <li>Caracter\u00edsticas generales de un modelo.<ul> <li>Modelo ER (entity-relationship):</li> </ul> </li> <li>Construcciones b\u00e1sicas.<ul> <li>Extensiones.</li> </ul> </li> <li>Modelo UML.</li> </ul> </li> <li> <p>Introducci\u00f3n a las bases de datos:</p> <ul> <li>Concepto y origen de las BD y los SGBD.</li> <li>Evoluci\u00f3n.</li> <li>Objetivos y servicios.</li> <li>Modelo l\u00f3gico de BD:<ul> <li>Modelo jer\u00e1rquico.</li> <li>Modelo en red.</li> <li>Modelo relacional.</li> <li>Modelo relacional extendido.</li> <li>Modelo orientado a objetos.</li> </ul> </li> </ul> </li> <li> <p>An\u00e1lisis detallado del modelo relacional:</p> <ul> <li>Estructura de los datos.</li> <li>Operaciones del modelo.</li> <li>Reglas de integridad.</li> <li>\u00c1lgebra relacional.</li> <li>Transformaci\u00f3n del modelo ER.</li> <li>Limitaciones.</li> </ul> </li> <li> <p>Modelos avanzados de BD:</p> <ul> <li>BD deductivas.</li> <li>BD temporales.</li> <li>BD distribuidas.</li> <li>BD anal\u00edticas (OLAP).</li> <li>BD de columnas.</li> <li>BD documentales.</li> <li>BD XML.</li> <li>BD incrustadas (embedded).</li> <li>Nuevas tendencias.</li> </ul> </li> <li> <p>An\u00e1lisis detallado de la distribuci\u00f3n de BD:</p> <ul> <li>Formas de distribuci\u00f3n.</li> <li>Arquitectura ANSI/X3/SPARC.</li> <li>Transacciones distribuidas.</li> <li>Mecanismos de distribuci\u00f3n de datos.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#unidad-formativa-2-implementacion-y-uso-de-una-base-de-datos","title":"Unidad Formativa 2: Implementaci\u00f3n y uso de una base de datos","text":"Campo Detalle C\u00f3digo UF2214 Nombre Implementaci\u00f3n y uso de una base de datos Duraci\u00f3n 80 horas Referente de Competencia RP2: Extraer informaci\u00f3n de sistemas de almacenamiento"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Distinguir las caracter\u00edsticas y funciones de los lenguajes y herramientas de consulta y extracci\u00f3n de informaci\u00f3n de los sistemas gestores de datos, teniendo en cuenta sus especificaciones t\u00e9cnicas y funcionales.</p> <ul> <li>CE1.1: Determinar las funcionalidades y caracter\u00edsticas de los lenguajes de consulta utilizados en los gestores de datos, para su utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan las especificaciones t\u00e9cnicas propias del lenguaje.</li> <li>CE1.2: Clasificar las funcionalidades y caracter\u00edsticas de las herramientas utilizadas en los gestores de datos, para su utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan especificaciones t\u00e9cnicas de las herramientas.</li> <li>CE1.3: Comparar las funcionalidades de lenguajes y herramientas a utilizar, para su selecci\u00f3n en la aplicaci\u00f3n de procedimientos en la consulta y extracci\u00f3n de informaci\u00f3n seg\u00fan necesidades funcionales.</li> </ul> <p>C2: Aplicar procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en el sistema gestor de datos, utilizando lenguajes de consulta espec\u00edficos seg\u00fan necesidades dadas.</p> <ul> <li>CE2.1: Utilizar la gram\u00e1tica, sintaxis y sem\u00e1ntica del lenguaje de consulta utilizado, para la creaci\u00f3n de procedimientos de extracci\u00f3n de la informaci\u00f3n seg\u00fan las normas de codificaci\u00f3n y desarrollo dadas.</li> <li>CE2.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, extraer y consultar informaci\u00f3n utilizando lenguajes de consulta espec\u00edficos del sistema gestor de datos, seg\u00fan un dise\u00f1o especificado:<ul> <li>Identificar las fuentes de informaci\u00f3n para la creaci\u00f3n de los procedimientos de consulta y extracci\u00f3n.</li> <li>Crear procedimientos que permitan formular consultas para la recuperaci\u00f3n de la informaci\u00f3n.</li> <li>Recuperar y archivar procedimientos de consultas y extracci\u00f3n previamente establecidos para explotar la informaci\u00f3n del sistema.</li> <li>Establecer formatos de presentaci\u00f3n y publicaci\u00f3n de la informaci\u00f3n extra\u00edda del sistema gestor de datos utilizado para la posterior distribuci\u00f3n de la misma.</li> <li>Depurar y verificar los procedimientos creados utilizando las especificaciones implementadas en el lenguaje para asegurar la calidad de los resultados.</li> <li>Documentar los procedimientos creados.</li> </ul> </li> <li>CE2.3: Interpretar la documentaci\u00f3n inherente al lenguaje de consulta espec\u00edfico, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, para permitir formular y crear procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en funci\u00f3n de sus especificaciones t\u00e9cnicas y funcionales.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Dise\u00f1o de bases de datos</p> <ul> <li>Etapas del dise\u00f1o de bases de datos.</li> <li>Teor\u00eda de la normalizaci\u00f3n:<ul> <li>Primera forma normal.</li> <li>Segunda forma normal.</li> <li>Tercera forma normal.</li> <li>Forma normal de Boyce-Codd.</li> <li>Cuarta forma normal.</li> <li>Quinta forma normal.</li> </ul> </li> <li>Aplicaci\u00f3n de la teor\u00eda de la normalizaci\u00f3n al dise\u00f1o de bases de datos relacionales.</li> <li>Desnormalizaci\u00f3n de bases de datos.</li> </ul> </li> <li> <p>M\u00e9todos de acceso a una base de datos</p> <ul> <li>Implementaci\u00f3n de los accesos por posici\u00f3n.</li> <li>Implementaci\u00f3n de los accesos por valor.</li> <li>\u00cdndices.</li> <li>\u00c1rboles B+.</li> <li>Dispersi\u00f3n.</li> <li>\u00cdndices agrupados.</li> <li>Implementaci\u00f3n de los accesos por diversos valores:<ul> <li>Implementaci\u00f3n de los accesos directos.</li> <li>Implementaci\u00f3n de los accesos secuenciales y mixtos.</li> </ul> </li> </ul> </li> <li> <p>Lenguajes de consulta y extracci\u00f3n de datos</p> <ul> <li>Caracter\u00edsticas generales.</li> <li>SQL.</li> <li>OQL.</li> <li>JPQL.</li> <li>XMLQL.</li> <li>Otros:<ul> <li>HTSQL.</li> <li>LINQ.</li> </ul> </li> </ul> </li> <li> <p>An\u00e1lisis del lenguaje de consulta para bases de datos relacionales</p> <ul> <li>Sentencias de definici\u00f3n de datos.</li> <li>Sentencias de manipulaci\u00f3n de datos.</li> <li>Sentencias de concesi\u00f3n y revocaci\u00f3n de privilegios.</li> <li>Procedimientos almacenados.</li> <li>Disparadores.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#unidad-formativa-3-herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion","title":"Unidad Formativa 3: Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion_2","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Aplicar procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en el sistema gestor de datos, utilizando herramientas espec\u00edficas.</p> <ul> <li>CE1.1: Clasificar las diferentes opciones de trabajo implementadas en la herramienta de aplicaci\u00f3n, para su selecci\u00f3n en la creaci\u00f3n de procedimientos de extracci\u00f3n y consulta de informaci\u00f3n, seg\u00fan necesidades funcionales y especificaciones t\u00e9cnicas.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, extraer y consultar informaci\u00f3n utilizando herramientas espec\u00edficas en el sistema gestor de datos y seg\u00fan unas necesidades dadas:<ul> <li>Identificar las fuentes de informaci\u00f3n para la creaci\u00f3n de los procedimientos de consulta y extracci\u00f3n.</li> <li>Formular consultas que permitan la recuperaci\u00f3n de la informaci\u00f3n seg\u00fan un dise\u00f1o dado.</li> <li>Recuperar y archivar consultas previamente establecidas para optimizar los procesos de explotaci\u00f3n de la informaci\u00f3n.</li> <li>Establecer formatos de presentaci\u00f3n y publicaci\u00f3n de la informaci\u00f3n extra\u00edda del sistema gestor de datos utilizado para realizar la distribuci\u00f3n de la misma seg\u00fan un dise\u00f1o dado.</li> </ul> </li> <li>CE1.3: Interpretar la documentaci\u00f3n inherente a las herramientas espec\u00edficas, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, para permitir formular y crear procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan necesidades funcionales.</li> </ul> <p>C2: Aplicar los procedimientos de configuraci\u00f3n de pasarelas y medios de comunicaci\u00f3n para extraer y consultar informaci\u00f3n de sistemas gestores de datos, seg\u00fan necesidades funcionales.</p> <ul> <li>CE2.1: Enunciar caracter\u00edsticas generales de pasarelas y medios de conexi\u00f3n para permitir su selecci\u00f3n y utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n, seg\u00fan las especificaciones t\u00e9cnicas de los sistemas gestores de datos.</li> <li>CE2.2: Usar medios de conexi\u00f3n y pasarelas para extraer y consultar informaci\u00f3n del sistema gestor de datos implementado, seg\u00fan especificaciones funcionales.</li> <li>CE2.3: Identificar los par\u00e1metros a configurar en una pasarela o medio de conexi\u00f3n para poder extraer y consultar informaci\u00f3n de sistemas gestores de datos, seg\u00fan especificaciones t\u00e9cnicas de la infraestructura de comunicaciones y del sistema gestor de datos.</li> <li>CE2.4: Interpretar la documentaci\u00f3n inherente a pasarelas y medios de conexi\u00f3n, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, utiliz\u00e1ndola de ayuda en los procedimientos de configuraci\u00f3n.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos_2","title":"Contenidos","text":"<ol> <li> <p>Sistemas de gesti\u00f3n de bases de datos</p> <ul> <li>Funcionalidades y objetivos.</li> <li>Arquitectura funcional.</li> <li>El componente de procesamiento de peticiones:<ul> <li>Seguridad.</li> <li>Concurrencia.</li> <li>Transaccionalidad.</li> <li>Procesamiento de consultas:<ul> <li>Optimizaci\u00f3n sem\u00e1ntica.</li> <li>Optimizaci\u00f3n sint\u00e1ctica.</li> <li>Optimizaci\u00f3n f\u00edsica.</li> </ul> </li> </ul> </li> <li>El componente de gesti\u00f3n de los datos:<ul> <li>Restauraci\u00f3n.</li> <li>Reconstrucci\u00f3n.</li> </ul> </li> <li>Gesti\u00f3n del rendimiento:<ul> <li>Plan de las consultas.</li> <li>Monitores.</li> <li>Benchmarks.</li> </ul> </li> <li>Herramientas:<ul> <li>Administraci\u00f3n.</li> <li>Importaci\u00f3n / Exportaci\u00f3n masiva de datos.</li> <li>Acceso y consulta de datos.</li> </ul> </li> </ul> </li> <li> <p>Sistemas de an\u00e1lisis de la informaci\u00f3n</p> <ul> <li>Miner\u00eda de datos.</li> <li>OLAP.</li> <li>Dashboard/scorecard.</li> <li>Herramientas:<ul> <li>Administraci\u00f3n.</li> <li>Migraci\u00f3n.</li> <li>ETL.</li> <li>Informaci\u00f3n estad\u00edstica.</li> </ul> </li> </ul> </li> <li> <p>Herramientas CASE</p> <ul> <li>Concepto.</li> <li>Historia y evoluci\u00f3n.</li> <li>Clasificaci\u00f3n.</li> <li>Componentes y funcionalidades de una herramienta CASE.</li> </ul> </li> <li> <p>Entornos 4GL</p> <ul> <li>Tipolog\u00eda.</li> <li>Componentes y funcionalidades.</li> <li>Generadores de informes.</li> <li>Generadores de formularios.</li> <li>Generadores de gr\u00e1ficos.</li> <li>Generadores de aplicaciones.</li> <li>Nuevas tendencias.</li> </ul> </li> <li> <p>Desarrollo de aplicaciones</p> <ul> <li>\u00d3rdenes embebidas.</li> <li>Uso de bibliotecas de funciones.</li> <li>Dise\u00f1o de nuevos lenguajes.</li> </ul> </li> <li> <p>Tecnolog\u00edas de conectividad a bases de datos</p> <ul> <li>OLEDB.</li> <li>ODBC.</li> <li>JDBC.</li> <li>SQLJ.</li> <li>SQL/CLI.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<ul> <li>Secuencia:<ul> <li>Para acceder a la Unidad Formativa 2, debe haberse superado la Unidad Formativa 1.</li> <li>Para acceder a la Unidad Formativa 3, deben haberse superado las Unidades Formativas 1 y 2.</li> </ul> </li> <li>Criterios de acceso para los alumnos:<ul> <li>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</li> </ul> </li> </ul>"},{"location":"normativa19/MF0966_3/#modificaciones-de-las-unidades-formativas","title":"Modificaciones de las unidades formativas","text":"<p>Teniendo en cuenta que los contenidos y la programaci\u00f3n de las unidades formativas datan de principios de la d\u00e1cada pasada, se propone una actualizaci\u00f3n de los contenidos y la duraci\u00f3n de las unidades formativas. Para ello, se proponen la siguiente modificaciones a partir de los contenidos del <code>ciclo superior de desarrollo de aplicaciones web</code>.</p>"},{"location":"normativa19/MF0966_3/#unidades-formativas-1-y-2-uf2213-y-uf2214","title":"Unidades formativas 1 y 2 (UF2213 y UF2214)","text":"<p>Unidad Formativa 1: Modelos de datos y visi\u00f3n conceptual de una base de datos</p> Campo Detalle C\u00f3digo UF2213 Nombre Modelos de datos y visi\u00f3n conceptual de una base de datos Duraci\u00f3n 60 horas Referente de Competencia RP1: Analizar las plataformas de almacenamiento de datos <p>Unidad Formativa 2: Implementaci\u00f3n y uso de una base de datos</p> Campo Detalle C\u00f3digo UF2214 Nombre Implementaci\u00f3n y uso de una base de datos Duraci\u00f3n 80 horas Referente de Competencia RP2: Extraer informaci\u00f3n de sistemas de almacenamiento <p>Modificaciones</p> <p>Estas unidades formativas se van a adaptar al m\u00f3dulo <code>0484 - Bases de Datos</code> que se propone en el m\u00f3dulo siguiente. Con alguna peque\u00f1a adaptaci\u00f3n para ajustar las horas.</p> Campo Detalle C\u00f3digo 0484 Nombre Bases de datos (160h) Duraci\u00f3n 140 horas <p>En la unidad formativa UF2213 se van a tratar los siguientes contenidos:</p> <ul> <li>Introducci\u00f3n a Bases de Datos</li> <li>Modelo Entidad-Relaci\u00f3n</li> <li>Modelo Relacional</li> </ul> <p>En la unidad formativa UF2214 se van a tratar los siguientes contenidos:</p> <ul> <li>M\u00f3delo l\u00f3gico de bases de datos.</li> <li>SQL<ul> <li>DDL (Data Definition Language)</li> <li>DML (Data Manipulation Language)</li> <li>DQL (Data Query Language)</li> <li>TCL (Transaction Control Language)</li> <li>PL/SQL (Procedural Language/SQL)</li> </ul> </li> </ul>"},{"location":"normativa19/MF0966_3/#unidad-formativa-3-herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion_1","title":"Unidad Formativa 3: Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n <p>En este m\u00f3dulo vamos a realizar las siguientes modificaciones aprovechando los contenidos del m\u00f3dulo <code>0485 - Programaci\u00f3n</code>. Esta Unidad Formativa nos debe dar las competencias necesarias para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. Ya que en el m\u00f3dulo siguiente se nos pide desarrollar una CMS, es necesario que tengamos conocimientos de programaci\u00f3n para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos.</p> Campo Detalle C\u00f3digo 0485 Nombre Progrmaci\u00f3n (256h) Duraci\u00f3n 70 horas"},{"location":"normativa19/MF0966_3/#contenidos-reducidos-100-horas","title":"Contenidos Reducidos (100 horas)","text":""},{"location":"normativa19/MF0966_3/#curso-introduccion-a-la-programacion-con-javascript-100-horas","title":"Curso: Introducci\u00f3n a la Programaci\u00f3n con JavaScript (100 horas)","text":""},{"location":"normativa19/MF0966_3/#objetivo-general","title":"Objetivo General","text":"<p>Aprender los fundamentos de la programaci\u00f3n utilizando JavaScript, con un enfoque inicial en l\u00f3gica y estructuras del lenguaje, para luego integrar con HTML en el desarrollo de p\u00e1ginas web.</p>"},{"location":"normativa19/MF0966_3/#contenidos-reducidos","title":"Contenidos Reducidos","text":""},{"location":"normativa19/MF0966_3/#unidad-1-configuracion-del-entorno-y-fundamentos-de-javascript-20-horas","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript (20 horas)","text":"<ul> <li> <p>1.1 Configuraci\u00f3n del entorno de desarrollo (5h)</p> <ul> <li>Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica.</li> <li>Uso de VSCode como editor principal.</li> <li>Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas con Node.js.</li> </ul> </li> <li> <p>1.2 Variables, tipos de datos y operadores (10h)</p> <ul> <li>Declaraci\u00f3n de variables (<code>let</code>, <code>const</code> y <code>var</code>).</li> <li>Tipos de datos primitivos: cadenas, n\u00fameros, booleanos, etc.</li> <li>Operadores b\u00e1sicos: aritm\u00e9ticos, l\u00f3gicos, y relacionales.</li> </ul> </li> <li> <p>1.3 Estructuras b\u00e1sicas de control (5h)</p> <ul> <li>Condicionales (<code>if</code>, <code>else</code>, <code>else if</code>).</li> <li>Bucles (<code>for</code>, <code>while</code>, <code>do while</code>).</li> </ul> </li> </ul> <p>Objetivo: Familiarizar a los alumnos con el entorno de desarrollo, la sintaxis b\u00e1sica de JavaScript y las estructuras fundamentales de control.</p>"},{"location":"normativa19/MF0966_3/#unidad-2-funciones-y-manejo-de-errores-20-horas","title":"Unidad 2: Funciones y Manejo de Errores (20 horas)","text":"<ul> <li>2.1 Funciones en JavaScript (12h)<ul> <li>Declaraci\u00f3n y uso de funciones.</li> <li>Par\u00e1metros y valores de retorno.</li> <li>Funciones an\u00f3nimas y flecha (<code>arrow functions</code>).</li> <li>Alcance de las variables: local y global.</li> </ul> </li> <li>2.2 Manejo de errores (3h)<ul> <li>Uso de bloques <code>try</code>, <code>catch</code> y <code>finally</code>.</li> <li>Lanzar errores con <code>throw</code>.</li> </ul> </li> <li>2.3 M\u00e9todos b\u00e1sicos de entrada/salida (5h)<ul> <li>Uso de <code>prompt</code>, <code>alert</code>, y <code>console.log</code>.</li> <li>Interacci\u00f3n b\u00e1sica con el usuario.</li> </ul> </li> </ul> <p>Objetivo: Modularizar c\u00f3digo utilizando funciones, manejar errores y trabajar con entradas/salidas b\u00e1sicas.</p>"},{"location":"normativa19/MF0966_3/#unidad-3-arrays-objetos-y-clases-30-horas","title":"Unidad 3: Arrays, Objetos y Clases (30 horas)","text":"<ul> <li>3.1 Arrays y su manipulaci\u00f3n (8h)<ul> <li>Creaci\u00f3n y uso de arrays.</li> <li>M\u00e9todos comunes: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>splice</code>, etc.</li> <li>Iteraci\u00f3n de arrays: <code>for</code>, <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>.</li> </ul> </li> <li>3.2 Objetos y su uso (7h)<ul> <li>Concepto de objeto y sus propiedades.</li> <li>Creaci\u00f3n y manipulaci\u00f3n de objetos.</li> <li>M\u00e9todos en objetos.</li> </ul> </li> <li>3.3 Clases en JavaScript (15h)<ul> <li>Declaraci\u00f3n de clases y uso.</li> <li>Constructores.</li> <li>M\u00e9todos y atributos.</li> <li>Herencia b\u00e1sica.</li> </ul> </li> </ul> <p>Objetivo: Trabajar con estructuras m\u00e1s complejas como arrays, objetos y clases para modelar datos y estructuras reales.</p>"},{"location":"normativa19/MF0966_3/#unidad-4-integracion-de-javascript-con-html-y-el-dom-20-horas","title":"Unidad 4: Integraci\u00f3n de JavaScript con HTML y el DOM (20 horas)","text":"<ul> <li>4.1 Introducci\u00f3n a HTML (5h)<ul> <li>Conceptos b\u00e1sicos de HTML.</li> <li>Uso de etiquetas comunes: <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>.</li> <li>Crear un archivo HTML b\u00e1sico.</li> </ul> </li> <li>4.2 Vinculaci\u00f3n de JavaScript con HTML (5h)<ul> <li>Uso de etiquetas <code>&lt;script&gt;</code> para enlazar archivos JavaScript.</li> <li>Ejecuci\u00f3n de c\u00f3digo JS en eventos b\u00e1sicos de HTML (<code>onClick</code>, <code>onSubmit</code>).</li> </ul> </li> <li>4.3 Introducci\u00f3n al DOM y manejo b\u00e1sico (10h)<ul> <li>\u00bfQu\u00e9 es el DOM?</li> <li>Seleccionar elementos: <code>getElementById</code>, <code>querySelector</code>.</li> <li>Modificaci\u00f3n b\u00e1sica del contenido: <code>innerHTML</code>, <code>textContent</code>.</li> <li>Manejo de eventos: <code>addEventListener</code>.</li> <li>Ejercicio pr\u00e1ctico b\u00e1sico: Crear una lista interactiva donde los usuarios puedan a\u00f1adir y eliminar elementos.</li> </ul> </li> </ul> <p>Objetivo: Introducir la integraci\u00f3n de JavaScript con HTML y la manipulaci\u00f3n b\u00e1sica del DOM para trabajar en p\u00e1ginas web din\u00e1micas.</p>"},{"location":"normativa19/MF0966_3/#unidad-5-proyecto-final-10-horas","title":"Unidad 5: Proyecto Final (10 horas)","text":"<ul> <li>5.1 Desarrollo de un proyecto b\u00e1sico<ul> <li>Crear un gestor de tareas simple:          - Permitir al usuario a\u00f1adir, editar y eliminar tareas.          - Almacenar datos temporalmente en arrays u objetos.          - Mostrar la lista de tareas en una p\u00e1gina web utilizando HTML y el DOM.          - Uso de eventos para manejar interacciones del usuario.          - Uso del DOM para actualizar la interfaz din\u00e1mica.</li> </ul> </li> </ul> <p>Objetivo: Integrar todos los conocimientos adquiridos en un proyecto pr\u00e1ctico.</p>"},{"location":"normativa19/MF0966_3/#recursos-y-herramientas","title":"Recursos y Herramientas","text":""},{"location":"normativa19/MF0966_3/#editor-y-ejecucion","title":"Editor y Ejecuci\u00f3n","text":"<ul> <li>Editor de c\u00f3digo: VSCode (con extensiones como Prettier para formato).</li> <li>Ejecuci\u00f3n: Uso de Node.js para la mayor parte del curso. En la unidad del DOM, se usar\u00e1 un navegador para vincular JavaScript con HTML.</li> </ul>"},{"location":"normativa19/MF0966_3/#materiales-de-apoyo","title":"Materiales de apoyo","text":"<ol> <li>MDN Web Docs (JavaScript):</li> <li>Gu\u00eda de JavaScript.</li> <li>FreeCodeCamp:</li> <li>Curso de JavaScript B\u00e1sico.</li> <li>Ejercicios pr\u00e1cticos interactivos:</li> <li>Exercism.io - JavaScript.</li> <li>Codewars.</li> </ol>"},{"location":"normativa19/MF0966_3/#distribucion-del-tiempo","title":"Distribuci\u00f3n del Tiempo","text":"Unidad Did\u00e1ctica Horas Unidad 1: Fundamentos de JavaScript 20 Unidad 2: Funciones y Manejo de Errores 20 Unidad 3: Arrays, Objetos y Clases 30 Unidad 4: Integraci\u00f3n de JS con HTML y DOM 20 Unidad 5: Proyecto Final 10 Total 100"},{"location":"normativa19/MF0967_3/","title":"M\u00f3dulo Formativo: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos","text":"Campo Detalle C\u00f3digo MF0967_3 Nombre Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos Nivel 3 Duraci\u00f3n 200 horas Asociado a la Unidad de Competencia UC0967_3: Crear y gestionar repositorios de contenidos"},{"location":"normativa19/MF0967_3/#unidad-formativa-1-repositorios-de-contenidos","title":"Unidad Formativa 1: Repositorios de contenidos","text":"Campo Detalle C\u00f3digo UF2216 Nombre Repositorios de contenidos Duraci\u00f3n 70 horas Referente de Competencia RP1: Dise\u00f1ar repositorios de contenidos"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Crear repositorios de contenidos conforme a las especificaciones funcionales recibidas y est\u00e1ndares de desarrollo software.</p> <ul> <li>CE1.1: Identificar los est\u00e1ndares de desarrollo y normativas aplicables al dise\u00f1o de repositorios.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, realizar las funciones de creaci\u00f3n de repositorios para cubrir las necesidades de gesti\u00f3n de informaci\u00f3n, incluyendo:</li> <li>Crear y archivar informaci\u00f3n en el repositorio utilizando los descriptores establecidos en el dise\u00f1o del repositorio y normativas est\u00e1ndares del mercado.</li> <li>Almacenar el repositorio en almacenes de datos de acuerdo a planos de bases de datos, documentos de marcas extendidas, entre otros.</li> <li>Documentar la creaci\u00f3n del repositorio conforme a las especificaciones establecidas y normativas est\u00e1ndares del mercado.</li> <li>CE1.3: En un supuesto pr\u00e1ctico, debidamente caracterizado, crear repositorios utilizando lenguajes espec\u00edficos de marcas extendidas y herramientas de desarrollo software que incluyan:</li> <li>Reconocimiento de los diferentes tipos de elementos, atributos, declaraciones de entidades y otros elementos de marcado existentes en el repositorio.</li> <li>Uso de hojas de estilo para permitir homogeneizar contenidos en los repositorios.</li> <li>Utilizaci\u00f3n de esquemas de repositorio que permitan, entre otras funcionalidades, el desarrollo de vocabularios comunes para mejorar la interoperabilidad entre aplicaciones e intercambio de datos.</li> <li>Incorporaci\u00f3n de funcionalidades ling\u00fc\u00edsticas de la informaci\u00f3n contenida en el repositorio, para garantizar la accesibilidad y usabilidad de dicha informaci\u00f3n.</li> <li>Construcci\u00f3n del repositorio de acuerdo a un dise\u00f1o establecido para su implementaci\u00f3n.</li> <li>Documentaci\u00f3n de todas las fases de creaci\u00f3n y dise\u00f1o del repositorio.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Repositorios de contenidos</p> <ul> <li>Conceptos b\u00e1sicos.</li> <li>Incorporaci\u00f3n de contenidos:<ul> <li>Adquisici\u00f3n.</li> <li>Agregaci\u00f3n.</li> <li>Creaci\u00f3n.</li> </ul> </li> <li>Asociaciones entre contenidos:<ul> <li>Jerarqu\u00edas, taxonom\u00edas.</li> <li>\u00cdndices.</li> <li>Referencias cruzadas.</li> </ul> </li> <li>Ciclos de vida de los documentos.</li> <li>Flujos de trabajo.</li> <li>Versionado de contenidos.</li> <li>Check In/Check Out:<ul> <li>Herramientas diff/merge.</li> </ul> </li> <li>B\u00fasqueda y localizaci\u00f3n de la informaci\u00f3n.</li> <li>Publicaci\u00f3n:<ul> <li>Sindicaci\u00f3n.</li> <li>Servicios Web.</li> </ul> </li> <li>Seguridad.</li> </ul> </li> <li> <p>Estructura interna de un repositorio</p> <ul> <li>Almacenamiento de la informaci\u00f3n:<ul> <li>Base de datos.</li> <li>Ficheros.</li> </ul> </li> <li>Est\u00e1ndares de desarrollo:<ul> <li>CMIS.</li> <li>JSR-168.</li> <li>JSR-170.</li> <li>JSR-283.</li> </ul> </li> </ul> </li> <li> <p>Metadatos</p> <ul> <li>Concepto.</li> <li>Ontolog\u00eda RDF.</li> <li>Metadatos Dublin Core.</li> <li>Metadatos XMP (Adobe's Extensible Metadata Platform).</li> <li>Metadatos IPTC.</li> </ul> </li> <li> <p>Sistemas de gesti\u00f3n de contenidos</p> <ul> <li>Sistemas de gesti\u00f3n de bit\u00e1coras (Blogs).</li> <li>Sistemas Wiki.</li> <li>Sistemas Portales.</li> </ul> </li> <li> <p>Sistemas de gesti\u00f3n del aprendizaje (LMS)</p> <ul> <li>Descripci\u00f3n general.</li> <li>Est\u00e1ndares IMS.</li> <li>Est\u00e1ndar IEEE LOM.</li> <li>Iniciativa ADL SCORM.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#unidad-formativa-2-lenguaje-xml","title":"Unidad Formativa 2: Lenguaje XML","text":"Campo Detalle C\u00f3digo UF2217 Nombre Lenguaje XML Duraci\u00f3n 80 horas Referente de Competencia RP2: Esta unidad formativa se corresponde con la RP2"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Desarrollar componentes software que permitan la explotaci\u00f3n de contenidos de repositorios, utilizando lenguajes espec\u00edficos y est\u00e1ndares de desarrollo software.</p> <ul> <li>CE1.1: Identificar los est\u00e1ndares de desarrollo software utilizando lenguajes espec\u00edficos que permitan la explotaci\u00f3n de contenidos de repositorios, para permitir su transformaci\u00f3n, publicaci\u00f3n e intercambios de contenidos entre los sistemas de informaci\u00f3n seg\u00fan unas especificaciones funcionales dadas.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, dadas unas necesidades de explotaci\u00f3n del repositorio de informaci\u00f3n, construir componentes software que permitan la explotaci\u00f3n de contenidos de repositorios, utilizando lenguajes espec\u00edficos y est\u00e1ndares de desarrollo software que desarrollen las siguientes funcionalidades:</li> <li>Transformar contenidos del repositorio que permitan ser presentados y publicados seg\u00fan normas est\u00e1ndares especificadas.</li> <li>Acceder a partes del repositorio que aseguren la extracci\u00f3n de los contenidos necesarios para el desarrollo del componente software.</li> <li>Crear enlaces entre contenidos del repositorio que aseguren la conectividad entre los diferentes recursos del repositorio.</li> <li>Permitir accesos a la estructura interna del repositorio para su utilizaci\u00f3n en la explotaci\u00f3n de contenidos.</li> <li>CE1.3: Interpretar la documentaci\u00f3n inherente a los lenguajes espec\u00edficos utilizados en la creaci\u00f3n de repositorios de contenidos, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, utiliz\u00e1ndola de ayuda en el desarrollo de componentes.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Definici\u00f3n de documentos XML</p> <ul> <li>Elementos.</li> <li>Atributos.</li> <li>Documentos bien formados.</li> <li>Codificaci\u00f3n y juegos de caracteres.</li> <li>Entidades.</li> <li>Comentarios.</li> <li>Inclusi\u00f3n de datos no XML.</li> <li>Espacios de nombres.</li> </ul> </li> <li> <p>Validaci\u00f3n mediante DTD</p> <ul> <li>Declaraciones de elementos:<ul> <li>PCDATA.</li> <li>Elementos hijos.</li> <li>Secuencias.</li> <li>N\u00famero de hijos.</li> <li>Opciones.</li> <li>Par\u00e9ntesis.</li> <li>Contenido mixto.</li> <li>Elementos vac\u00edos.</li> <li>ANY.</li> </ul> </li> <li>Declaraciones de atributo:<ul> <li>CDATA.</li> <li>NMTOKEN.</li> <li>NMTOKENS.</li> <li>Enumeraci\u00f3n.</li> <li>ID.</li> <li>IDREF.</li> <li>IDREFS.</li> <li>ENTITY.</li> <li>ENTITIES.</li> <li>NOTATION.</li> </ul> </li> <li>Declaraciones de identidad general.</li> <li>Entidades generales externas analizadas.</li> <li>Notaciones y entidades exteriores sin analizar.</li> <li>Entidades de par\u00e1metro.</li> <li>Inclusi\u00f3n condicional.</li> </ul> </li> <li> <p>Esquemas XML</p> <ul> <li>Organizaci\u00f3n del documento.</li> <li>Anotaciones.</li> <li>Declaraciones de elementos.</li> <li>Declaraciones de atributos.</li> <li>Tipos complejos.</li> <li>Elementos vac\u00edos.</li> <li>Definici\u00f3n de tipos simples.</li> <li>Uso de grupos.</li> <li>Inclusi\u00f3n de declaraciones externas.</li> <li>Modificaci\u00f3n de declaraciones externas.</li> <li>Importaci\u00f3n de esquemas de otros espacios de nombre.</li> <li>Tipos complejos derivados.</li> </ul> </li> <li> <p>Acceso a la informaci\u00f3n de documentos XML</p> <ul> <li>XPath.</li> <li>XLink.</li> <li>XPointer.</li> <li>XQL.</li> </ul> </li> <li> <p>Transformaci\u00f3n de documentos XML</p> <ul> <li>CSS.</li> <li>XSL / XSL-FO.</li> <li>XSLT.</li> </ul> </li> <li> <p>Otros lenguajes a utilizar con documentos XML</p> <ul> <li>XML Base.</li> <li>XInclude.</li> <li>XML Information Set.</li> </ul> </li> <li> <p>Aplicaciones del lenguaje XML</p> <ul> <li>XHTML.</li> <li>REST.</li> <li>XML-RPC.</li> <li>SOAP.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#unidad-formativa-3-desarrollo-de-un-gestor-de-contenidos-cms","title":"Unidad Formativa 3: Desarrollo de un gestor de contenidos (CMS)","text":"Campo Detalle C\u00f3digo UF2218 Nombre Desarrollo de un gestor de contenidos (CMS) Duraci\u00f3n 50 horas Referente de Competencia RP3: Esta unidad formativa se corresponde con la RP3"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion_2","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Distinguir las estructuras y t\u00e9cnicas de programaci\u00f3n l\u00f3gicas para el desarrollo de componentes software, teniendo en cuenta las tecnolog\u00edas de desarrollo.</p> <ul> <li>CE1.1: Clasificar las estructuras y t\u00e9cnicas de programaci\u00f3n l\u00f3gicas est\u00e1ndares para el desarrollo de componentes software, seg\u00fan metodolog\u00edas de desarrollo existentes.</li> <li>CE1.2: Identificar las fases que constituyen el desarrollo de un componente software, para su posterior creaci\u00f3n de acuerdo a herramientas y lenguajes especificados.</li> <li>CE1.3: Clasificar los elementos que constituyen un componente software, para su aplicaci\u00f3n en el desarrollo del mismo seg\u00fan unos dise\u00f1os dados.</li> <li>CE1.4: Explicar los m\u00e9todos para utilizar o usar librer\u00edas de aplicaciones desde los lenguajes de programaci\u00f3n, para permitir la explotaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n seg\u00fan especificaciones de dise\u00f1o y funcionales.</li> <li>CE1.5: Identificar los modelos de librer\u00edas de aplicaciones est\u00e1ndares del mercado que permiten el acceso, consulta y extracci\u00f3n de informaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n, para ser utilizados en el desarrollo de componentes utilizando lenguajes de programaci\u00f3n seg\u00fan especificaciones de dise\u00f1o y funcionales dadas.</li> </ul> <p>C2: Elaborar elementos software que integren o exploren contenidos de otros repositorios, utilizando interfaz de aplicaciones est\u00e1ndares del mercado para acceder a los repositorios de datos.</p> <ul> <li>CE2.1: Elaborar elementos software que cumplan la funcionalidad de interpretar los contenidos de los repositorios, para proporcionar dicha informaci\u00f3n seg\u00fan unos requerimientos especificados.</li> <li>CE2.2: Usar los modelos de librer\u00edas de aplicaciones (API) est\u00e1ndares del mercado (modelos de objetos de documento \u00abDOM\u00bb, modelos basados en eventos \u00abSAX\u00bb, entre otros) que permiten el acceso, consulta y extracci\u00f3n de informaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n, para ser utilizados en el desarrollo de componentes utilizando lenguajes de programaci\u00f3n seg\u00fan especificaciones funcionales y de dise\u00f1o dadas.</li> <li>CE2.3: Verificar y depurar los elementos software elaborados asegurando que se obtienen los contenidos especificados.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos_2","title":"Contenidos","text":"<ol> <li> <p>Proyectos de implementaci\u00f3n</p> <ul> <li>Metodolog\u00eda de desarrollo.</li> <li>An\u00e1lisis de requerimientos.</li> <li>Descripci\u00f3n funcional.</li> <li>Dise\u00f1o de arquitectura.</li> <li>Dise\u00f1o t\u00e9cnico.</li> <li>Programaci\u00f3n:<ul> <li>Pruebas unitarias.</li> </ul> </li> <li>Auditor\u00eda funcional.</li> <li>Auditor\u00eda t\u00e9cnica:<ul> <li>Revisi\u00f3n de c\u00f3digo.</li> <li>M\u00e9tricas.</li> <li>Pruebas de rendimiento.</li> </ul> </li> <li>Despliegue.</li> <li>Liberaci\u00f3n.</li> </ul> </li> <li> <p>Entorno tecnol\u00f3gico</p> <ul> <li>Plataformas de servicios CMS.</li> <li>Adecuaci\u00f3n. Customizaci\u00f3n.</li> <li>Desarrollo de nuevos componentes:<ul> <li>Especificaci\u00f3n. Interfaz.</li> </ul> </li> <li>Implementaci\u00f3n:<ul> <li>Lenguaje de programaci\u00f3n.</li> <li>Librer\u00edas. APIs.</li> </ul> </li> <li>Documentaci\u00f3n.</li> </ul> </li> <li> <p>Modelos de procesamiento XML</p> <ul> <li>Procesamiento de XML basado en texto.</li> <li>Procesamiento XML dirigido por eventos.</li> <li>Procesamiento XML basado en \u00e1rboles.</li> <li>Procesamiento basado en la extracci\u00f3n.</li> <li>Transformaciones.</li> <li>Abstracci\u00f3n de XML.</li> <li>Est\u00e1ndares y extensiones.</li> </ul> </li> <li> <p>Modelo de objeto de documento (DOM)</p> <ul> <li>Estructura de DOM Core.</li> <li>Node y otras interfaces gen\u00e9ricas.</li> <li>Nodos estructurales.</li> <li>Nodos de contenido.</li> <li>Interfaz DOMImplementation.</li> <li>Interfaces de DOM Level 3.</li> </ul> </li> <li> <p>Modelo basado en eventos (SAX)</p> <ul> <li>Interfaz ContentHandler.</li> <li>Opciones y propiedades.</li> <li>Filtros.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<p>Secuencia:</p> <ul> <li>Para acceder a la Unidad Formativa 2 debe haberse superado la Unidad Formativa 1.</li> <li>Para acceder a la Unidad Formativa 3 deben haberse superado las Unidades Formativas 1 y 2.</li> </ul> <p>Criterios de acceso para los alumnos:</p> <p>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</p>"},{"location":"normativa19/MF0968_3/","title":"M\u00f3dulo Formativo: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n","text":"Campo Detalle C\u00f3digo MF0968_3 Nombre Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n Nivel 3 Duraci\u00f3n 100 horas Unidad de Competencia Asociada UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n"},{"location":"normativa19/MF0968_3/#unidad-formativa-1-gestion-y-control-de-los-sistemas-de-informacion","title":"Unidad Formativa 1: Gesti\u00f3n y control de los sistemas de informaci\u00f3n","text":"Campo Detalle C\u00f3digo UF1643 Nombre Gesti\u00f3n y control de los sistemas de informaci\u00f3n Duraci\u00f3n 70 horas Referente de Competencia Esta unidad formativa se corresponde con la RP1, RP2 y RP3"},{"location":"normativa19/MF0968_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Determinar los accesos al sistema de gesti\u00f3n de informaci\u00f3n utilizando herramientas espec\u00edficas, seg\u00fan unas necesidades y especificaciones funcionales dadas.</p> <ul> <li>CE1.1: Describir las funcionalidades y caracter\u00edsticas de un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.2: Identificar los tipos de sistemas de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.3: Relacionar los componentes o elementos de un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.4: Definir las pol\u00edticas de acceso de los usuarios a los recursos del sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.5: Determinar los privilegios asignados a los usuarios y otros elementos del sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.6: En un supuesto pr\u00e1ctico, determinar los par\u00e1metros de seguridad existentes en el sistema de gesti\u00f3n de informaci\u00f3n.</li> </ul> <p>C2: Aplicar procedimientos de auditor\u00eda y resoluci\u00f3n de incidencias en el sistema de gesti\u00f3n de informaci\u00f3n, seg\u00fan unas necesidades dadas.</p> <ul> <li>CE2.1: En un supuesto pr\u00e1ctico, aplicar procedimientos de auditor\u00eda para obtener informaci\u00f3n inherente al acceso y explotaci\u00f3n del sistema gestor de informaci\u00f3n.</li> <li>CE2.2: Aplicar los par\u00e1metros de rendimiento establecidos en el sistema gestor de informaci\u00f3n.</li> <li>CE2.3: Identificar los tipos de incidencias que pueden ocurrir en el sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE2.4: Identificar los procesos de control de trazabilidad.</li> <li>CE2.5: Documentar las incidencias ocurridas y su resoluci\u00f3n.</li> </ul> <p>C3: Mantener los procesos de flujo de informaci\u00f3n en el sistema de gesti\u00f3n de informaci\u00f3n, de acuerdo a unas especificaciones dadas.</p> <ul> <li>CE3.1: Identificar las caracter\u00edsticas de los flujos de informaci\u00f3n en un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE3.2: Utilizar herramientas espec\u00edficas inherentes al sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE3.3: En un supuesto pr\u00e1ctico, realizar el mantenimiento de los procesos de flujo de informaci\u00f3n.</li> <li>CE3.4: Utilizar las herramientas de construcci\u00f3n de flujos de informaci\u00f3n.</li> <li>CE3.5: Identificar y proteger los registros y contenidos corporativos.</li> <li>CE3.6: Interpretar la documentaci\u00f3n t\u00e9cnica inherente a las herramientas utilizadas.</li> </ul>"},{"location":"normativa19/MF0968_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Caracter\u00edsticas y elementos de un sistema de gesti\u00f3n de la informaci\u00f3n</p> <ul> <li>Objetivo: Alineaci\u00f3n con el negocio.</li> <li>Proceso Din\u00e1mico: mejora continua (Planificar, Hacer, Verificar, Actuar).</li> <li>Factores influyentes:</li> <li>Internos.</li> <li>Externos.</li> <li>Actores:</li> <li>Personas.</li> <li>Datos-Informaci\u00f3n-conocimiento.</li> <li>Recursos materiales (infraestructuras, sedes, tecnolog\u00eda).</li> <li>Actividades-Procedimientos o t\u00e9cnicas de trabajo.</li> <li>Organizaci\u00f3n:</li> <li>Gobierno corporativo.</li> <li>Mejores pr\u00e1cticas para la gesti\u00f3n de las tecnolog\u00edas de la informaci\u00f3n.</li> <li>Comit\u00e9 de estrategia de TI:<ul> <li>Scorecard balanceado est\u00e1ndar de TI.</li> <li>Gobierno de seguridad de informaci\u00f3n.</li> </ul> </li> <li>Estructura organizativa de la empresa.</li> <li>Estrategia de sistemas de informaci\u00f3n:<ul> <li>Planificaci\u00f3n estrat\u00e9gica.</li> <li>Comit\u00e9 de direcci\u00f3n.</li> </ul> </li> </ul> </li> <li> <p>Tipos de sistema de gesti\u00f3n de informaci\u00f3n y gestores de datos</p> <ul> <li>Atendiendo a Objetivos:</li> <li>Sistemas Competitivos.</li> <li>Sistemas Cooperativos.</li> <li>Desde un punto de vista empresarial:</li> <li>Sistema de procesamiento de transacciones (TPS).</li> <li>Sistemas de informaci\u00f3n gerencial (MIS).</li> <li>Sistemas de soporte a decisiones (DSS).</li> <li>Sistemas de informaci\u00f3n ejecutiva (EIS).</li> <li>Sistemas de automatizaci\u00f3n de oficinas (OAS).</li> <li>Sistema Planificaci\u00f3n de Recursos (ERP).</li> <li>Sistema experto (SE).</li> <li>Seg\u00fan el entorno de aplicaci\u00f3n:</li> <li>Entorno transaccional.</li> <li>Entorno decisional.</li> <li>Tipos de DBMS:</li> <li>Seg\u00fan modelo de datos:<ul> <li>Sistemas gestores de datos relacionales.</li> <li>Sistemas gestores de datos orientados a objetos.</li> <li>Sistemas gestores de datos objeto-relacionales.</li> </ul> </li> <li>Seg\u00fan n\u00famero de usuarios:<ul> <li>Monousuario.</li> <li>Multiusuario.</li> </ul> </li> <li>Seg\u00fan n\u00famero de sitios:<ul> <li>Centralizado.</li> <li>Distribuido.</li> </ul> </li> <li>Arquitectura de tres esquemas:<ul> <li>Nivel Interno o f\u00edsico.</li> <li>Nivel Conceptual.</li> <li>Nivel Externo o de Vistas.</li> </ul> </li> <li>Independencia de datos:<ul> <li>L\u00f3gica.</li> <li>F\u00edsica.</li> </ul> </li> <li>Consultas a base de datos. Lenguajes:<ul> <li>Seg\u00fan nivel.</li> <li>Seg\u00fan \u00e1rea:<ul> <li>Lenguaje para definir vistas.</li> <li>Lenguaje para definir datos.</li> <li>Lenguaje para definir almacenamiento.</li> <li>Lenguaje para manipular datos.</li> </ul> </li> </ul> </li> <li>Transacciones:<ul> <li>Atomicidad.</li> <li>Consistencia.</li> <li>Isolation (aislamiento).</li> <li>Durabilidad.</li> </ul> </li> <li>Interfaces de usuario:<ul> <li>Interprete de comandos:</li> <li>Formularios.</li> <li>Interfaces gr\u00e1ficas.</li> <li>Interfaces en Lenguaje natural.</li> </ul> </li> <li>SGBD:<ul> <li>Libres.</li> <li>Comerciales.</li> <li>No libres y gratuitos.</li> </ul> </li> </ul> </li> <li> <p>Gesti\u00f3n de los procesos de control de trazabilidad</p> <ul> <li>Controles de aplicaci\u00f3n:</li> <li>Controles de entrada/origen.</li> <li>Procedimientos y controles de procesado de datos.</li> <li>Controles de salida.</li> <li>Control cumplimiento objetivos proceso de negocio.</li> </ul> </li> <li> <p>Auditor\u00eda en los sistemas de informaci\u00f3n</p> <ul> <li>Auditor\u00eda a los controles de aplicaci\u00f3n:</li> <li>Flujo de las transacciones a trav\u00e9s del sistema.</li> <li>Modelo de estudio de riesgos para analizar los controles de las aplicaciones.</li> <li>Observar y probar los procedimientos realizados por los usuarios.</li> <li>Prueba de integridad de los datos.</li> <li>Auditor\u00eda continua en l\u00ednea.</li> <li>T\u00e9cnicas de auditor\u00eda en l\u00ednea.</li> <li>Auditor\u00eda del desarrollo, adquisici\u00f3n y mantenimiento de sistemas:</li> <li>Administraci\u00f3n / gesti\u00f3n de proyectos.</li> <li>Estudio de factibilidad/viabilidad.</li> <li>Definici\u00f3n de los requerimientos.</li> <li>Proceso de adquisici\u00f3n del software.</li> <li>Dise\u00f1o y desarrollo detallado.</li> <li>Etapa de implementaci\u00f3n.</li> <li>Revisi\u00f3n posterior a la implementaci\u00f3n.</li> <li>Procedimientos de cambios al sistema y proceso de migraci\u00f3n de programas.</li> <li>Auditor\u00eda de la infraestructura y de las operaciones:</li> <li>Revisiones de hardware.</li> <li>Revisiones del sistema operativo.</li> <li>Revisiones de la base de datos.</li> <li>Revisiones de infraestructura e implementaci\u00f3n de la red.</li> <li>Revisiones de control operativo de redes.</li> <li>Revisiones de las operaciones de SI.</li> <li>Operaciones lights-out.</li> <li>Revisiones de reporte de problemas por la gerencia.</li> <li>Revisiones de disponibilidad de hardware y de reporte de utilizaci\u00f3n.</li> <li>Revisi\u00f3n de cronogramas.</li> </ul> </li> <li> <p>Par\u00e1metros de rendimiento en el sistema y procedimientos de resoluci\u00f3n de incidencias</p> <ul> <li>Par\u00e1metros de hardware:</li> <li>Utilizaci\u00f3n de la Memoria, CPU, Utilizaci\u00f3n de disco.</li> <li>Par\u00e1metros de software:</li> <li>Estad\u00edsticas del Administrador de Buffer.</li> <li>Estad\u00edsticas de Conexi\u00f3n.</li> <li>Detalles Cache.</li> <li>Detalles de Bloqueos.</li> <li>Detalles de M\u00e9todos de Acceso.</li> <li>Detalles de la Base de Datos.</li> <li>Entornos de prueba:</li> <li>Prueba de Unidad.</li> <li>Prueba de Interfaz o de integraci\u00f3n.</li> <li>Prueba del Sistema.</li> <li>Pruebas de Recuperaci\u00f3n.</li> <li>Pruebas de Seguridad.</li> <li>Pruebas de Estr\u00e9s /Volumen.</li> <li>Pruebas de Rendimiento.</li> <li>Prueba de Aceptaci\u00f3n Final.</li> <li>T\u00e9cnicas y procedimientos de resoluci\u00f3n de incidencias en un sistema.</li> <li>Visi\u00f3n general de Gesti\u00f3n y respuesta a Incidentes.</li> <li>Conceptos de gesti\u00f3n de incidentes.</li> <li>Objetivos en la gesti\u00f3n de incidentes.</li> <li>M\u00e9tricas e indicadores de la gesti\u00f3n de incidentes.</li> <li>Definici\u00f3n de los procedimientos de gesti\u00f3n de incidentes.</li> <li>Desarrollo de un plan de respuesta a incidentes.</li> <li>Desarrollo de planes de respuesta y recuperaci\u00f3n.</li> <li>Pruebas de los planes de respuesta y recuperaci\u00f3n.</li> <li>Ejecuci\u00f3n de los planes de respuesta y recuperaci\u00f3n.</li> <li>Documentaci\u00f3n de eventos.</li> <li>Decisiones posteriores al evento.</li> <li>ITIL-ISO/IEC 20000.</li> </ul> </li> <li> <p>Caracter\u00edsticas de los procesos de flujo y ciclo de vida de la informaci\u00f3n. Componentes y herramientas</p> <ul> <li>Gesti\u00f3n del riesgo:</li> <li>Visi\u00f3n General.</li> <li>Conceptos de al GR en Seguridad de la Informaci\u00f3n.</li> <li>Implantaci\u00f3n de la GR.</li> <li>Metodolog\u00eda para la evaluaci\u00f3n y an\u00e1lisis de riesgos.</li> <li>Evaluaci\u00f3n del riesgo.</li> <li>Controles y contramedidas.</li> <li>Tiempo Objetivo de recuperaci\u00f3n.</li> <li>Integraci\u00f3n en los procesos de Ciclo de Vida.</li> <li>Niveles m\u00ednimos de Control.</li> <li>Monitorizaci\u00f3n.</li> <li>Capacitaci\u00f3n y concienciaci\u00f3n.</li> <li>ISO/IEC 27001.</li> <li>Desarrollo de aplicaciones:</li> <li>Enfoque tradicional m\u00e9todo del ciclo de vida del desarrollo de sistemas.</li> <li>Sistemas integrados de gesti\u00f3n / administraci\u00f3n de recursos.</li> <li>Descripci\u00f3n de las etapas tradicionales de SDLC.</li> <li>Estudio de factibilidad / viabilidad.</li> <li>Definici\u00f3n de requerimientos.</li> <li>Diagramas de entidad - relaci\u00f3n.</li> <li>Adquisici\u00f3n de software.</li> <li>Dise\u00f1o.</li> <li>Desarrollo.</li> <li>Implementaci\u00f3n.</li> <li>Revisi\u00f3n posterior a la implementaci\u00f3n.</li> <li>Estrategias alternativas para el desarrollo de aplicaciones.</li> <li>ISO/IEC 15504.</li> <li>CMMI.</li> <li>METRICA 3:<ul> <li>Planificaci\u00f3n de Sistemas de Informaci\u00f3n:<ul> <li>Cat\u00e1logo de requisitos de PSI.</li> <li>Arquitectura de informaci\u00f3n.</li> </ul> </li> <li>Desarrollo de Sistemas de Informaci\u00f3n:<ul> <li>Estudio de Viabilidad del Sistema (EVS),</li> <li>An\u00e1lisis del Sistema de Informaci\u00f3n (ASI),</li> <li>Dise\u00f1o del Sistema de Informaci\u00f3n (DSI),</li> <li>Construcci\u00f3n del Sistema de Informaci\u00f3n (CSI).</li> <li>Implantaci\u00f3n y Aceptaci\u00f3n del Sistema (IAS).</li> <li>Mantenimiento de Sistemas de Informaci\u00f3n.</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"normativa19/MF0968_3/#unidad-formativa-2-canales-de-distribucion-y-publicacion-utilizados-en-los-sistemas-gestores-de-informacion","title":"Unidad Formativa 2: Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n","text":"Campo Detalle C\u00f3digo UF1644 Nombre Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n Duraci\u00f3n 30 horas Referente de Competencia Esta unidad formativa se corresponde con la RP4"},{"location":"normativa19/MF0968_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Publicar los contenidos del sistema de informaci\u00f3n utilizando los canales de distribuci\u00f3n de acuerdo a unas necesidades funcionales dadas.</p> <ul> <li>CE1.1: Seleccionar los contenidos del sistema de informaci\u00f3n siguiendo unas instrucciones especificadas.</li> <li>CE1.2: Elegir los canales de distribuci\u00f3n utilizados por el sistema gestor de informaci\u00f3n, para la distribuci\u00f3n de los contenidos de los repositorios o de fuentes externas, seg\u00fan unas necesidades dadas.</li> <li>CE1.3: Usar las herramientas de publicaci\u00f3n de contenidos espec\u00edficas a los canales de distribuci\u00f3n para la comunicaci\u00f3n de los mismos seg\u00fan unas especificaciones funcionales.</li> <li>CE1.4: Aplicar los procedimientos de publicaci\u00f3n y administraci\u00f3n de contenidos, seg\u00fan el formato y tipo de informaci\u00f3n, para permitir su distribuci\u00f3n de acuerdo al dise\u00f1o especificado.</li> </ul>"},{"location":"normativa19/MF0968_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Canales de distribuci\u00f3n de informaci\u00f3n. Clasificaci\u00f3n y tipos. Portales de informaci\u00f3n</p> <ul> <li>Clasificaci\u00f3n de la informaci\u00f3n:<ul> <li>Qui\u00e9n.</li> <li>Cu\u00e1ndo.</li> <li>C\u00f3mo.</li> </ul> </li> <li>Propietario de la informaci\u00f3n.</li> <li>Responsable de comunicaci\u00f3n.</li> <li>Figura de Community Manager.</li> <li>Gestores de contenidos:<ul> <li>Internos.</li> <li>Externos.</li> </ul> </li> <li>Caracter\u00edsticas, lenguaje de programaci\u00f3n, licencias (Joomla, Drupal).</li> <li>Clasificaci\u00f3n por uso y funcionalidades:<ul> <li>Blogs.</li> <li>Foros.</li> <li>Wikis.</li> <li>Ense\u00f1anza.</li> <li>Comercio electr\u00f3nico (plataforma de gesti\u00f3n de usuarios, cat\u00e1logo, compras y pagos).</li> <li>Publicaciones digitales.</li> <li>Intranet.</li> <li>Extranet.</li> <li>Web 2.0.</li> <li>Redes Sociales.</li> </ul> </li> </ul> </li> <li> <p>Herramientas de comunicaci\u00f3n de contenidos en los sistemas gestores de informaci\u00f3n. Otros procedimientos de publicaci\u00f3n y distribuci\u00f3n utilizando aplicaciones inform\u00e1ticas</p> <ul> <li>Correo electr\u00f3nico (subscripci\u00f3n).</li> <li>Agregador de noticias:<ul> <li>Atom.</li> <li>RSS.</li> <li>Ejemplos.</li> </ul> </li> <li>Agregadores centralizados en servicios web:<ul> <li>Google Reader.</li> <li>My Yahoo!.</li> <li>Bloglines.</li> <li>Netvibes.</li> <li>IGoogle.</li> </ul> </li> <li>Agregadores de escritorio:<ul> <li>FeedReader (Windows).</li> <li>NetNewsWire (Mac).</li> <li>Liferea (Linux).</li> </ul> </li> <li>Redifusi\u00f3n - Sindicaci\u00f3n Web.</li> <li>SMS/MMS.</li> <li>Redes Sociales (fan, seguidores).</li> <li>Generaci\u00f3n de alertas/avisos.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0968_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<p>Secuencia:</p> <ul> <li>Para acceder a la Unidad Formativa 2, debe haberse superado la Unidad Formativa 1.</li> </ul> <p>Criterios de acceso para los alumnos:</p> <p>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</p>"},{"location":"normativa19/MP0459/","title":"M\u00f3dulo de Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n","text":"Campo Detalle C\u00f3digo MP0459 Nombre Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n Duraci\u00f3n 80 horas"},{"location":"normativa19/MP0459/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Colaborar en el desarrollo, an\u00e1lisis y gesti\u00f3n de sistemas de informaci\u00f3n.</p> <ul> <li>CE1.1: Analizar los requisitos de desarrollo de los gestores de contenidos corporativos.</li> <li>CE1.2: Evaluar el an\u00e1lisis y dise\u00f1o de los sistemas conforme a los requisitos establecidos.</li> <li>CE1.3: Verificar el uso y reutilizaci\u00f3n de componentes software en la realizaci\u00f3n de los gestores de contenidos corporativos.</li> <li>CE1.4: Apoyar en el desarrollo y mantenimiento de los sistemas que soportan los gestores de contenidos.</li> <li>CE1.5: Colaborar en la realizaci\u00f3n de documentaci\u00f3n de los sistemas que soportan los gestores de contenidos.</li> <li>CE1.6: Investigar nuevas herramientas o actualizaciones de las existentes para mejorar la productividad en el desarrollo.</li> <li>CE1.7: Facilitar la coordinaci\u00f3n entre los grupos de dise\u00f1o, desarrollo, instalaci\u00f3n y despliegue de los gestores de contenido.</li> </ul> <p>C2: Auditar el uso y seguridad de los sistemas de informaci\u00f3n.</p> <ul> <li>CE2.1: Clasificar los gestores de contenidos seg\u00fan su criticidad y valor para la empresa.</li> <li>CE2.2: Proporcionar apoyo en la realizaci\u00f3n de auditor\u00edas de software para la verificaci\u00f3n y mejora de la calidad y seguridad de los gestores de contenidos.</li> <li>CE2.3: Realizar pruebas seg\u00fan normativa y criterios de calidad establecidos en la empresa.</li> <li>CE2.4: Proporcionar asistencia en la aplicaci\u00f3n de las medidas de mejora de la calidad y seguridad de los gestores de contenidos.</li> <li>CE2.5: Reportar informaci\u00f3n a la direcci\u00f3n para un correcto gobierno y gesti\u00f3n de los sistemas de informaci\u00f3n.</li> </ul> <p>C3: Participar en los procesos de trabajo de la empresa, siguiendo las normas e instrucciones establecidas en el centro de trabajo.</p> <ul> <li>CE3.1: Comportarse responsablemente tanto en las relaciones humanas como en los trabajos a realizar.</li> <li>CE3.2: Respetar los procedimientos y normas del centro de trabajo.</li> <li>CE3.3: Emprender con diligencia las tareas seg\u00fan las instrucciones recibidas, tratando de que se adecuen al ritmo de trabajo de la empresa.</li> <li>CE3.4: Integrarse en los procesos de producci\u00f3n del centro de trabajo.</li> <li>CE3.5: Utilizar los canales de comunicaci\u00f3n establecidos.</li> <li>CE3.6: Respetar en todo momento las medidas de prevenci\u00f3n de riesgos, salud laboral y protecci\u00f3n del medio ambiente.</li> </ul>"},{"location":"normativa19/MP0459/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Planificar, definir y crear un gestor de contenidos intranet-extranet</p> <ul> <li>Definici\u00f3n de requisitos funcionales.</li> <li>Valoraci\u00f3n de metodolog\u00edas de dise\u00f1o.</li> <li>Elecci\u00f3n de arquitectura de informaci\u00f3n.</li> </ul> </li> <li> <p>Desarrollo del gestor de contenidos</p> <ul> <li>Estudio de viabilidad.</li> <li>An\u00e1lisis.</li> <li>Dise\u00f1o.</li> <li>Construcci\u00f3n.</li> <li>Implantaci\u00f3n.</li> </ul> </li> <li> <p>Mantenimiento y operaci\u00f3n del gestor de contenidos</p> <ul> <li>Realizaci\u00f3n de planes de auditor\u00eda.</li> <li>Revisi\u00f3n de la seguridad.</li> <li>An\u00e1lisis del rendimiento.</li> <li>Evaluaci\u00f3n del nivel de integraci\u00f3n y optimizaci\u00f3n.</li> <li>Identificaci\u00f3n de aspectos de mejora.</li> <li>Realizaci\u00f3n de informes.</li> </ul> </li> <li> <p>Integraci\u00f3n y comunicaci\u00f3n con los usuarios</p> <ul> <li>Gesti\u00f3n de accesos y publicaci\u00f3n.</li> <li>Normativa y procedimientos de uso.</li> <li>Canales de retroalimentaci\u00f3n, quejas, mejoras.</li> </ul> </li> <li> <p>Integraci\u00f3n y comunicaci\u00f3n en el centro de trabajo</p> <ul> <li>Comportamiento responsable en el centro de trabajo.</li> <li>Respeto a los procedimientos y normas del centro de trabajo.</li> <li>Interpretaci\u00f3n y ejecuci\u00f3n con diligencia de las instrucciones recibidas.</li> <li>Reconocimiento del proceso productivo de la organizaci\u00f3n.</li> <li>Utilizaci\u00f3n de los canales de comunicaci\u00f3n establecidos en el centro de trabajo.</li> <li>Adecuaci\u00f3n al ritmo de trabajo de la empresa.</li> <li>Seguimiento de las normativas de prevenci\u00f3n de riesgos, salud laboral y protecci\u00f3n del medio ambiente.</li> </ul> </li> </ol>"},{"location":"normativa19/ucs/","title":"Unidades de Competencia del Certificado de Profesionalidad IFCD0211","text":""},{"location":"normativa19/ucs/#uc0966_3-consultar-y-extraer-informacion-de-distintas-plataformas-de-almacenamiento-de-datos","title":"UC0966_3: Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos","text":""},{"location":"normativa19/ucs/#rp1-interpretar-las-especificaciones-de-diseno-correspondientes-a-los-sistemas-gestores-de-datos-utilizados-por-la-organizacion-para-el-almacenamiento-de-la-informacion","title":"RP1: Interpretar las especificaciones de dise\u00f1o correspondientes a los sistemas gestores de datos, utilizados por la organizaci\u00f3n para el almacenamiento de la informaci\u00f3n.","text":"<ul> <li>CR1.1: Los modelos de datos contenidos en los sistemas gestores de datos se reconocen, identificando las relaciones y dependencias de los elementos que los configuran.</li> <li>CR1.2: La estructura global de la informaci\u00f3n del gestor de datos y su almacenamiento se estudian utilizando las especificaciones del dise\u00f1o, con objeto de localizar las informaciones contenidas en el mismo.</li> <li>CR1.3: La arquitectura, componentes y tecnolog\u00eda que intervienen en el dise\u00f1o se reconocen con el fin de identificar el o los sistemas gestores de datos que contienen la informaci\u00f3n de la organizaci\u00f3n.</li> <li>CR1.4: Las herramientas y lenguajes de consulta y manipulaci\u00f3n para extraer la informaci\u00f3n contenida en los gestores de datos se seleccionan seg\u00fan especificaciones del modelo y la tecnolog\u00eda del gestor de datos.</li> </ul>"},{"location":"normativa19/ucs/#rp2-extraer-transformar-y-cargar-informaciones-contenidas-en-gestores-de-datos-de-distinta-tipologia-utilizando-herramientas-y-lenguajes-de-procesamiento-de-informacion-de-acuerdo-con-especificaciones-tecnicas-y-funcionales-y-cumpliendo-la-normativa-de-proteccion-de-datos","title":"RP2: Extraer, transformar y cargar informaciones contenidas en gestores de datos de distinta tipolog\u00eda utilizando herramientas y lenguajes de procesamiento de informaci\u00f3n, de acuerdo con especificaciones t\u00e9cnicas y funcionales y cumpliendo la normativa de protecci\u00f3n de datos.","text":"<ul> <li>CR2.1: La codificaci\u00f3n, las herramientas y lenguajes seleccionados de los procedimientos de consulta, manipulaci\u00f3n y presentaci\u00f3n de informaci\u00f3n se utilizan seg\u00fan las especificaciones t\u00e9cnicas y funcionales, las necesidades de la organizaci\u00f3n y normativa aplicable.</li> <li>CR2.2: La documentaci\u00f3n inherente a las herramientas y lenguajes de consulta y manipulaci\u00f3n de la informaci\u00f3n se interpreta para obtener la funcionalidad deseada en el proceso de extracci\u00f3n de informaci\u00f3n, teniendo en cuenta las especificaciones t\u00e9cnicas de las mismas.</li> <li>CR2.3: Los procedimientos de extracci\u00f3n y consulta realizados se documentan para su registro seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-configurar-las-pasarelas-y-medios-de-conexion-entre-las-herramientas-cliente-y-los-sistemas-gestores-de-datos-para-establecer-la-comunicacion-entre-ambos-segun-necesidades-de-la-organizacion","title":"RP3: Configurar las pasarelas y medios de conexi\u00f3n entre las herramientas cliente y los sistemas gestores de datos, para establecer la comunicaci\u00f3n entre ambos seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR3.1: La documentaci\u00f3n inherente a la herramienta cliente y al sistema gestor de datos se interpreta para establecer los par\u00e1metros de conexi\u00f3n entre los componentes software que intervienen en la conexi\u00f3n seg\u00fan especificaciones t\u00e9cnicas y funcionales.</li> <li>CR3.2: Los par\u00e1metros de conexi\u00f3n entre las herramientas cliente y los sistemas gestores de datos se implantan para establecer la conexi\u00f3n entre ambos y permitir la extracci\u00f3n de datos de los sistemas gestores seg\u00fan necesidades operativas.</li> <li>CR3.3: Las configuraciones de las conexiones entre las pasarelas y medios de conexi\u00f3n y los sistemas gestores de datos se prueban para determinar la funcionalidad de extracci\u00f3n de datos seg\u00fan las necesidades de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#uc0967_3-crear-y-gestionar-repositorios-de-contenidos","title":"UC0967_3: Crear y gestionar repositorios de contenidos","text":""},{"location":"normativa19/ucs/#rp1-desarrollar-los-componentes-software-de-almacenamiento-estructurado-de-la-informacion-de-una-organizacion-segun-el-diseno-especificado-y-estandares-definidos-por-organismos-de-normalizacion","title":"RP1: Desarrollar los componentes software de almacenamiento estructurado de la informaci\u00f3n de una organizaci\u00f3n, seg\u00fan el dise\u00f1o especificado y est\u00e1ndares definidos por organismos de normalizaci\u00f3n.","text":"<ul> <li>CR1.1: Los componentes software se crean utilizando lenguajes espec\u00edficos orientados a documentos y t\u00e9cnicas est\u00e1ndares, para almacenar de modo estructurado la informaci\u00f3n siguiendo la normativa de dise\u00f1o y modelado de datos establecida por la organizaci\u00f3n.</li> <li>CR1.2: Los componentes software creados identifican la informaci\u00f3n almacenada y los diferentes descriptores de dicha informaci\u00f3n, tanto en contenido como en significado, para su distinci\u00f3n y acceso seg\u00fan la normativa de dise\u00f1o y tratamiento de la informaci\u00f3n de la organizaci\u00f3n.</li> <li>CR1.3: Los idiomas y sus codificaciones, propuestas por la organizaci\u00f3n, se identifican en los elementos software elaborados para el almacenamiento estructurado de la informaci\u00f3n seg\u00fan dise\u00f1o especificado.</li> <li>CR1.4: Los componentes software elaborados se comprueban, para demostrar la funcionalidad de almacenamiento estructurado de la informaci\u00f3n definida por la organizaci\u00f3n.</li> <li>CR1.5: Los componentes creados se integran en el repositorio, utilizando herramientas para obtener la estructura jer\u00e1rquica de los contenidos de la organizaci\u00f3n seg\u00fan especificaciones dadas.</li> <li>CR1.6: Los componentes software creados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp2-desarrollar-componentes-software-con-lenguajes-especificos-para-realizar-la-explotacion-de-las-informaciones-contenidas-en-repositorios-segun-las-necesidades-de-la-organizacion","title":"RP2: Desarrollar componentes software con lenguajes espec\u00edficos, para realizar la explotaci\u00f3n de las informaciones contenidas en repositorios seg\u00fan las necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR2.1: Las especificaciones de las informaciones a consultar se interpretan, identificando los contenidos que se van a utilizar como criterio de clasificaci\u00f3n para el posterior desarrollo del componente software, seg\u00fan especificaciones recibidas.</li> <li>CR2.2: Los componentes software de explotaci\u00f3n de la informaci\u00f3n se codifican de acuerdo con las caracter\u00edsticas y funcionalidades definidas, utilizando herramientas de desarrollo y lenguajes de consulta y orientados a documentos.</li> <li>CR2.3: Los componentes software elaborados se prueban para verificar las funcionalidades de explotaci\u00f3n y manipulaci\u00f3n de la informaci\u00f3n, contenida en repositorios, definida por la organizaci\u00f3n.</li> <li>CR2.4: Los componentes software creados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-integrar-en-el-sistema-de-informacion-de-la-organizacion-contenidos-para-homogeneizar-y-sistematizar-su-explotacion-y-manipulacion-mediante-herramientas-especificas","title":"RP3: Integrar en el sistema de informaci\u00f3n de la organizaci\u00f3n contenidos para homogeneizar y sistematizar su explotaci\u00f3n y manipulaci\u00f3n mediante herramientas espec\u00edficas.","text":"<ul> <li>CR3.1: Las informaciones se localizan en cada soporte para ubicarlas dentro de la jerarqu\u00eda del repositorio, seg\u00fan las necesidades y especificaciones de la organizaci\u00f3n.</li> <li>CR3.2: Los componentes software se codifican con los lenguajes de programaci\u00f3n espec\u00edficos, para realizar la integraci\u00f3n de las informaciones en el repositorio seg\u00fan especificaciones recibidas.</li> <li>CR3.3: La configuraci\u00f3n de las herramientas de transformaci\u00f3n y conversi\u00f3n de datos para la integraci\u00f3n de contenidos, se realiza de acuerdo a los par\u00e1metros y caracter\u00edsticas de la tecnolog\u00eda utilizada.</li> <li>CR3.4: Las informaciones contenidas en otras plataformas se integran en el repositorio utilizando herramientas de transformaci\u00f3n y conversi\u00f3n, para facilitar el proceso seg\u00fan especificaciones de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#uc0968_3-administrar-el-sistema-de-gestion-de-informacion","title":"UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n","text":""},{"location":"normativa19/ucs/#rp1-implementar-los-mecanismos-de-seguridad-de-acceso-al-sistema-de-gestion-de-la-informacion-segun-necesidades-de-la-organizacion","title":"RP1: Implementar los mecanismos de seguridad de acceso al sistema de gesti\u00f3n de la informaci\u00f3n seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR1.1: Los roles se definen de acuerdo con las necesidades de la organizaci\u00f3n, para simplificar las tareas de acceso y seguridad en el sistema de gesti\u00f3n de la informaci\u00f3n.</li> <li>CR1.2: Las pol\u00edticas de acceso por parte de los usuarios a los recursos del sistema de gesti\u00f3n de informaci\u00f3n se aplican, para asegurar el uso de los mismos seg\u00fan especificaciones de seguridad de la organizaci\u00f3n.</li> <li>CR1.3: La gesti\u00f3n de usuarios, grupos, perfiles, privilegios, propiedades y otras caracter\u00edsticas, se realiza utilizando las herramientas espec\u00edficas del sistema de gesti\u00f3n de informaci\u00f3n, para optimizar el proceso administrativo seg\u00fan necesidades del sistema.</li> <li>CR1.4: Los accesos definidos para los usuarios y sus correspondientes restricciones se comprueban, para verificar los mecanismos de seguridad implementados del sistema de gesti\u00f3n de informaci\u00f3n, seg\u00fan par\u00e1metros de calidad y seguridad de la organizaci\u00f3n.</li> <li>CR1.5: Los procesos realizados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp2-realizar-procesos-de-auditoria-en-el-sistema-de-gestion-de-informacion-para-mantener-y-controlar-el-rendimiento-del-sistema-segun-especificaciones-de-la-organizacion","title":"RP2: Realizar procesos de auditor\u00eda en el sistema de gesti\u00f3n de informaci\u00f3n, para mantener y controlar el rendimiento del sistema seg\u00fan especificaciones de la organizaci\u00f3n.","text":"<ul> <li>CR2.1: Los ficheros de registros de actividad se identifican, configuran y mantienen en el sistema de gesti\u00f3n de informaci\u00f3n, para realizar la recogida de los datos correspondientes a los sucesos a registrar seg\u00fan especificaciones de seguridad y rendimientos de la organizaci\u00f3n.</li> <li>CR2.2: Las alertas y alarmas se definen y configuran en el sistema de gesti\u00f3n de informaci\u00f3n, para controlar los niveles de acceso y rendimiento del sistema seg\u00fan especificaciones de seguridad y rendimiento de la organizaci\u00f3n.</li> <li>CR2.3: Las incidencias detectadas en el sistema de gesti\u00f3n de informaci\u00f3n se solucionan para asegurar la funcionalidad del sistema, seg\u00fan especificaciones t\u00e9cnicas y necesidades de rendimiento de la organizaci\u00f3n.</li> <li>CR2.4: Los procesos de auditor\u00eda se supervisan en su ejecuci\u00f3n para asegurar los par\u00e1metros de seguridad y rendimiento del sistema, seg\u00fan especificaciones de seguridad y rendimiento de la organizaci\u00f3n.</li> <li>CR2.5: La gesti\u00f3n de los procesos de auditor\u00eda se documenta para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-mantener-los-procesos-de-flujo-de-las-informaciones-con-herramientas-especificas-para-garantizar-la-trazabilidad-de-los-contenidos-segun-especificaciones-de-la-organizacion","title":"RP3: Mantener los procesos de flujo de las informaciones con herramientas espec\u00edficas, para garantizar la trazabilidad de los contenidos seg\u00fan especificaciones de la organizaci\u00f3n.","text":"<ul> <li>CR3.1: Los contenidos involucrados en el flujo de informaci\u00f3n se identifican y referencian dentro del sistema de gesti\u00f3n de informaci\u00f3n, as\u00ed como las relaciones y actividades a realizar con ellos, para la realizaci\u00f3n de los procesos de trazabilidad y seguimiento de los mismos seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR3.2: Los flujos de informaci\u00f3n se identifican para realizar su seguimiento y verificaci\u00f3n, seg\u00fan las especificaciones administrativas y funcionales de la organizaci\u00f3n.</li> <li>CR3.3: Las herramientas de flujos de informaci\u00f3n se utilizan para realizar los procesos de trazabilidad y seguimiento de la informaci\u00f3n, seg\u00fan especificaciones administrativas y funcionales de la organizaci\u00f3n.</li> <li>CR3.4: Los flujos de informaci\u00f3n se mantienen para conservar actualizado el sistema de gesti\u00f3n de informaci\u00f3n y los procesos de trazabilidad, seg\u00fan especificaciones recibidas.</li> <li>CR3.5: Los diagramas y documentos que describen los flujos de informaci\u00f3n del sistema se registran y almacenan, para asegurar su disponibilidad para posteriores consultas seg\u00fan normativa de la organizaci\u00f3n.</li> <li>CR3.6: El control de las versiones de las informaciones del repositorio se realiza mediante la utilizaci\u00f3n de herramientas espec\u00edficas, para garantizar la seguridad del registro de la informaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR3.7: La gesti\u00f3n de la trazabilidad de los contenidos se documenta para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp4-distribuir-los-contenidos-del-sistema-de-gestion-de-informacion-para-su-divulgacion-y-utilizacion-segun-necesidades-de-la-organizacion","title":"RP4: Distribuir los contenidos del sistema de gesti\u00f3n de informaci\u00f3n para su divulgaci\u00f3n y utilizaci\u00f3n, seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR4.1: Las herramientas de consulta del usuario final al sistema de gesti\u00f3n de informaci\u00f3n se identifican y habilitan, para su utilizaci\u00f3n por parte de los mismos seg\u00fan las pol\u00edticas de la organizaci\u00f3n.</li> <li>CR4.2: Los contenidos a distribuir se seleccionan y organizan para su utilizaci\u00f3n y posterior acceso por parte de los usuarios, seg\u00fan criterios de dependencia y homogeneidad en funci\u00f3n de las especificaciones de la organizaci\u00f3n.</li> <li>CR4.3: Los contenidos del sistema de gesti\u00f3n de informaci\u00f3n se integran en el canal de distribuci\u00f3n, para su divulgaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.4: Las pol\u00edticas de acceso a la informaci\u00f3n se incluyen en la gesti\u00f3n de canales de distribuci\u00f3n, para impedir utilizaciones no autorizadas de informaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.5: Los procesos de mantenimiento y control del canal de distribuci\u00f3n se realizan de forma peri\u00f3dica, para asegurar su funcionalidad y rendimiento seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.6: La documentaci\u00f3n de los procesos realizados se realiza para cumplimentar las necesidades de gesti\u00f3n y registro del canal de distribuci\u00f3n, seg\u00fan especificaciones de la organizaci\u00f3n.</li> </ul>"}]}