{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IFCD0211 SISTEMAS DE GESTION DE INFORMACION","text":""},{"location":"#certificado-de-profesionalidad-sistemas-de-gestion-de-informacion-ifcd0211","title":"Certificado de Profesionalidad: Sistemas de Gesti\u00f3n de Informaci\u00f3n (IFCD0211)","text":""},{"location":"#normativa","title":"Normativa","text":"<ul> <li>Normativa General</li> </ul> <p>M\u00f3dulos:</p> <ul> <li>MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos</li> <li>MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos</li> <li>MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n</li> <li>MP0459: Pr\u00e1cticas Profesionales No Laborales</li> </ul> <p>Unidades de Competencia:</p> <ul> <li>Unidades de Competencia</li> </ul>"},{"location":"#estado-del-arte","title":"Estado del arte","text":""},{"location":"#lenguajes-de-programacion","title":"Lenguajes de programaci\u00f3n","text":""},{"location":"#frameworks-backend","title":"Frameworks backend","text":"<p>Los frameworks de backend son fundamentales para aplicaciones web y m\u00f3viles, contribuyendo a mejorar rendimiento, escalabilidad y seguridad. Responsables de la l\u00f3gica del servidor, configuraci\u00f3n, interacci\u00f3n con bases de datos y autenticaci\u00f3n, estos frameworks ofrecen diversas ventajas en el desarrollo de aplicaciones. La elecci\u00f3n adecuada puede potenciar la velocidad y seguridad. </p> <p>Frameworks m\u00e1s utilizados</p>"},{"location":"#cms-mas-utilizados","title":"CMS m\u00e1s utilizados","text":"<p>Del estudio que veremos en la web de WPBeginner, se puede ver que WordPress sigue siendo el CMS m\u00e1s utilizado en el mundo. Pero quiero destacar algunos puntos de este estudio:</p> <ul> <li>En 2011, alrededor del 76% de todos los sitios web estaban codificados a mano. A finales de 2022, esta cifra se hab\u00eda reducido a alrededor del 33 %, lo que indica una disminuci\u00f3n media anual de aproximadamente el 3,91 % al a\u00f1o.</li> <li>En la actualidad, m\u00e1s de 80 millones de sitios web utilizan un sistema de gesti\u00f3n de contenidos.</li> </ul> <p>Ahora pensad que la normativa de este curso es de 2013 BOE-A-2013-9707. Esto hace bastante dificial daptar los contenidos del curso a la realidad actual. Algunos ejemplos:</p> <pre><code>- La mayor\u00eda de los frameworks de backend m\u00e1s utilizados no exist\u00edan en 2013.\n- Hoy en d\u00eda el uso de frameworks tanto en frontend como en backend es muy com\u00fan.\n- La adaptaci\u00f3n de contenidos a los diferentes dispositivos m\u00f3viles no era tan importante como ahora.\n- Hoy en d\u00eda, la mayor\u00eda de los sitios web utilizan un CMS, lo que no era tan com\u00fan en 2013.\n</code></pre> <p>Estudio de los CMS m\u00e1s utilizados</p>"},{"location":"content/MF_0966_3/UF2213/","title":"UF2213","text":""},{"location":"content/MF_0966_3/UF2213/#implementacion-en-jbeteta-iesgithubiobbdd","title":"Implementaci\u00f3n en: jbeteta-ies.github.io/BBDD","text":""},{"location":"content/MF_0966_3/UF2214/","title":"UF2214","text":""},{"location":"content/MF_0966_3/UF2214/#implementacion-en-jbeteta-iesgithubiobbdd","title":"Implementaci\u00f3n en: jbeteta-ies.github.io/BBDD","text":""},{"location":"content/MF_0966_3/UF2215/","title":"Unidad Formativa 3: UF2215","text":""},{"location":"content/MF_0966_3/UF2215/#herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion","title":"Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n <p>En este m\u00f3dulo vamos a realizar las siguientes modificaciones aprovechando los contenidos del m\u00f3dulo <code>0485 - Programaci\u00f3n</code>. Esta Unidad Formativa nos debe dar las competencias necesarias para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. Ya que en el m\u00f3dulo siguiente se nos pide desarrollar una CMS, es necesario que tengamos conocimientos de programaci\u00f3n para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos.</p> Campo Detalle C\u00f3digo 0485 Nombre Progrmaci\u00f3n (256h) Duraci\u00f3n 70 horas"},{"location":"content/MF_0966_3/UF2215/#contenidos-reducidos-100-horas","title":"Contenidos Reducidos (100 horas)","text":""},{"location":"content/MF_0966_3/UF2215/#objetivo-general","title":"Objetivo General","text":"<p>Aprender los fundamentos de la programaci\u00f3n utilizando JavaScript, con un enfoque inicial en l\u00f3gica y estructuras del lenguaje, para luego integrar con HTML en el desarrollo de p\u00e1ginas web.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-1-configuracion-del-entorno-y-fundamentos-de-javascript-20-horas","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript (20 horas)","text":"<p>1.1 Configuraci\u00f3n del Entorno de Desarrollo</p> <ul> <li>Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica.</li> <li>Uso de VSCode como editor principal.</li> <li>Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas con Node.js.</li> </ul> <p>1.2 Variables, Tipos de Datos y Operadores</p> <ul> <li>Declaraci\u00f3n de variables (<code>let</code>, <code>const</code>, <code>var</code>).</li> <li>Tipos de datos primitivos: cadenas, n\u00fameros, booleanos, etc.</li> <li>Operadores b\u00e1sicos: aritm\u00e9ticos, l\u00f3gicos y relacionales.</li> </ul> <p>1.3 Estructuras B\u00e1sicas de Control</p> <ul> <li>Condicionales (<code>if</code>, <code>else</code>, <code>else if</code>).</li> <li>Bucles (<code>for</code>, <code>while</code>, <code>do-while</code>).</li> <li>Uso del <code>switch</code>.</li> </ul> <p>1.4 Bucles</p> <ul> <li>Introducci\u00f3n a los bucles.</li> <li>Bucle <code>for</code>.</li> <li>Bucle <code>while</code>.</li> <li>Bucle <code>do-while</code>.</li> <li>Errores comunes en bucles.</li> <li>Uso avanzado de <code>break</code> y <code>continue</code>.</li> </ul> <p>1.5 Uso Avanzado de N\u00fameros, Cadenas y Fechas</p> <ul> <li>Clase <code>Number</code></li> <li>Biblioteca <code>Math</code></li> <li>Clase <code>String</code></li> <li>Clase <code>Date</code></li> <li>Ejercicios Pr\u00e1cticos</li> </ul> <p>1.6 Ejercicios Pr\u00e1cticos</p> <ul> <li>Tenis</li> <li>Fechas de pago</li> <li>Adivinanzas</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#unidad-2-arrays-objetos-y-clases-30-horas","title":"Unidad 2: Arrays, Objetos y Clases (30 horas)","text":"<ul> <li>2.1 Arrays y su manipulaci\u00f3n (8h)<ul> <li>Creaci\u00f3n y uso de arrays.</li> <li>M\u00e9todos comunes: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>splice</code>, etc.</li> <li>Iteraci\u00f3n de arrays: <code>for</code>, <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>.</li> </ul> </li> <li>2.2 Objetos y su uso (7h)<ul> <li>Declarando objetos</li> <li>M\u00e9todos</li> <li>La palabra clave <code>this</code></li> <li>Constructores de objetos</li> <li>El operador <code>new</code></li> <li>Herencia y prototipos</li> </ul> </li> <li>2.3 Persistencia JS con JSON (7h)<ul> <li>Introducci\u00f3n a JSON.</li> <li>Serializaci\u00f3n y deserializaci\u00f3n de objetos.</li> <li>Almacenamiento de datos en archivos JSON.</li> </ul> </li> </ul> <p>Objetivo: Trabajar con estructuras m\u00e1s complejas como arrays, objetos y clases para modelar datos y estructuras reales.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-3-funciones-y-manejo-de-errores-20-horas","title":"Unidad 3: Funciones y Manejo de Errores (20 horas)","text":""},{"location":"content/MF_0966_3/UF2215/#31-funciones-en-javascript-12h","title":"3.1 Funciones en JavaScript (12h)","text":"<ul> <li>Declaraci\u00f3n y uso de funciones.</li> <li>Par\u00e1metros y valores de retorno.</li> <li>Funciones an\u00f3nimas.</li> <li>Funciones como expresiones.</li> <li>Paso de par\u00e1metros por valor y por referencia.</li> <li>Alcance de las variables: local y global.</li> <li>Funciones recursivas (introducci\u00f3n).</li> <li>Retorno de funciones.</li> <li>Funciones an\u00f3nimas autoejecutadas (IIFE).</li> <li>Funciones flecha (<code>arrow functions</code>).</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#32-manejo-de-errores-en-javascript-3h","title":"3.2 Manejo de Errores en JavaScript (3h)","text":"<ul> <li>Uso de bloques <code>try</code>, <code>catch</code> y <code>finally</code>.</li> <li>Lanzar errores con <code>throw</code>.</li> <li>Tipos de errores comunes en JavaScript (sintaxis, referencia, tipo, etc.).</li> <li>Personalizaci\u00f3n de mensajes de error.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#33-asincronia-en-javascript-5h","title":"3.3 Asincron\u00eda en JavaScript (5h)","text":"<ul> <li>Callbacks y su problema (<code>callback hell</code>).</li> <li>Promesas (<code>Promise</code>).</li> <li><code>async/await</code> y su uso en JavaScript.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#34-ejemplo-practico-con-asyncawait","title":"3.4 Ejemplo pr\u00e1ctico con Async/Await","text":"<ul> <li>Creaci\u00f3n de un microservicio REST con Express.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#unidad-4-integracion-de-javascript-con-html-y-el-dom-20-horas","title":"Unidad 4: Integraci\u00f3n de JavaScript con HTML y el DOM (20 horas)","text":"<ul> <li>4.1 Introducci\u00f3n a HTML (5h)<ul> <li>Conceptos de HTML.</li> <li>Estructura b\u00e1sica de un documento HTML.</li> <li>Etiquetas y atributos comunes.</li> </ul> </li> <li>4.2 Vinculaci\u00f3n de JavaScript con HTML (5h)<ul> <li>Uso de etiquetas <code>&lt;script&gt;</code> para enlazar archivos JavaScript.</li> <li>Ejecuci\u00f3n de c\u00f3digo JS en eventos b\u00e1sicos de HTML (<code>onClick</code>, <code>onSubmit</code>).</li> </ul> </li> <li>4.3 Introducci\u00f3n al DOM y manejo b\u00e1sico (10h)<ul> <li>\u00bfQu\u00e9 es el DOM?</li> <li>Seleccionar elementos: <code>getElementById</code>, <code>querySelector</code>.</li> <li>Modificaci\u00f3n b\u00e1sica del contenido: <code>innerHTML</code>, <code>textContent</code>.</li> <li>Manejo de eventos: <code>addEventListener</code>.</li> <li>Ejercicio pr\u00e1ctico b\u00e1sico: Crear una lista interactiva donde los usuarios puedan a\u00f1adir y eliminar elementos.</li> </ul> </li> </ul> <p>Objetivo: Introducir la integraci\u00f3n de JavaScript con HTML y la manipulaci\u00f3n b\u00e1sica del DOM para trabajar en p\u00e1ginas web din\u00e1micas.</p>"},{"location":"content/MF_0966_3/UF2215/#unidad-5-proyecto-final-10-horas","title":"Unidad 5: Proyecto Final (10 horas)","text":"<ul> <li>5.1 Desarrollo de un proyecto b\u00e1sico<ul> <li>Crear un gestor de tareas simple:          - Permitir al usuario a\u00f1adir, editar y eliminar tareas.          - Almacenar datos temporalmente en arrays u objetos.          - Mostrar la lista de tareas en una p\u00e1gina web utilizando HTML y el DOM.          - Uso de eventos para manejar interacciones del usuario.          - Uso del DOM para actualizar la interfaz din\u00e1mica.</li> </ul> </li> </ul> <p>Objetivo: Integrar todos los conocimientos adquiridos en un proyecto pr\u00e1ctico.</p>"},{"location":"content/MF_0966_3/UF2215/#recursos-y-herramientas","title":"Recursos y Herramientas","text":""},{"location":"content/MF_0966_3/UF2215/#editor-y-ejecucion","title":"Editor y Ejecuci\u00f3n","text":"<ul> <li>Editor de c\u00f3digo: VSCode (con extensiones como Prettier para formato).</li> <li>Ejecuci\u00f3n: Uso de Node.js para la mayor parte del curso. En la unidad del DOM, se usar\u00e1 un navegador para vincular JavaScript con HTML.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/#materiales-de-apoyo","title":"Materiales de apoyo","text":"<ol> <li>MDN Web Docs (JavaScript):         - Gu\u00eda de JavaScript.</li> <li>FreeCodeCamp:         - Curso de JavaScript B\u00e1sico.</li> <li>Ejercicios pr\u00e1cticos interactivos:         - Exercism.io - JavaScript.         - Codewars.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/#distribucion-del-tiempo","title":"Distribuci\u00f3n del Tiempo","text":"Unidad Did\u00e1ctica Horas Unidad 1: Fundamentos de JavaScript 20 Unidad 2: Funciones y Manejo de Errores 20 Unidad 3: Arrays, Objetos y Clases 30 Unidad 4: Integraci\u00f3n de JS con HTML y DOM 20 Unidad 5: Proyecto Final 10 Total 100"},{"location":"content/MF_0966_3/UF2215/unidad01_11/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#11-configuracion-del-entorno-de-desarrollo","title":"1.1 Configuraci\u00f3n del Entorno de Desarrollo","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#objetivos","title":"Objetivos","text":"<ol> <li>Configurar un entorno de desarrollo para escribir y ejecutar c\u00f3digo en JavaScript.</li> <li>Familiarizarse con herramientas clave: Node.js, Visual Studio Code (VSCode) y la consola.</li> <li>Ejecutar un programa b\u00e1sico en JavaScript para validar la configuraci\u00f3n.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#111-instalacion-de-nodejs-y-configuracion-basica","title":"1.1.1 Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#que-es-nodejs-y-por-que-lo-necesitamos","title":"\u00bfQu\u00e9 es Node.js y por qu\u00e9 lo necesitamos?","text":"<p>Node.js es un entorno de ejecuci\u00f3n para JavaScript construido sobre el motor V8 de Google Chrome. Permite ejecutar JavaScript en el lado del servidor, fuera del navegador. Esto lo convierte en una herramienta fundamental para el desarrollo de aplicaciones modernas, como servidores web, herramientas de l\u00ednea de comandos y aplicaciones de tiempo real.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#historia-de-nodejs","title":"Historia de Node.js","text":"<ul> <li>Lanzamiento inicial: Node.js fue creado por Ryan Dahl y lanzado en 2009.</li> <li>Motivaci\u00f3n: Ryan Dahl desarroll\u00f3 Node.js para solucionar problemas comunes en los servidores web tradicionales, como la falta de eficiencia al manejar m\u00faltiples conexiones simult\u00e1neas.</li> <li>Primera versi\u00f3n estable: La versi\u00f3n 0.10 fue lanzada en marzo de 2013, marcando el inicio de su adopci\u00f3n masiva.</li> <li>Ecosistema en crecimiento: Desde 2015, el desarrollo de Node.js es administrado por la Node.js Foundation, que posteriormente se fusion\u00f3 con la JS Foundation en 2019 para formar la OpenJS Foundation.</li> <li>Licencia: Node.js est\u00e1 disponible bajo la licencia MIT, lo que permite su uso, modificaci\u00f3n y distribuci\u00f3n de forma gratuita, incluso en proyectos comerciales.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#modo-de-funcionamiento","title":"Modo de Funcionamiento","text":"<p>Modelo de ejecuci\u00f3n as\u00edncrono: Node.js utiliza un modelo basado en eventos que permite manejar m\u00faltiples solicitudes al mismo tiempo sin bloquear el servidor. Esto lo hace ideal para aplicaciones que requieren un manejo intensivo de entradas y salidas (I/O).</p> <p>Motor V8: Node.js est\u00e1 construido sobre el motor V8 de Google Chrome, que convierte el c\u00f3digo JavaScript en c\u00f3digo m\u00e1quina, asegurando un rendimiento \u00f3ptimo.</p> <p>Ejecuci\u00f3n concurrente: Aunque utiliza un solo hilo, Node.js puede manejar m\u00faltiples conexiones simult\u00e1neamente mediante un bucle de eventos (<code>event loop</code>) y callbacks.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#caracteristicas-clave","title":"Caracter\u00edsticas Clave","text":"<ul> <li>Modelo No Bloqueante: Las operaciones I/O no bloquean el flujo del programa, lo que permite manejar m\u00faltiples tareas de manera eficiente.</li> <li>Compatibilidad Cross-Platform: Funciona en sistemas operativos como Windows, macOS y Linux.</li> <li>Ecosistema de Paquetes (NPM): Node.js incluye el administrador de paquetes m\u00e1s grande del mundo, NPM, que cuenta con m\u00e1s de un mill\u00f3n de paquetes.</li> <li>Aplicaciones en Tiempo Real: Ideal para aplicaciones como chats, juegos en l\u00ednea y transmisiones en tiempo real.</li> <li>Escalabilidad: Gracias a su arquitectura basada en eventos, Node.js puede manejar un gran n\u00famero de conexiones simult\u00e1neamente.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#ventajas","title":"Ventajas","text":"<ul> <li>Velocidad: Su motor V8 es altamente eficiente.</li> <li>Ecosistema Extenso: La comunidad de NPM ofrece soluciones para casi cualquier tarea.</li> <li>Reutilizaci\u00f3n de Conocimientos: Permite usar JavaScript en el frontend y el backend.</li> <li>Ideal para Microservicios: Su arquitectura ligera es adecuada para dise\u00f1ar aplicaciones modulares.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#limitaciones","title":"Limitaciones","text":"<ul> <li>Operaciones Intensivas en CPU: Node.js no es la mejor opci\u00f3n para tareas que requieren un alto procesamiento, como c\u00e1lculos complejos.</li> <li>Callback Hell: Aunque mitiga esto con Promises y <code>async/await</code>, el uso intensivo de callbacks puede hacer que el c\u00f3digo sea dif\u00edcil de mantener.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#casos-de-uso-reales","title":"Casos de Uso Reales","text":"<ul> <li>Netflix: Utiliza Node.js para mejorar la velocidad de carga de su interfaz de usuario.</li> <li>Uber: Emplea Node.js para manejar solicitudes en tiempo real.</li> <li>PayPal: Mejor\u00f3 el rendimiento de sus aplicaciones migrando a Node.js.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#enlaces-a-soluciones-con-nodejs","title":"Enlaces a Soluciones con Node.js","text":"<ul> <li>Express.js: Framework minimalista para construir aplicaciones web y APIs.</li> <li>Socket.io: Biblioteca para crear aplicaciones en tiempo real como chats y juegos.</li> <li>NestJS: Framework para desarrollar aplicaciones backend modulares y escalables.</li> <li>Electron: Herramienta para crear aplicaciones de escritorio multiplataforma con Node.js.</li> <li>Strapi: CMS basado en Node.js para crear APIs r\u00e1pidas y personalizables.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Node.js: https://nodejs.org/en/docs/</li> <li>Gu\u00eda para principiantes: https://www.freecodecamp.org/news/learn-node-js-beginners-guide/</li> <li>Tutorial en video: Net Ninja - Curso de Node.js</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#descargar-e-instalar-nodejs","title":"Descargar e instalar Node.js","text":"<ol> <li>Accede al sitio oficial de Node.js: https://nodejs.org.</li> <li>Selecciona la versi\u00f3n LTS (Long Term Support).</li> <li>Descarga y sigue el proceso de instalaci\u00f3n seg\u00fan tu sistema operativo.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#descargar-e-instalar-nodejs-en-windows","title":"Descargar e instalar Node.js en Windows","text":"<ol> <li> <p>Accede al sitio oficial de Node.js:</p> <ul> <li>Ve a https://nodejs.org.</li> <li> <p>Encontrar\u00e1s dos opciones principales de descarga:</p> <p>Versiones de Node.js</p> <ul> <li>LTS (Long Term Support): Recomendado para la mayor\u00eda de los usuarios, ya que es m\u00e1s estable.</li> <li>Current: Incluye las \u00faltimas caracter\u00edsticas, pero podr\u00eda ser menos estable.</li> </ul> </li> <li> <p>Selecciona LTS para garantizar estabilidad en el curso.</p> </li> </ul> </li> <li> <p>Descarga el instalador:</p> <ul> <li>Haz clic en el bot\u00f3n de descarga que corresponde a tu sistema operativo (Windows detectar\u00e1 autom\u00e1ticamente la versi\u00f3n adecuada, ya sea de 32 o 64 bits).</li> </ul> </li> <li> <p>Ejecuta el instalador:</p> <ul> <li>Busca el archivo descargado (generalmente estar\u00e1 en la carpeta <code>Descargas</code>) y haz doble clic para abrirlo.</li> </ul> </li> <li> <p>Sigue los pasos del asistente de instalaci\u00f3n:</p> <ul> <li> <p>Pantalla de bienvenida:</p> <p>Asistente de instalaci\u00f3n de Node.js</p> <ul> <li>Haz clic en <code>Next</code> para continuar.</li> </ul> </li> <li> <p>Acuerdo de licencia:</p> <p>Lee los t\u00e9rminos de la licencia</p> <ul> <li>Lee los t\u00e9rminos de la licencia y haz clic en <code>I accept the terms in the License Agreement</code>, luego en <code>Next</code>.</li> </ul> </li> <li> <p>Carpeta de instalaci\u00f3n:</p> <p>Selecciona la carpeta de instalaci\u00f3n</p> <ul> <li>Selecciona la carpeta donde deseas instalar Node.js (por defecto es <code>C:\\Program Files\\nodejs</code>).</li> <li>Se recomienda dejar la ubicaci\u00f3n predeterminada y hacer clic en <code>Next</code>.</li> </ul> </li> <li> <p>Componentes a instalar:</p> <p>Selecciona los componentes</p> <ul> <li>Aseg\u00farate de que todas las opciones est\u00e9n seleccionadas:</li> </ul> Componentes a instalar <ul> <li>Node.js runtime: El n\u00facleo del entorno de ejecuci\u00f3n.</li> <li>npm package manager: Administrador de paquetes para instalar bibliotecas.</li> <li>Add to PATH: Agrega Node.js a las variables de entorno del sistema (muy importante).</li> <li>Online documentation shortcuts: Acceso r\u00e1pido a la documentaci\u00f3n en l\u00ednea.</li> </ul> <ul> <li>Haz clic en <code>Next</code>.</li> </ul> </li> <li> <p>Herramientas adicionales para la compilaci\u00f3n nativa (opcional):</p> <p>Herramientas adicionales</p> <ul> <li>En algunos casos, el instalador puede ofrecer la opci\u00f3n de instalar herramientas adicionales como Python o compiladores de C++ necesarios para algunos paquetes.</li> <li>Si aparece esta opci\u00f3n, selecciona el checkbox y haz clic en <code>Next</code>.</li> </ul> </li> <li> <p>Instalaci\u00f3n:</p> <p>Proceso de instalaci\u00f3n</p> <ul> <li>Haz clic en <code>Install</code> y espera a que el instalador copie los archivos necesarios.</li> </ul> </li> <li> <p>Finalizaci\u00f3n:</p> <p>Finalizaci\u00f3n de la instalaci\u00f3n</p> <ul> <li>Una vez terminada la instalaci\u00f3n, marca la opci\u00f3n de \"Automatically install necessary tools\" (si est\u00e1 disponible) y haz clic en <code>Finish</code>.</li> </ul> </li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#validacion-de-la-instalacion","title":"Validaci\u00f3n de la instalaci\u00f3n","text":"<ol> <li>Abre la terminal o consola de comandos.</li> <li> <p>Ejecuta los siguientes comandos para verificar que Node.js y npm est\u00e1n instalados correctamente:</p> Comandos de verificaci\u00f3n<pre><code>node -v\nnpm -v\n</code></pre> </li> <li> <p>Deber\u00edas ver los n\u00fameros de versi\u00f3n correspondientes.</p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#ejecutar-un-primer-script-en-nodejs","title":"Ejecutar un primer script en Node.js","text":"<ol> <li>Crea un archivo <code>hello.js</code> con el siguiente contenido:</li> </ol> Hola Mundo!<pre><code>console.log(\"\u00a1Hola, mundo!\");\n</code></pre> <ol> <li>En la consola, navega hasta el directorio donde guardaste el archivo y ejecuta:</li> </ol> Ejecutar programa hello.js<pre><code>   node hello.js\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#112-uso-de-visual-studio-code-vscode-como-editor-principal","title":"1.1.2 Uso de Visual Studio Code (VSCode) como editor principal","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#introduccion-a-vscode","title":"Introducci\u00f3n a VSCode","text":"<p>Visual Studio Code es uno de los editores m\u00e1s populares para desarrollo, con soporte para m\u00faltiples lenguajes y extensiones.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#instalacion-y-configuracion","title":"Instalaci\u00f3n y configuraci\u00f3n","text":"<ol> <li>Descarga desde el sitio oficial: https://code.visualstudio.com.</li> <li>Inst\u00e1lalo y abre la aplicaci\u00f3n.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<ol> <li>Personaliza el tema visual desde las opciones de configuraci\u00f3n.</li> <li> <p>Instala las siguientes extensiones recomendadas:</p> <p>Extensiones Recomendadas</p> <ul> <li>Live Server: Permite visualizar p\u00e1ginas web en tiempo real.</li> <li>Prettier: Formateo autom\u00e1tico del c\u00f3digo.</li> <li>ESLint: Detecci\u00f3n de errores y problemas en el c\u00f3digo.</li> <li>JavaScript (ES6) Code Snippets: Accesos r\u00e1pidos para escribir c\u00f3digo.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#creacion-y-ejecucion-de-un-programa-en-vscode","title":"Creaci\u00f3n y ejecuci\u00f3n de un programa en VSCode","text":"<ol> <li>Abre un nuevo proyecto en VSCode.</li> <li>Crea un archivo <code>app.js</code> con el siguiente contenido:</li> </ol> Programa de ejemplo<pre><code>const saludo = \"\u00a1Hola desde VSCode!\";\nconsole.log(saludo);\n</code></pre> <ol> <li> <p>Ejecuta el programa desde la terminal integrada de VSCode:</p> <p>Ejecutar programa en VSCode</p> <ul> <li>Abre la terminal integrada con <code>Ctrl + \\</code>.</li> <li>Escribe:      Ejecutar programa app.js<pre><code>node app.js\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#113-introduccion-al-uso-de-la-consola-y-ejecucion-de-programas","title":"1.1.3 Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#que-es-la-consola","title":"\u00bfQu\u00e9 es la consola?","text":"<p>La consola es una herramienta para interactuar con el sistema operativo y ejecutar comandos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#comandos-basicos","title":"Comandos b\u00e1sicos","text":"<ol> <li>Navegar entre carpetas:</li> </ol> <p><pre><code>cd nombre-de-la-carpeta\n</code></pre> 2. Listar archivos:</p> <pre><code>!!! info \"Comandos para listar archivos\"\n     - En Windows: `dir`\n     - En macOS/Linux: `ls`\n</code></pre> <ol> <li>Crear y eliminar archivos:</li> </ol> <pre><code>touch archivo.js\nrm archivo.js\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#uso-del-repl-de-nodejs","title":"Uso del REPL de Node.js","text":"<ol> <li>Inicia el entorno interactivo ejecutando:    <pre><code>node\n</code></pre></li> <li>Escribe comandos simples:</li> </ol> Ejemplo en el REPL<pre><code>console.log(\"Hola desde el REPL\");\n2 + 2;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#actividad-practica","title":"Actividad Pr\u00e1ctica","text":"<ol> <li>Configura el entorno completo instalando Node.js y VSCode.</li> <li>Crea una carpeta llamada <code>proyecto_inicial</code>.</li> <li> <p>Dentro de la carpeta, crea un archivo <code>index.js</code> con este c\u00f3digo:</p> <p>C\u00f3digo de ejemplo</p> Programa de bienvenida<pre><code>    const nombre = \"Estudiante\";\n    console.log(`\u00a1Bienvenido, ${nombre}, a la programaci\u00f3n con JavaScript!`);\n</code></pre> <ol> <li>Ejecuta el programa en la consola.</li> </ol> Ejecutar programa index.js<pre><code>node index.js\n</code></pre> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#reto-extra","title":"Reto Extra","text":"<ol> <li>Investiga c\u00f3mo instalar un paquete de npm.</li> <li>Instala <code>chalk</code> y \u00fasalo para cambiar el color del texto en la consola:    <pre><code>npm install chalk@4\n</code></pre></li> <li>C\u00f3digo de ejemplo:    Uso de chalk<pre><code>const chalk = require('chalk');\nconsole.log(chalk.green(\"\u00a1Texto en color verde!\"));\n</code></pre></li> </ol> <p>Version de <code>chalk</code></p> <p>Aseg\u00farate de instalar la versi\u00f3n 4 de <code>chalk</code> para evitar problemas de compatibilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#evaluacion","title":"Evaluaci\u00f3n","text":"<p>Los estudiantes pueden:</p> Evaluaci\u00f3n <ol> <li>Ejecutar scripts b\u00e1sicos en Node.js.</li> <li>Crear y ejecutar programas en VSCode.</li> <li>Usar la consola para navegar y gestionar archivos.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#crear-un-proyecto-con-npm","title":"Crear un proyecto con npm","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_11/#crear-un-proyecto-nuevo","title":"crear un proyecto nuevo","text":"<p>Para crear un proyecto nuevo con npm, se debe seguir los siguientes pasos (desde el terminal), si estamos en VSCode, podemos abrir la terminal integrada y si ya hamos creado la carpeta ir al  paso 3:</p> <ol> <li> <p>Crear una carpeta para el proyecto:</p> <pre><code>mkdir mi-proyecto\n</code></pre> </li> <li> <p>Ingresar a la carpeta del proyecto:</p> <p><code>bash   cd mi-proyecto</code> 3. Inicializar el proyecto con npm:</p> <pre><code>npm init -y\n</code></pre> <p>Este comando crear\u00e1 un archivo <code>package.json</code> con la configuraci\u00f3n predeterminada:</p> <pre><code>{\n   \"name\": \"mi-proyecto\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n   },\n   \"keywords\": [],\n   \"author\": \"\",\n   \"license\": \"ISC\"\n}\n</code></pre> </li> <li> <p>Crear un archivo <code>index.js</code> con el siguiente contenido:</p> Uso de lodash<pre><code>console.log(\"\u00a1Hola desde el proyecto!\");\n</code></pre> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#como-poner-en-marcha-el-proyecto","title":"Como poner en marcha el proyecto","text":"<p>Para ejecutar el proyecto, se debe seguir los siguientes pasos:</p> <ol> <li> <p>Modificar el archivo <code>package.json</code> para agregar un script de inicio:</p> Script de inicio<pre><code>\"scripts\": {\n  \"start\": \"node index.js\"\n  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n}\n</code></pre> </li> <li> <p>Ejecutar el script de inicio:</p> Ejecutar script de inicio<pre><code>npm start\n</code></pre> </li> </ol> <p>De esta manera nos debe aparecer en la consola el mensaje <code>\u00a1Hola desde el proyecto!</code>.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#como-hacer-debug-en-vscode","title":"Como hacer debug en VSCode","text":"<p>Para hacer debug en VSCode, se debe seguir los siguientes pasos:</p> <ol> <li>Ir a la opci\u00f3n de <code>Run and Debug</code> en la barra lateral izquierda.</li> <li>Hacer clic en el link <code>create a launch.json file</code>.</li> <li>Seleccionar <code>Node.js</code> en la lista de entornos de ejecuci\u00f3n.</li> <li> <p>Se crear\u00e1 un archivo <code>launch.json</code> con la configuraci\u00f3n de depuraci\u00f3n.</p> Configuraci\u00f3n de depuraci\u00f3n<pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Program\",\n      \"skipFiles\": [\"&lt;node_internals&gt;/**\"],\n      \"program\": \"${workspaceFolder}/index.js\"\n    }\n  ]\n}\n</code></pre> <p>Ahora podemos dar clic en el bot\u00f3n de <code>Run</code> para iniciar la depuraci\u00f3n.</p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_11/#como-hacer-debug-si-utilizamos-la-libreria-prompt-sync","title":"C\u00f3mo hacer debug si utilizamos la librer\u00eda <code>prompt-sync</code>","text":"<ol> <li> <p>Instalar la librer\u00eda <code>prompt-sync</code>:</p> <pre><code>npm install prompt-sync\n</code></pre> </li> <li> <p>Modificar el archivo <code>index.js</code> para utilizar la librer\u00eda:</p> Uso de prompt-sync<pre><code>const prompt = require('prompt-sync')();\nconst nombre = prompt('\u00bfCu\u00e1l es tu nombre? ');\nconsole.log(`\u00a1Hola, ${nombre}!`);\n</code></pre> </li> <li> <p>Modificar el fichero <code>launch.json</code> para que se pueda ejecutar el programa:</p> Configuraci\u00f3n de depuraci\u00f3n con prompt-sync<pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Program\",\n      \"skipFiles\": [\"&lt;node_internals&gt;/**\"],\n      \"program\": \"${workspaceFolder}/index.js\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre> </li> </ol> <p>Ahora podemos a\u00f1adir un punto de interrupci\u00f3n en el c\u00f3digo y ejecutar el programa en modo de depuraci\u00f3n.</p> <p>Ejercicio Pr\u00e1ctico</p> <p>Siguiendlo los pasos anteriores, crea un proyecto nuevo con npm, agrega un script de inicio y realiza la depuraci\u00f3n en VSCode. Asegurate de que el programa funcione correctamente y que puedas depurarlo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_12/#12-variables-tipos-de-datos-y-operadores","title":"1.2 Variables, Tipos de Datos y Operadores","text":"<p>Objetivos</p> <ol> <li>Comprender c\u00f3mo declarar y usar variables en JavaScript.</li> <li>Conocer los diferentes tipos de datos y aprender a trabajar con operadores b\u00e1sicos para realizar operaciones.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#121-declaracion-de-variables","title":"1.2.1 Declaraci\u00f3n de Variables","text":"<p>\u00bfQu\u00e9 es una variable? </p> <p>Una variable es un espacio en la memoria que se utiliza para almacenar datos que pueden ser usados y manipulados en un programa.</p> <p>Formas de declarar variables en JavaScript:</p> <ol> <li><code>let</code>: Permite declarar variables que pueden ser modificadas.     <pre><code>let nombre = \"Juan\";\nnombre = \"Ana\"; // Esto es v\u00e1lido\n</code></pre></li> <li><code>const</code>: Se utiliza para declarar constantes, es decir, valores que no cambian.     <pre><code>const pi = 3.1416;\n// pi = 3; // Esto generar\u00e1 un error\n</code></pre></li> <li><code>var</code>: Declaraci\u00f3n m\u00e1s antigua. Evita su uso en favor de <code>let</code> y <code>const</code> debido a problemas de alcance.     <pre><code>var edad = 25;\n</code></pre></li> </ol> <p>Buenas Pr\u00e1cticas</p> <ul> <li>Usa <code>const</code> siempre que el valor no cambie.</li> <li>Usa <code>let</code> cuando necesites cambiar el valor de la variable.</li> <li>Evita <code>var</code> para prevenir errores relacionados con el alcance.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#122-tipos-de-datos-primitivos","title":"1.2.2 Tipos de Datos Primitivos","text":"<p>JavaScript tiene los siguientes tipos de datos b\u00e1sicos:</p> <ol> <li> <p>String (Cadenas): Representa texto.     <pre><code>let mensaje = \"Hola, mundo!\";\nconsole.log(typeof mensaje); // \"string\"\n</code></pre></p> </li> <li> <p>Number (N\u00fameros): Incluye enteros y decimales.     <pre><code>let entero = 10;\nlet decimal = 3.14;\n</code></pre></p> </li> <li> <p>Boolean (Booleanos): Valores <code>true</code> o <code>false</code>.     <pre><code>let esActivo = true;\nlet esMayor = 10 &gt; 5; // true\n</code></pre></p> </li> <li> <p>Undefined: Indica que una variable ha sido declarada pero no tiene valor.     <pre><code>let indefinido;\nconsole.log(indefinido); // undefined\n</code></pre></p> </li> <li> <p>Null: Representa un valor intencionalmente vac\u00edo.     <pre><code>let vacio = null;\n</code></pre></p> </li> <li> <p>Symbol (S\u00edmbolos): Valores \u00fanicos e inmutables, utilizados principalmente en programaci\u00f3n avanzada.     <pre><code>let id = Symbol(\"id\");\n</code></pre></p> </li> <li> <p>BigInt: Representa n\u00fameros enteros muy grandes.     <pre><code>let numeroGrande = 1234567890123456789012345678901234567890n;\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#123-operadores-basicos","title":"1.2.3 Operadores B\u00e1sicos","text":"<ul> <li> <p>asignaci\u00f3n: <code>=</code> <pre><code>let nombre = \"Juan\";\nnombre = \"Ana\";\nconsole.log(nombre); // Ana\n</code></pre> Operadores Aritm\u00e9ticos:</p> </li> <li> <p>Suma: <code>+</code> <pre><code>let resultado = 5 + 3; // 8\n</code></pre></p> </li> <li>Resta: <code>-</code> <pre><code>let resultado = 10 - 6; // 4\n</code></pre></li> <li>Multiplicaci\u00f3n: <code>*</code> <pre><code>let resultado = 4 * 2; // 8\n</code></pre></li> <li>Divisi\u00f3n: <code>/</code> <pre><code>let resultado = 9 / 3; // 3\n</code></pre></li> <li>Resto o m\u00f3dulo: <code>%</code> <pre><code>let resto = 10 % 3; // 1\n</code></pre></li> <li>Autoincremento: <code>++</code> <pre><code>let contador = 0;\ncontador++; // 1\n</code></pre></li> <li>Autoincremento: <code>--</code> <pre><code>let contador = 0;\ncontador--; // -1\n</code></pre></li> <li>Preincremento: <code>++variable</code> <pre><code>let contador = 0;\nlet resultado = ++contador; // 1\n</code></pre></li> <li>Predecremento: <code>--variable</code> <pre><code>let contador = 0;\nlet resultado = --contador; // -1\n</code></pre></li> </ul> <p>Operadores de Comparaci\u00f3n:</p> <ul> <li>Igualdad estricta: <code>===</code> <pre><code>console.log(5 === \"5\"); // false\n</code></pre></li> <li>Diferente: <code>!==</code> <pre><code>console.log(10 !== 5); // true\n</code></pre></li> <li>Mayor que: <code>&gt;</code> <pre><code>console.log(7 &gt; 3); // true\n</code></pre></li> <li>Menor que: <code>&lt;</code> <pre><code>console.log(2 &lt; 5); // true\n</code></pre></li> </ul> <p>Operadores L\u00f3gicos:</p> <ul> <li>AND (<code>&amp;&amp;</code>): Devuelve <code>true</code> si ambos operandos son verdaderos.     <pre><code>console.log(true &amp;&amp; false); // false\n</code></pre></li> <li>OR (<code>||</code>): Devuelve <code>true</code> si al menos uno de los operandos es verdadero.     <pre><code>console.log(true || false); // true\n</code></pre></li> <li>NOT (<code>!</code>): Invierte el valor l\u00f3gico.     <pre><code>console.log(!true); // false\n</code></pre></li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#124-ejercicio-practico","title":"1.2.4 Ejercicio Pr\u00e1ctico","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables, <code>a</code> y <code>b</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma, resta, multiplicaci\u00f3n, divisi\u00f3n y m\u00f3dulo de ambas variables.   </li> <li>Muestra los resultados en la consola.</li> </ul> Diagrama de flujo <pre><code>flowchart TD\n    Start[Inicio -&gt; Declarar variables a=10 y b=5] \n    Suma[\"`Mostrar suma: console.log(a + b);`\"]\n    Resta[\"`Mostrar resta: console.log(a - b);`\"]\n    Multiplicacion[\"`Mostrar multiplicaci\u00f3n: console.log(a * b);`\"]\n    Division[\"`Mostrar divisi\u00f3n: console.log(a / b);`\"]\n    Modulo[\"`Mostrar m\u00f3dulo: console.log(a % b);`\"]\n    End[Fin]\n\n    Start --&gt; Suma --&gt; Resta --&gt; Multiplicacion --&gt; Division --&gt; Modulo --&gt; End</code></pre> Soluci\u00f3n Operaciones matem\u00e1ticas b\u00e1sicas<pre><code>    let a = 10;\n    let b = 5;\n\n    console.log(\"Suma:\", a + b);\n    console.log(\"Resta:\", a - b);\n    console.log(\"Multiplicaci\u00f3n:\", a * b);\n    console.log(\"Divisi\u00f3n:\", a / b);\n    console.log(\"M\u00f3dulo:\", a % b);\n</code></pre> <p>Reto Adicional: Operaciones Matem\u00e1ticas Avanzadas</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables, <code>num1</code> y <code>num2</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma, resta, multiplicaci\u00f3n, divisi\u00f3n y m\u00f3dulo de ambas variables, y guarda los resultados en variables independientes.</li> <li>Muestra los resultados:<ul> <li>Primero, cada operaci\u00f3n en una l\u00ednea individual.</li> <li>Luego, todos los resultados concatenados en una \u00fanica l\u00ednea.</li> </ul> </li> </ul> Diagrama de flujo <pre><code>flowchart TD\n    Start[Inicio -&gt; Declarar variables num1=10 y num2=5]\n    CalculoSuma[\"suma = num1 + num2\"]\n    CalculoResta[\"resta = num1 - num2\"]\n    CalculoMultiplicacion[\"multiplicacion = num1 * num2\"]\n    CalculoDivision[\"division = num1 / num2\"]\n    CalculoModulo[\"modulo = num1 % num2\"]\n    MostrarResultadosInd[\"Mostrar resultados individuales\"]\n    MostrarResultadoConcat[\"`Mostrar concatenados:\n                console.log(Resultados: suma=${suma}, resta=${resta}, mult=${multiplicacion}, div=${division}, m\u00f3dulo=${modulo});`\"]\n    End[Fin]\n\n    Start --&gt; CalculoSuma --&gt; CalculoResta --&gt; CalculoMultiplicacion --&gt; CalculoDivision --&gt; CalculoModulo\n    CalculoModulo --&gt; MostrarResultadosInd --&gt; MostrarResultadoConcat --&gt; End</code></pre> Soluci\u00f3n Operaciones matem\u00e1ticas avanzadas<pre><code>let num1 = 10;\nlet num2 = 5;\n\nlet suma = num1 + num2;\nlet resta = num1 - num2;\nlet multiplicacion = num1 * num2;\nlet division = num1 / num2;\nlet modulo = num1 % num2;\n\nconsole.log(\"Suma:\", suma);\nconsole.log(\"Resta:\", resta);\nconsole.log(\"Multiplicaci\u00f3n:\", multiplicacion);\nconsole.log(\"Divisi\u00f3n:\", division);\nconsole.log(\"M\u00f3dulo:\", modulo);\n\nconsole.log(`Resultados: suma=${suma}, resta=${resta}, mult=${multiplicacion}, div=${division}, m\u00f3dulo=${modulo}`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-1-suma-resta-y-multiplicacion-combinadas","title":"Ejercicio 1: Suma, resta y multiplicaci\u00f3n combinadas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara tres variables, <code>a</code>, <code>b</code> y <code>c</code>, con valores num\u00e9ricos.</li> <li>Calcula la suma de <code>a</code> y <code>b</code>.</li> <li>Multiplica el resultado de la suma por <code>c</code>.</li> <li>Muestra los resultados.</li> </ul> Soluci\u00f3n Suma, Resta y Multiplicaci\u00f3n<pre><code>let a = 5;\nlet b = 3;\nlet c = 2;\n\nlet suma = a + b;\nlet producto = suma * c;\n\nconsole.log(\"Suma:\", suma);\nconsole.log(\"Producto:\", producto);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-2-promedio-de-tres-numeros","title":"Ejercicio 2: Promedio de tres n\u00fameros","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara tres variables, <code>x</code>, <code>y</code> y <code>z</code>, con valores num\u00e9ricos.</li> <li>Calcula el promedio de estos n\u00fameros.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n Promedio de Tres N\u00fameros<pre><code>let x = 8;\nlet y = 6;\nlet z = 10;\n\nlet promedio = (x + y + z) / 3;\n\nconsole.log(\"Promedio:\", promedio);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-3-area-de-un-rectangulo","title":"Ejercicio 3: \u00c1rea de un rect\u00e1ngulo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables <code>largo</code> y <code>ancho</code> con valores num\u00e9ricos.</li> <li>Calcula el \u00e1rea del rect\u00e1ngulo.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n \u00c1rea de un Rect\u00e1ngulo<pre><code>let largo = 7;\nlet ancho = 4;\n\nlet area = largo * ancho;\n\nconsole.log(\"\u00c1rea del rect\u00e1ngulo:\", area);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-4-perimetro-y-area-de-un-circulo","title":"Ejercicio 4: Per\u00edmetro y \u00e1rea de un c\u00edrculo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>radio</code> con un valor num\u00e9rico.</li> <li>Calcula el per\u00edmetro y el \u00e1rea del c\u00edrculo.</li> <li>Muestra ambos resultados.</li> </ul> Soluci\u00f3n C\u00edrculo: Per\u00edmetro y \u00c1rea<pre><code>let radio = 5;\n\nlet perimetro = 2 * Math.PI * radio;\nlet area = Math.PI * radio * radio;\n\nconsole.log(\"Per\u00edmetro del c\u00edrculo:\", perimetro);\nconsole.log(\"\u00c1rea del c\u00edrculo:\", area);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-5-calculo-del-iva","title":"Ejercicio 5: C\u00e1lculo del IVA","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>precio</code> con un valor num\u00e9rico y otra <code>iva</code> con un porcentaje.</li> <li>Calcula el importe del IVA y el precio total.</li> <li>Muestra el IVA y el total.</li> </ul> Soluci\u00f3n C\u00e1lculo del IVA<pre><code>let precio = 100;\nlet iva = 21;\n\nlet importeIVA = (precio * iva) / 100;\nlet precioTotal = precio + importeIVA;\n\nconsole.log(\"IVA:\", importeIVA);\nconsole.log(\"Precio total:\", precioTotal);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#explicacion-funciones-de-manipulacion-de-cadenas-en-javascript","title":"Explicaci\u00f3n: Funciones de Manipulaci\u00f3n de Cadenas en JavaScript","text":"<p>En esta secci\u00f3n aprenderemos algunas funciones b\u00e1sicas para manipular cadenas en JavaScript. Estas funciones te permitir\u00e1n realizar tareas comunes como concatenar texto, convertir may\u00fasculas/min\u00fasculas y mucho m\u00e1s.</p> <ol> <li> <p>Concatenar cadenas: </p> <p>Info</p> <ul> <li>Combina dos o m\u00e1s cadenas en una sola utilizando el operador <code>+</code> o las plantillas de cadenas (template strings) con backticks (``).</li> <li>Ejemplo:     <pre><code>let nombre = \"Juan\";\nlet apellido = \"P\u00e9rez\";\nconsole.log(\"tu nombre es: \" + nombre + \" \" + apellido); // Juan P\u00e9rez\nconsole.log(`tu nombre es: ${nombre} ${apellido}`); // Juan P\u00e9rez\n</code></pre></li> </ul> </li> <li> <p>Obtener la longitud de una cadena (<code>.length</code>):</p> <p>Info</p> <ul> <li>Devuelve el n\u00famero de caracteres de una cadena, incluidos los espacios.</li> <li>Ejemplo:     <pre><code>let frase = \"Hola, mundo\";\nconsole.log(frase.length); // 11\n</code></pre></li> </ul> </li> <li> <p>Convertir a may\u00fasculas (<code>.toUpperCase()</code>):</p> <p>Info</p> <ul> <li>Convierte todos los caracteres de la cadena a may\u00fasculas.</li> <li>Ejemplo:     <pre><code>    let texto = \"hola\";\n    console.log(texto.toUpperCase()); // HOLA\n</code></pre></li> </ul> </li> <li> <p>Convertir a min\u00fasculas (<code>.toLowerCase()</code>):</p> <p>Info</p> <ul> <li>Convierte todos los caracteres de la cadena a min\u00fasculas.</li> <li>Ejemplo:     <pre><code>let texto = \"HOLA\";\nconsole.log(texto.toLowerCase()); // hola\n</code></pre></li> </ul> </li> <li> <p>Extraer parte de una cadena (<code>.slice()</code>):</p> <p>Info</p> <ul> <li>Devuelve una secci\u00f3n de la cadena especificando el \u00edndice de inicio y final.</li> <li>Ejemplo:     <pre><code>let mensaje = \"JavaScript\";\nconsole.log(mensaje.slice(0, 4)); // Java\n</code></pre></li> </ul> </li> <li> <p>Reemplazar texto en una cadena (<code>.replace()</code>):</p> <p>Info</p> <ul> <li>Reemplaza una parte de la cadena con otra.</li> <li>Ejemplo:     <pre><code>let frase = \"El cielo es azul\";\nconsole.log(frase.replace(\"azul\", \"verde\")); // El cielo es verde\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicios-de-manipulacion-de-cadenas","title":"Ejercicios de Manipulaci\u00f3n de Cadenas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-6-concatenar-cadenas","title":"Ejercicio 6: Concatenar cadenas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara dos variables <code>nombre</code> y <code>edad</code>.</li> <li>Crea una nueva variable concatenando ambas cadenas: <code>mi nombre es [nombre] y tengo [edad] a\u00f1os</code>.</li> <li>Muestra la cadena completa.</li> </ul> Soluci\u00f3n Concatenar Cadenas<pre><code>let nombre = \"Juan\";\nlet edad = 30;\n\nlet cadenaCompleta = `Mi nombre es ${nombre} y tengo ${edad} a\u00f1os`;\n\nconsole.log(\"Resultado:\", cadenaCompleta);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-7-longitud-de-una-cadena","title":"Ejercicio 7: Longitud de una cadena","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>frase</code> con una oraci\u00f3n: <code>Hola, \u00bfc\u00f3mo est\u00e1s?</code>.</li> <li>Calcula la longitud de la cadena.</li> <li>Muestra el resultado.</li> </ul> Soluci\u00f3n Longitud de una Cadena<pre><code>let frase = \"Hola, \u00bfc\u00f3mo est\u00e1s?\";\n\nlet longitud = frase.length;\n\nconsole.log(\"Longitud de la cadena:\", longitud);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-8-convertir-a-mayusculas-y-minusculas","title":"Ejercicio 8: Convertir a may\u00fasculas y min\u00fasculas","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>texto</code>: <code>JavaScript es divertido</code>.</li> <li>Convierte el texto a may\u00fasculas y a min\u00fasculas.</li> <li>Muestra ambos resultados.</li> </ul> Soluci\u00f3n May\u00fasculas y Min\u00fasculas<pre><code>let texto = \"JavaScript es divertido\";\n\nlet textoMayus = texto.toUpperCase();\nlet textoMinus = texto.toLowerCase();\n\nconsole.log(\"En may\u00fasculas:\", textoMayus);\nconsole.log(\"En min\u00fasculas:\", textoMinus);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-9-extraer-parte-de-una-cadena","title":"Ejercicio 9: Extraer parte de una cadena","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>mensaje</code> con una oraci\u00f3n: <code>JavaScript es muy poderoso</code>.</li> <li>Extrae una parte de la cadena (primeras 10 letras).</li> <li>Muestra la parte extra\u00edda.</li> </ul> Soluci\u00f3n Extraer Parte de una Cadena<pre><code>let mensaje = \"JavaScript es muy poderoso\";\n\nlet parte = mensaje.slice(0, 10);\n\nconsole.log(\"Parte extra\u00edda:\", parte);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-10-reemplazar-palabras-en-una-frase","title":"Ejercicio 10: Reemplazar palabras en una frase","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Declara una variable <code>frase</code> con el texto: <code>\"El cielo es azul y el mar tambi\u00e9n es azul\"</code>.</li> <li>Usa <code>.replace()</code> para cambiar la primera ocurrencias de la palabra <code>\"azul\"</code> por <code>\"verde\"</code>.</li> <li>Muestra la frase modificada </li> </ul> Soluci\u00f3n Reemplazar Palabras en una Frase<pre><code>let frase = \"El cielo es azul y el mar tambi\u00e9n es azul\";\n\n// Reemplazar solo la primera ocurrencia\nlet nuevaFrase = frase.replace(\"azul\", \"verde\");\n\nconsole.log(\"Frase modificada (una ocurrencia):\", nuevaFrase);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#uso-de-prompt-sync-en-nodejs","title":"Uso de <code>prompt-sync</code> en Node.js","text":"<p>ES6 introdujo el m\u00e9todo <code>prompt</code> para solicitar datos al usuario en el navegador, pero en Node.js no est\u00e1 disponible por defecto. Para interactuar con el usuario en Node.js, puedes utilizar la biblioteca <code>prompt-sync</code>. Es la manera que tenemos en Node.js de solicitar datos al usuario de forma sincr\u00f3nica.</p> <p><code>prompt-sync</code> es una biblioteca que facilita las entradas sincronizadas en Node.js.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#instalacion","title":"Instalaci\u00f3n:","text":"<pre><code>`npm install prompt-sync`\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejemplo","title":"Ejemplo:","text":"Uso de prompt-sync<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = prompt(\"\u00bfQu\u00e9 edad tienes? \");\nconsole.log(`\u00a1Hola, tienes ${edad} a\u00f1os`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-11-solicitar-el-nombre-del-usuario","title":"Ejercicio 11: Solicitar el nombre del usuario","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario su nombre utilizando la biblioteca <code>prompt-sync</code>.</li> <li>Muestra un saludo personalizado en la consola, como: \"\u00a1Hola, [nombre]!\".</li> </ul> Soluci\u00f3n Solicitar el Nombre del Usuario<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar el nombre al usuario\nlet nombre = prompt(\"\u00bfC\u00f3mo te llamas? \");\n\n// Mostrar saludo personalizado\nconsole.log(`\u00a1Hola, ${nombre}!`);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-12-calculadora-basica","title":"Ejercicio 12: Calculadora b\u00e1sica","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario dos n\u00fameros utilizando la biblioteca <code>prompt-sync</code>.</li> <li>Realiza las operaciones matem\u00e1ticas b\u00e1sicas: suma, resta, multiplicaci\u00f3n y divisi\u00f3n.</li> <li>Muestra los resultados de todas las operaciones en la consola.</li> </ul> Soluci\u00f3n Calculadora B\u00e1sica<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar n\u00fameros al usuario\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\n// Realizar operaciones matem\u00e1ticas b\u00e1sicas\nlet suma = num1 + num2;\nlet resta = num1 - num2;\nlet multiplicacion = num1 * num2;\nlet division = num1 / num2;\n\n// Mostrar los resultados\nconsole.log(\"Resultados:\");\nconsole.log(\"Suma: \" + suma);\nconsole.log(\"Resta: \" + resta);\nconsole.log(\"Multiplicaci\u00f3n: \" + multiplicacion);\nconsole.log(\"Divisi\u00f3n: \" + division);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_12/#ejercicio-extra-resolver-una-ecuacion-de-segundo-grado","title":"Ejercicio Extra: Resolver una ecuaci\u00f3n de segundo grado","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario los coeficientes <code>a</code>, <code>b</code> y <code>c</code> de una ecuaci\u00f3n de segundo grado de la forma: ( ax^2 + bx + c = 0 ).</li> <li>Calcula las ra\u00edces de la ecuaci\u00f3n utilizando la f\u00f3rmula general:   [   x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}   ]</li> <li>Muestra las dos ra\u00edces en la consola (si existen).</li> </ul> Soluci\u00f3n Resolver Ecuaci\u00f3n de Segundo Grado<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar coeficientes al usuario\nlet a = parseFloat(prompt(\"Introduce el coeficiente a: \"));\nlet b = parseFloat(prompt(\"Introduce el coeficiente b: \"));\nlet c = parseFloat(prompt(\"Introduce el coeficiente c: \"));\n\n// Calcular el discriminante\nlet discriminante = b * b - 4 * a * c;\n\nif (discriminante &gt; 0) {\n    // Dos ra\u00edces reales\n    let raiz1 = (-b + Math.sqrt(discriminante)) / (2 * a);\n    let raiz2 = (-b - Math.sqrt(discriminante)) / (2 * a);\n    console.log(\"Las ra\u00edces de la ecuaci\u00f3n son:\");\n    console.log(\"Ra\u00edz 1:\", raiz1);\n    console.log(\"Ra\u00edz 2:\", raiz2);\n} else if (discriminante === 0) {\n    // Una \u00fanica ra\u00edz\n    let raiz = -b / (2 * a);\n    console.log(\"La ecuaci\u00f3n tiene una ra\u00edz \u00fanica:\");\n    console.log(\"Ra\u00edz:\", raiz);\n} else {\n    // Ra\u00edces complejas\n    console.log(\"La ecuaci\u00f3n no tiene ra\u00edces reales.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#13-estructuras-condicionales-y-de-control","title":"1.3. Estructuras condicionales y de control","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-if-else","title":"\u00bfQu\u00e9 es un if-else?","text":"<p>La estructura if-else permite tomar decisiones en funci\u00f3n de una condici\u00f3n. Eval\u00faa si una expresi\u00f3n l\u00f3gica es <code>true</code> o <code>false</code> y ejecuta el bloque correspondiente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-if-else","title":"Sintaxis de if-else","text":"<pre><code>if (condici\u00f3n) {\n    // C\u00f3digo si la condici\u00f3n es verdadera\n} else {\n    // C\u00f3digo si la condici\u00f3n es falsa\n}\n</code></pre> <p>Ejemplo</p> <p>Programa que evalua si una variable num\u00e9rica que simula la edad de una persona es mayor o menor de edad.</p> <p>Ejemplo de If-Else</p> <p>En el siguiente ejemplo, se eval\u00faa si una persona es mayor de edad:</p> diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Definir edad = 18]\n    B --&gt; C{edad &gt;= 18}\n    C --&gt;|S\u00ed| D[\"Eres mayor de edad\"]\n    C --&gt;|No| E[\"Eres menor de edad\"]\n    D --&gt; F[Fin]\n    E --&gt; F[Fin]</code></pre> C\u00f3digo javascript del ejemplo <pre><code>let edad = 18;\n\nif (edad &gt;= 18) {\n    console.log(\"Eres mayor de edad\");\n} else {\n    console.log(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios-de-if-else","title":"Ejercicios de If-Else","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-1-comparar-numeros","title":"Ejercicio 1: Comparar n\u00fameros","text":"<p>Instrucciones</p> <p>Lo vamos a solucionar en 4 pasos, viendo en cada uno de ellos una parte de la soluci\u00f3n.</p> <p>Crea un programa que haga lo siguiente paso a paso:</p> <ul> <li>Paso 1: Determina si dos n\u00fameros son iguales.</li> <li>Paso 2: Eval\u00faa si el primer n\u00famero es mayor que el segundo.</li> <li>Paso 3: Eval\u00faa si el segundo n\u00famero es mayor que el primero.</li> <li>Paso 4: Combina todas las evaluaciones en un \u00fanico programa.</li> </ul> <p>Paso 1: Determinar si dos n\u00fameros son iguales</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Determina si los n\u00fameros son iguales.</li> <li>Muestra un mensaje indicando que los n\u00fameros son iguales.</li> </ul> Soluci\u00f3n Paso 1: Determinar si son iguales<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 === num2) {\n    console.log(\"Los n\u00fameros son iguales.\");\n}\n</code></pre> <p>Paso 2: Evaluar si el primer n\u00famero es mayor que el segundo</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si el primer n\u00famero es mayor que el segundo.</li> <li>Muestra un mensaje indicando que el primer n\u00famero es mayor.</li> </ul> Soluci\u00f3n Paso 2: El primero es mayor<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 &gt; num2) {\n    console.log(`${num1} es mayor que ${num2}`);\n}\n</code></pre> <p>Paso 3: Evaluar si el segundo n\u00famero es mayor que el primero</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si el segundo n\u00famero es mayor que el primero.</li> <li>Muestra un mensaje indicando que el segundo n\u00famero es mayor.</li> </ul> Soluci\u00f3n Paso 3: El segundo es mayor<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num2 &gt; num1) {\n    console.log(`${num2} es mayor que ${num1}`);\n}\n</code></pre> <p>Paso 4: Combinar todas las evaluaciones</p> <p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca dos n\u00fameros.</li> <li>Eval\u00faa si los n\u00fameros son iguales, si el primero es mayor o si el segundo es mayor.</li> <li>Muestra un mensaje correspondiente para cada caso.</li> </ul> Diagrama <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar el primer n\u00famero]\n    B --&gt; C[Solicitar el segundo n\u00famero]\n    C --&gt; D{\u00bfnum1 es igual a num2?}\n\n    D --&gt;|S\u00ed| E[\"Los n\u00fameros son iguales\"]\n    D --&gt;|No| F{\u00bfnum1 es mayor que num2?}\n\n    F --&gt;|S\u00ed| G[\"num1 es mayor que num2\"]\n    F --&gt;|No| H[\"num2 es mayor que num1\"]\n\n    E --&gt; I[Fin]\n    G --&gt; I\n    H --&gt; I</code></pre> Soluci\u00f3n Paso 4: Todo junto<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\n\nif (num1 === num2) {\n    console.log(\"Los n\u00fameros son iguales.\");\n} else if (num1 &gt; num2) {\n    console.log(`${num1} es mayor que ${num2}`);\n} else {\n    console.log(`${num2} es mayor que ${num1}`);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-2-numero-positivo-o-negativo","title":"Ejercicio 2: N\u00famero positivo o negativo","text":"<p>Crea un programa que haga lo siguiente paso a paso:</p> <ul> <li>Paso 1: Determina si un n\u00famero es igual a cero.</li> <li>Paso 2: Eval\u00faa si un n\u00famero es positivo.</li> <li>Paso 3: Eval\u00faa si un n\u00famero es negativo.</li> <li>Paso 4: Combina todas las evaluaciones en un \u00fanico programa.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-1-determinar-si-un-numero-es-cero","title":"Paso 1: Determinar si un n\u00famero es cero","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Determina si el n\u00famero es igual a cero.</li> <li>Muestra un mensaje indicando que el n\u00famero es cero.</li> </ul> Soluci\u00f3n Paso 1: N\u00famero es cero<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero === 0) {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-2-determinar-si-un-numero-es-positivo","title":"Paso 2: Determinar si un n\u00famero es positivo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es positivo.</li> <li>Muestra un mensaje indicando que el n\u00famero es positivo.</li> </ul> Soluci\u00f3n Paso 2: N\u00famero positivo<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-3-determinar-si-un-numero-es-negativo","title":"Paso 3: Determinar si un n\u00famero es negativo","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es negativo.</li> <li>Muestra un mensaje indicando que el n\u00famero es negativo.</li> </ul> Soluci\u00f3n Paso 3: N\u00famero negativo<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#paso-4-combinar-todas-las-evaluaciones","title":"Paso 4: Combinar todas las evaluaciones","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Eval\u00faa si el n\u00famero es positivo, negativo o igual a cero.</li> <li>Muestra un mensaje correspondiente para cada caso.</li> </ul> Soluci\u00f3n Paso 4: Todo junto<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\n\nif (numero &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n} else if (numero &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n} else {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre> Diagrama de Flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar un n\u00famero]\n    B --&gt; C{\u00bfN\u00famero &gt; 0?}\n\n    C --&gt;|S\u00ed| D[\"El n\u00famero es positivo\"]\n    C --&gt;|No| E{\u00bfN\u00famero &lt; 0?}\n\n    E --&gt;|S\u00ed| F[\"El n\u00famero es negativo\"]\n    E --&gt;|No| G[\"El n\u00famero es cero\"]\n\n    D --&gt; H[Fin]\n    F --&gt; H\n    G --&gt; H</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-3-verificar-credenciales-de-acceso","title":"Ejercicio 3: Verificar credenciales de acceso","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un nombre de usuario y una contrase\u00f1a.</li> <li>Compara las entradas con dos constantes predefinidas: <code>USER</code> y <code>PASSWORD</code>.</li> <li>Si coinciden, muestra el mensaje \"Acceso correcto\".</li> <li>Si no coinciden, muestra el mensaje \"Acceso incorrecto\" en rojo.</li> <li>Para el color rojo pudes utilizar la librer\u00eda <code>chalk</code>. <code>pip install chalk</code> </li> </ul> Soluci\u00f3n Verificar credenciales<pre><code>const prompt = require(\"prompt-sync\")();\nconst chalk = require(\"chalk\");\n\n// Constantes predefinidas\nconst USER = \"admin\";\nconst PASSWORD = \"12345\";\n\n// Solicitar credenciales al usuario\nlet login = prompt(\"Introduce tu nombre de usuario: \");\nlet pwd = prompt(\"Introduce tu contrase\u00f1a: \");\n\n// Verificar credenciales\nif (login === USER &amp;&amp; pwd === PASSWORD) {\n    console.log(\"Acceso correcto\");\n} else {\n    console.log(chalk.red(\"Acceso incorrecto\"));\n}\n</code></pre> Explicaci\u00f3n del c\u00f3digo <ol> <li>Constantes:<ul> <li>Se definen <code>USER</code> y <code>PASSWORD</code> como las credenciales v\u00e1lidas.</li> </ul> </li> <li>Entrada del Usuario:<ul> <li><code>prompt</code> solicita al usuario el nombre de usuario (<code>login</code>) y la contrase\u00f1a (<code>pwd</code>).</li> </ul> </li> <li>Verificaci\u00f3n:<ul> <li>Se compara si ambas entradas coinciden con las constantes.</li> <li>Si ambas coinciden, se muestra \"Acceso correcto\".</li> <li>Si no coinciden, se muestra \"Acceso incorrecto\" con texto en rojo</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tratamiento-de-cadenas-en-if-else","title":"Tratamiento de cadenas en IF-ELSE","text":"<p>Vamos a ver un programa con las siguientes caracter\u00edsticas:</p> <ul> <li>Solicita al usuario que introduzca dos cadenas.</li> <li>Compara las cadenas considerando may\u00fasculas y min\u00fasculas (<code>ana</code> es distinto de <code>ANA</code>).</li> <li>Utiliza funciones como <code>toUpperCase</code> o <code>toLowerCase</code> para compararlas ignorando may\u00fasculas y min\u00fasculas.</li> <li>Comprueba si una cadena tiene un n\u00famero de caracteres entre un m\u00ednimo y un m\u00e1ximo.</li> <li>Explica que, seg\u00fan el orden lexicogr\u00e1fico, <code>\"ana\"</code> es menor que <code>\"ANA\"</code>.</li> </ul> <p>Soluci\u00f3n</p> Comparaci\u00f3n de cadenas<pre><code>const prompt = require(\"prompt-sync\")();\n\n// Solicitar cadenas al usuario\nlet cadena1 = prompt(\"Introduce la primera cadena: \");\nlet cadena2 = prompt(\"Introduce la segunda cadena: \");\n\n// Comparaci\u00f3n directa (sensible a may\u00fasculas y min\u00fasculas)\nif (cadena1 === cadena2) {\n    console.log(\"Las cadenas son iguales (sensible a may\u00fasculas).\");\n} else {\n    console.log(\"Las cadenas son distintas (sensible a may\u00fasculas).\");\n}\n\n// Comparaci\u00f3n ignorando may\u00fasculas y min\u00fasculas\nif (cadena1.toLowerCase() === cadena2.toLowerCase()) {\n    console.log(\"Las cadenas son iguales (ignorando may\u00fasculas).\");\n} else {\n    console.log(\"Las cadenas son distintas (ignorando may\u00fasculas).\");\n}\n\n// Verificar longitud entre un m\u00ednimo y un m\u00e1ximo\nlet minLength = 3;\nlet maxLength = 10;\nif (cadena1.length &gt;= minLength &amp;&amp; cadena1.length &lt;= maxLength) {\n    console.log(`La primera cadena tiene una longitud v\u00e1lida (entre ${minLength} y ${maxLength}).`);\n} else {\n    console.log(`La primera cadena no tiene una longitud v\u00e1lida (entre ${minLength} y ${maxLength}).`);\n}\n\n// Comparaci\u00f3n lexicogr\u00e1fica\nif (\"ana\" &lt; \"ANA\") {\n    console.log('\"ana\" es menor que \"ANA\" en orden lexicogr\u00e1fico.');\n} else {\n    console.log('\"ana\" no es menor que \"ANA\" en orden lexicogr\u00e1fico.');\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ol> <li> <p>Comparaci\u00f3n Directa (Sensible a May\u00fasculas y Min\u00fasculas):</p> <ul> <li>La comparaci\u00f3n <code>cadena1 === cadena2</code> verifica si las cadenas son exactamente iguales, considerando diferencias entre may\u00fasculas y min\u00fasculas. Por ejemplo, <code>\"ana\" !== \"ANA\"</code>.</li> </ul> </li> <li> <p>Comparaci\u00f3n Ignorando May\u00fasculas y Min\u00fasculas:</p> <ul> <li>Se utilizan las funciones <code>toLowerCase()</code> o <code>toUpperCase()</code> para convertir ambas cadenas a un formato uniforme antes de compararlas. Esto hace que <code>\"ana\" === \"ANA\"</code>.</li> </ul> </li> <li> <p>Verificar Longitud:</p> <ul> <li>Se usa <code>cadena1.length</code> para verificar si la longitud de la primera cadena est\u00e1 entre los l\u00edmites definidos (<code>minLength</code> y <code>maxLength</code>).</li> </ul> </li> <li> <p>Orden Lexicogr\u00e1fico:</p> <ul> <li>En JavaScript, las cadenas se comparan seg\u00fan su valor Unicode. En el caso de <code>\"ana\"</code> y <code>\"ANA\"</code>, las letras min\u00fasculas tienen valores Unicode mayores que las may\u00fasculas. Por lo tanto:<ul> <li><code>\"ana\" &lt; \"ANA\"</code> es <code>false</code>.</li> </ul> </li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#operadores-logicos-en-javascript","title":"Operadores L\u00f3gicos en JavaScript","text":"<p>En JavaScript, los operadores l\u00f3gicos se usan para combinar condiciones o modificar su resultado. Los tres operadores principales son:</p> <ul> <li><code>&amp;&amp;</code> (AND o Y): Eval\u00faa si todas las condiciones son verdaderas.</li> <li><code>||</code> (OR o O): Eval\u00faa si al menos una condici\u00f3n es verdadera.</li> <li><code>!</code> (NOT o NO): Invierte el valor l\u00f3gico de una condici\u00f3n (de verdadero a falso y viceversa).</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tablas-de-verdad","title":"Tablas de Verdad","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#1-operador-and","title":"1. Operador <code>&amp;&amp;</code> (AND)","text":"<p>El operador <code>&amp;&amp;</code> retorna <code>true</code> solo si todas las condiciones son <code>true</code>.</p> Condici\u00f3n A Condici\u00f3n B A &amp;&amp; B <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#2-operador-or","title":"2. Operador <code>||</code> (OR)","text":"<p>El operador <code>||</code> retorna <code>true</code> si al menos una condici\u00f3n es <code>true</code>.</p> Condici\u00f3n A Condici\u00f3n B A <code>\\|\\|</code> B <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#3-operador-not","title":"3. Operador <code>!</code> (NOT)","text":"<p>El operador <code>!</code> invierte el valor l\u00f3gico de la condici\u00f3n.</p> Condici\u00f3n !Condici\u00f3n <code>true</code> <code>false</code> <code>false</code> <code>true</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplos-de-operadores-logicos","title":"Ejemplos de Operadores L\u00f3gicos","text":"Operador Ejemplo Resultado <code>&amp;&amp;</code> <code>5 &gt; 3 &amp;&amp; 10 &gt; 8</code> <code>true</code> <code>&amp;&amp;</code> <code>5 &gt; 3 &amp;&amp; 10 &lt; 8</code> <code>false</code> <code>||</code> <code>5 &gt; 3 || 10 &lt; 8</code> <code>true</code> <code>||</code> <code>5 &lt; 3 || 10 &lt; 8</code> <code>false</code> <code>!</code> <code>!(5 &gt; 3)</code> <code>false</code> <code>!</code> <code>!(5 &lt; 3)</code> <code>true</code> Mixto <code>5 &gt; 3 &amp;&amp; (10 &lt; 8 || 2 === 2)</code> <code>true</code> Mixto <code>!(5 &gt; 3 &amp;&amp; 10 &gt; 8)</code> <code>false</code>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#notas-clave","title":"Notas Clave","text":"<ol> <li> <p>Precedencia de Operadores:</p> <pre><code> - `!` tiene mayor precedencia que `&amp;&amp;` y `||`.\n - Agrupa condiciones con par\u00e9ntesis para asegurarte de que se eval\u00faan en el orden esperado.\n         - Ejemplo: `!(A &amp;&amp; B)` no es lo mismo que `!A &amp;&amp; B`.\n</code></pre> </li> <li> <p>Cortocircuito:</p> <pre><code> - En `&amp;&amp;`, si la primera condici\u00f3n es `false`, las dem\u00e1s no se eval\u00faan.\n - En `||`, si la primera condici\u00f3n es `true`, las dem\u00e1s no se eval\u00faan.\n</code></pre> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#leyes-de-de-morgan","title":"Leyes de De Morgan","text":"<p>Las Leyes de De Morgan son reglas fundamentales en l\u00f3gica y \u00e1lgebra booleana. Estas leyes ayudan a simplificar expresiones l\u00f3gicas y a entender c\u00f3mo se relacionan los operadores <code>&amp;&amp;</code> (AND), <code>||</code> (OR) y <code>!</code> (NOT).</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#las-dos-leyes-de-de-morgan","title":"Las dos leyes de De Morgan","text":"<ol> <li> <p>Primera ley:     &gt; La negaci\u00f3n de una conjunci\u00f3n (<code>A &amp;&amp; B</code>) es equivalente a la disyunci\u00f3n de las negaciones (<code>!A || !B</code>).</p> <p>Formalmente: <pre><code>!(A &amp;&amp; B) \u2261 !A || !B\n</code></pre></p> <p>Ejemplo en JavaScript: <pre><code>let A = true;\nlet B = false;\n\nconsole.log(!(A &amp;&amp; B));  // true\nconsole.log(!A || !B);   // true (equivalente por De Morgan)\n</code></pre></p> </li> </ol> <ol> <li> <p>Segunda ley:     &gt; La negaci\u00f3n de una disyunci\u00f3n (<code>A || B</code>) es equivalente a la conjunci\u00f3n de las negaciones (<code>!A &amp;&amp; !B</code>).</p> <p>Formalmente: <pre><code>!(A || B) \u2261 !A &amp;&amp; !B\n</code></pre></p> <p>Ejemplo en JavaScript: <pre><code>let A = true;\nlet B = false;\n\nconsole.log(!(A || B));  // false\nconsole.log(!A &amp;&amp; !B);   // false (equivalente por De Morgan)\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#como-entender-las-leyes-de-de-morgan","title":"C\u00f3mo entender las leyes de De Morgan","text":"<ol> <li> <p>Primera Ley (<code>!(A &amp;&amp; B) \u2261 !A || !B</code>):</p> <ul> <li>Si NO se cumplen ambas condiciones (A y B), entonces AL MENOS UNA de las condiciones debe ser falsa.</li> </ul> </li> <li> <p>Segunda Ley (<code>!(A || B) \u2261 !A &amp;&amp; !B</code>):</p> <ul> <li>Si NO se cumple ninguna de las condiciones (A o B), entonces AMBAS condiciones deben ser falsas.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#tablas-de-verdad_1","title":"Tablas de Verdad","text":"<ul> <li>Primera Ley (<code>!(A &amp;&amp; B) \u2261 !A || !B</code>)</li> </ul> A B A &amp;&amp; B !(A &amp;&amp; B) !A !B !A || !B true true true false false false false true false false true false true true false true false true true false true false false false true true true true <ul> <li>Segunda Ley (<code>!(A || B) \u2261 !A &amp;&amp; !B</code>)</li> </ul> A B A || B !(A || B) !A !B !A &amp;&amp; !B true true true false false false false true false true false false true false false true true false true false false false false false true true true true <p>Ejemplos pr\u00e1cticos</p> <ul> <li>Ejemplo 1: Verificar si ninguna condici\u00f3n es verdadera Si queremos verificar si ni <code>A</code> ni <code>B</code> son verdaderos, podemos usar:</li> </ul> <pre><code>let A = false;\nlet B = false;\n\nconsole.log(!(A || B));  // true\nconsole.log(!A &amp;&amp; !B);   // true (equivalente)\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#por-que-son-importantes-las-leyes-de-de-morgan","title":"\u00bfPor qu\u00e9 son importantes las Leyes de De Morgan?","text":"<ol> <li> <p>Simplificaci\u00f3n de expresiones:</p> <ul> <li>Estas leyes permiten reescribir expresiones l\u00f3gicas de manera m\u00e1s comprensible o adecuada para ciertos contextos.</li> </ul> </li> <li> <p>Optimizaci\u00f3n del c\u00f3digo:</p> <ul> <li>Ayudan a escribir condiciones m\u00e1s eficientes o claras.</li> </ul> </li> <li> <p>Comprensi\u00f3n de la l\u00f3gica booleana:</p> <ul> <li>Son una base fundamental en programaci\u00f3n, especialmente en algoritmos, bases de datos y sistemas digitales.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-4-validar-acceso-segun-edad-y-rol","title":"Ejercicio 4: Validar acceso seg\u00fan edad y rol","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca su edad y su rol.</li> <li>Permite el acceso solo si:<ul> <li>El usuario tiene 18 a\u00f1os o m\u00e1s y es administrador.</li> <li>O si tiene menos de 18 a\u00f1os pero el rol es \"invitado\".</li> <li>Y se asegura de que el rol no est\u00e9 vac\u00edo.</li> </ul> </li> </ul> Soluci\u00f3n Validar acceso seg\u00fan edad y rol<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = parseInt(prompt(\"Introduce tu edad: \"));\nlet rol = prompt(\"Introduce tu rol (admin/invitado): \").trim();\n\nif ((edad &gt;= 18 &amp;&amp; rol === \"admin\") || (edad &lt; 18 &amp;&amp; rol === \"invitado\") &amp;&amp; rol !== \"\") {\n    console.log(\"Acceso permitido\");\n} else {\n    console.log(\"Acceso denegado\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-5-determinar-si-un-numero-cumple-multiples-condiciones","title":"Ejercicio 5: Determinar si un n\u00famero cumple m\u00faltiples condiciones","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca un n\u00famero.</li> <li>Determina si el n\u00famero cumple al menos una de las siguientes condiciones:<ul> <li>Es divisible por 2 y mayor que 10.</li> <li>O es divisible por 3 pero no mayor que 50.</li> <li>Y que el n\u00famero no sea negativo.</li> </ul> </li> </ul> Soluci\u00f3n Validar n\u00famero con m\u00faltiples condiciones<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseInt(prompt(\"Introduce un n\u00famero: \"));\n\nif ((numero % 2 === 0 &amp;&amp; numero &gt; 10) || (numero % 3 === 0 &amp;&amp; !(numero &gt; 50)) &amp;&amp; numero &gt;= 0) {\n    console.log(\"El n\u00famero cumple al menos una condici\u00f3n\");\n} else {\n    console.log(\"El n\u00famero no cumple ninguna condici\u00f3n\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio-6-validar-si-un-texto-cumple-criterios-mixtos","title":"Ejercicio 6: Validar si un texto cumple criterios mixtos","text":"<p>Crea un programa que haga lo siguiente:</p> <ul> <li>Solicita al usuario que introduzca una cadena de texto.</li> <li>Determina si la cadena cumple todas las siguientes condiciones:<ul> <li>Tiene entre 5 y 15 caracteres.</li> <li>O comienza con la letra \"A\" pero no termina con la letra \"Z\".</li> <li>Y no contiene espacios en blanco.</li> </ul> </li> </ul> Soluci\u00f3n Validar texto con m\u00faltiples condiciones<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet texto = prompt(\"Introduce una cadena de texto: \").trim();\n\nif ((texto.length &gt;= 5 &amp;&amp; texto.length &lt;= 15) || (texto.startsWith(\"A\") &amp;&amp; !texto.endsWith(\"Z\")) &amp;&amp; !texto.includes(\" \")) {\n    console.log(\"El texto cumple las condiciones\");\n} else {\n    console.log(\"El texto no cumple las condiciones\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#132-if-else-anidado","title":"1.3.2 If-Else Anidado","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-if-else-anidado","title":"\u00bfQu\u00e9 es un if-else anidado?","text":"<p>Un if-else anidado permite evaluar m\u00faltiples condiciones de manera jer\u00e1rquica. Es una estructura donde un bloque <code>if</code> o <code>else</code> contiene otro bloque <code>if</code> o <code>else</code> en su interior.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-if-else-anidado","title":"Sintaxis de if-else anidado","text":"Sintaxis de If-Else Anidado<pre><code>if (condici\u00f3n1) {\n    // C\u00f3digo si condici\u00f3n1 es verdadera\n} else {\n    if (condici\u00f3n2) {\n        // C\u00f3digo si condici\u00f3n2 es verdadera\n    } else {\n        // C\u00f3digo si ninguna condici\u00f3n es verdadera\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplo","title":"Ejemplo","text":"<p>Ejemplo de If-Else Anidado</p> <p>En este ejemplo, se eval\u00faa la calificaci\u00f3n de un estudiante y se asigna una letra seg\u00fan el rango:</p> Calificaci\u00f3n con If-Else Anidado<pre><code>const nota = 75;\n\nif (nota &gt;= 90) {\n    console.log(\"Tu calificaci\u00f3n es A\");\n} else {\n    if (nota &gt;= 80) {\n        console.log(\"Tu calificaci\u00f3n es B\");\n    } else {\n        console.log(\"Tu calificaci\u00f3n es C\");\n    }\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfNota &gt;= 90?}\n    B --&gt;|S\u00ed| C[Calificaci\u00f3n: A]\n    B --&gt;|No| D{\u00bfNota &gt;= 80?}\n    D --&gt;|S\u00ed| E[Calificaci\u00f3n: B]\n    D --&gt;|No| F[Calificaci\u00f3n: C]\n    C --&gt; G[Fin]\n    E --&gt; G\n    F --&gt; G</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios-de-if-else-anidado","title":"Ejercicios de If-Else Anidado","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios","title":"Ejercicios","text":"<p>Ejercicio 1: Clasificaci\u00f3n de edades</p> <ul> <li>Crea un programa que solicite al usuario su edad.</li> <li>Seg\u00fan la edad introducida, muestra:<ul> <li>\"Ni\u00f1o\" si la edad es menor a 12.</li> <li>\"Adolescente\" si la edad est\u00e1 entre 12 y 17.</li> <li>\"Adulto\" si la edad es 18 o mayor.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de edades<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet edad = parseInt(prompt(\"Introduce tu edad: \"));\n\nif (edad &lt; 12) {\n    console.log(\"Ni\u00f1o\");\n} else {\n    if (edad &lt;= 17) {\n        console.log(\"Adolescente\");\n    } else {\n        console.log(\"Adulto\");\n    }\n}\n</code></pre> <p>Ejercicio 2: Determinar un descuento</p> <ul> <li>Crea un programa que solicite el importe de una compra.</li> <li>Calcula y muestra el descuento seg\u00fan las siguientes reglas:<ul> <li>20% si el importe es mayor o igual a 100.</li> <li>10% si el importe est\u00e1 entre 50 y 99.</li> <li>Sin descuento si el importe es menor a 50.</li> </ul> </li> </ul> Soluci\u00f3n Determinaci\u00f3n de descuentos<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet importe = parseFloat(prompt(\"Introduce el importe de tu compra: \"));\n\nif (importe &gt;= 100) {\n    console.log(\"Descuento del 20% aplicado\");\n} else {\n    if (importe &gt;= 50) {\n        console.log(\"Descuento del 10% aplicado\");\n    } else {\n        console.log(\"Sin descuento\");\n    }\n}\n</code></pre> <p>Ejercicio 3: Clasificaci\u00f3n de temperaturas</p> <ul> <li>Crea un programa que solicite una temperatura en grados Celsius.</li> <li>Clasifica la temperatura seg\u00fan los siguientes rangos:<ul> <li>\"Fr\u00edo\" si es menor a 10\u00b0C.</li> <li>\"Templado\" si est\u00e1 entre 10\u00b0C y 25\u00b0C.</li> <li>\"Calor\" si es mayor a 25\u00b0C.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de temperaturas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet temperatura = parseFloat(prompt(\"Introduce la temperatura en grados Celsius: \"));\n\nif (temperatura &lt; 10) {\n    console.log(\"Fr\u00edo\");\n} else {\n    if (temperatura &lt;= 25) {\n        console.log(\"Templado\");\n    } else {\n        console.log(\"Calor\");\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#133-switch","title":"1.3.3 Switch","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-un-switch","title":"\u00bfQu\u00e9 es un switch?","text":"<p>El switch es una estructura de control que permite evaluar una expresi\u00f3n y ejecutar diferentes bloques de c\u00f3digo seg\u00fan su valor. Es \u00fatil cuando se tienen m\u00faltiples condiciones basadas en el mismo valor.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#sintaxis-de-switch","title":"Sintaxis de switch","text":"Sintaxis de Switch<pre><code>switch (expresi\u00f3n) {\n    case valor1:\n        // C\u00f3digo para el caso valor1\n        break;\n    case valor2:\n        // C\u00f3digo para el caso valor2\n        break;\n    default:\n        // C\u00f3digo si ning\u00fan caso coincide\n}\n</code></pre> <p>Nota: El uso de <code>break</code> asegura que el programa salga del bloque <code>switch</code> despu\u00e9s de ejecutar el caso correspondiente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejemplo_1","title":"Ejemplo","text":"<p>Ejemplo de Switch</p> <p>En este ejemplo, se determina el d\u00eda de la semana seg\u00fan un n\u00famero introducido:</p> D\u00eda de la semana con Switch<pre><code>const dia = 3;\n\nswitch (dia) {\n    case 1:\n        console.log(\"Lunes\");\n        break;\n    case 2:\n        console.log(\"Martes\");\n        break;\n    case 3:\n        console.log(\"Mi\u00e9rcoles\");\n        break;\n    case 4:\n        console.log(\"Jueves\");\n        break;\n    case 5:\n        console.log(\"Viernes\");\n        break;\n    default:\n        console.log(\"Fin de semana\");\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfD\u00eda = 1?}\n    B --&gt;|S\u00ed| C[Lunes]\n    B --&gt;|No| D{\u00bfD\u00eda = 2?}\n    D --&gt;|S\u00ed| E[Martes]\n    D --&gt;|No| F{\u00bfD\u00eda = 3?}\n    F --&gt;|S\u00ed| G[Mi\u00e9rcoles]\n    F --&gt;|No| H{\u00bfD\u00eda = 4?}\n    H --&gt;|S\u00ed| I[Jueves]\n    H --&gt;|No| J{\u00bfD\u00eda = 5?}\n    J --&gt;|S\u00ed| K[Viernes]\n    J --&gt;|No| L[Fin de semana]\n    C --&gt; M[Fin]\n    E --&gt; M\n    G --&gt; M\n    I --&gt; M\n    K --&gt; M\n    L --&gt; M</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicios_1","title":"Ejercicios","text":"<p>Ejercicio 1: Clasificaci\u00f3n de veh\u00edculos</p> <ul> <li>Crea un programa que solicite al usuario el tipo de veh\u00edculo (\"coche\", \"moto\" o \"cami\u00f3n\").</li> <li>Muestra un mensaje con el n\u00famero de ruedas t\u00edpico para ese tipo de veh\u00edculo:<ul> <li>\"Coche\": 4 ruedas.</li> <li>\"Moto\": 2 ruedas.</li> <li>\"Cami\u00f3n\": m\u00e1s de 4 ruedas.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de veh\u00edculos<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet tipo = prompt(\"Introduce el tipo de veh\u00edculo: \").toLowerCase();\n\nswitch (tipo) {\n    case \"coche\":\n        console.log(\"Un coche tiene 4 ruedas.\");\n        break;\n    case \"moto\":\n        console.log(\"Una moto tiene 2 ruedas.\");\n        break;\n    case \"camionn\":\n        console.log(\"Un cami\u00f3n tiene m\u00e1s de 4 ruedas.\");\n        break;\n    default:\n        console.log(\"Tipo de veh\u00edculo no reconocido.\");\n}\n</code></pre> <p>Ejercicio 2: Meses del a\u00f1o</p> <ul> <li>Crea un programa que solicite al usuario un n\u00famero del 1 al 12.</li> <li>Muestra el nombre del mes correspondiente:<ul> <li>1: Enero, 2: Febrero, etc.</li> <li>Si el n\u00famero no est\u00e1 en el rango, muestra un mensaje de error.</li> </ul> </li> </ul> Soluci\u00f3n Meses del a\u00f1o<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet mes = parseInt(prompt(\"Introduce un n\u00famero del 1 al 12: \"));\n\nswitch (mes) {\n    case 1:\n        console.log(\"Enero\");\n        break;\n    case 2:\n        console.log(\"Febrero\");\n        break;\n    case 3:\n        console.log(\"Marzo\");\n        break;\n    case 4:\n        console.log(\"Abril\");\n        break;\n    case 5:\n        console.log(\"Mayo\");\n        break;\n    case 6:\n        console.log(\"Junio\");\n        break;\n    case 7:\n        console.log(\"Julio\");\n        break;\n    case 8:\n        console.log(\"Agosto\");\n        break;\n    case 9:\n        console.log(\"Septiembre\");\n        break;\n    case 10:\n        console.log(\"Octubre\");\n        break;\n    case 11:\n        console.log(\"Noviembre\");\n        break;\n    case 12:\n        console.log(\"Diciembre\");\n        break;\n    default:\n        console.log(\"N\u00famero fuera de rango.\");\n}\n</code></pre> <p>Ejercicio 3: Clasificaci\u00f3n de frutas</p> <ul> <li>Crea un programa que solicite al usuario el nombre de una fruta (\"manzana\", \"pl\u00e1tano\", \"naranja\").</li> <li>Muestra un mensaje indicando el color t\u00edpico de la fruta:<ul> <li>\"Manzana\": Roja o verde.</li> <li>\"Pl\u00e1tano\": Amarillo.</li> <li>\"Naranja\": Naranja.</li> </ul> </li> </ul> Soluci\u00f3n Clasificaci\u00f3n de frutas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fruta = prompt(\"Introduce el nombre de una fruta: \").toLowerCase();\n\nswitch (fruta) {\n    case \"manzana\":\n        console.log(\"Una manzana puede ser roja o verde.\");\n        break;\n    case \"platano\":\n        console.log(\"Un pl\u00e1tano es amarillo.\");\n        break;\n    case \"naranja\":\n        console.log(\"Una naranja es naranja.\");\n        break;\n    default:\n        console.log(\"Fruta no reconocida.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#134-operador-ternario","title":"1.3.4 Operador Ternario","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_13/#que-es-el-operador-ternario","title":"\u00bfQu\u00e9 es el operador ternario?","text":"<p>El operador ternario es una forma compacta de escribir una expresi\u00f3n condicional en JavaScript. Tiene la siguiente estructura:</p> Sintaxis del Operador Ternario<pre><code>let resultado = (condici\u00f3n) ? valor_si_verdadero : valor_si_falso;\n</code></pre> <p>Ejemplo: Determinar si un n\u00famero es par o impar.</p> N\u00famero par o impar<pre><code>const numero = 5;\nconst resultado = (numero % 2 === 0) ? \"Par\" : \"Impar\";\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_13/#ejercicio","title":"Ejercicio","text":"<p>Ejercicio: Calificaci\u00f3n r\u00e1pida</p> <ul> <li>Crea un programa que solicite al usuario una calificaci\u00f3n num\u00e9rica.</li> <li>Muestra \"Aprobado\" si la calificaci\u00f3n es mayor o igual a 5, o \"Suspendido\" si es menor.</li> </ul> Soluci\u00f3n Calificaci\u00f3n r\u00e1pida<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet calificacion = parseFloat(prompt(\"Introduce tu calificaci\u00f3n: \"));\n\nlet resultado = (calificacion &gt;= 5) ? \"Aprobado\" : \"Suspendido\";\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#14-bucles","title":"1.4. Bucles","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-son-los-bucles","title":"\u00bfQu\u00e9 son los bucles?","text":"<p>Los bucles son estructuras de control que permiten repetir un bloque de c\u00f3digo varias veces. Son especialmente \u00fatiles para automatizar tareas repetitivas y evitar escribir m\u00faltiples l\u00edneas de c\u00f3digo de manera manual.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico","text":"<p>Supongamos que queremos imprimir los n\u00fameros del 1 al 10 en la consola. Sin un bucle, tendr\u00edamos que escribir:</p> <pre><code>console.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\nconsole.log(5);\nconsole.log(6);\n...\n...\nconsole.log(100);\n</code></pre> <p>Con un bucle, podemos reducir este c\u00f3digo a:</p> <pre><code>for (let i = 1; i &lt;= 100; i++) {\n    console.log(i);\n}\n</code></pre> <p>Tipos de bucles en JavaScript</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#tipos-de-bucles-en-js-y-cuando-utilizarlos","title":"Tipos de bucles en JS y cu\u00e1ndo utilizarlos","text":"<ul> <li><code>for</code>: Se utiliza cuando sabemos de antemano cu\u00e1ntas iteraciones queremos realizar.</li> <li><code>while</code>: Ideal para cuando no sabemos exactamente cu\u00e1ntas veces se repetir\u00e1 el bloque, pero tenemos una condici\u00f3n que lo determina.</li> <li><code>do-while</code>: Similar a <code>while</code>, pero asegura que el bloque de c\u00f3digo se ejecutar\u00e1 al menos una vez.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-for","title":"Bucle For","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-for","title":"\u00bfQu\u00e9 es un bucle for?","text":"<p>El bucle <code>for</code> se utiliza para repetir un bloque de c\u00f3digo un n\u00famero espec\u00edfico de veces. Consiste en tres partes: <code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {bloque de instrucciones;}</code>.</p> <ol> <li> <p>Inicializaci\u00f3n: Se define la variable de control que se usar\u00e1 para contar las iteraciones. Esto se realiza solo una vez al inicio del bucle.          - Ejemplo: <code>let i = 1;</code> establece que el contador comienza en 1.</p> </li> <li> <p>Condici\u00f3n: Es la expresi\u00f3n l\u00f3gica que se eval\u00faa antes de cada iteraci\u00f3n. Mientras sea <code>true</code>, el bucle continuar\u00e1 ejecut\u00e1ndose.</p> <ul> <li>Ejemplo: <code>i &lt;= 5</code> asegura que el bucle se detendr\u00e1 cuando <code>i</code> sea mayor a 5.</li> </ul> </li> <li> <p>Actualizaci\u00f3n: Es la operaci\u00f3n que modifica la variable de control al final de cada iteraci\u00f3n. Generalmente, se incrementa o decrementa.</p> <ul> <li>Ejemplo: <code>i++</code> incrementa el valor de <code>i</code> en 1 despu\u00e9s de cada iteraci\u00f3n.</li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-for","title":"Sintaxis de for","text":"Sintaxis de For<pre><code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) {\n    // blque de \u00f3\u00f3digo a ejecutar en cada iteraci\u00f3n\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo","title":"Ejemplo","text":"<p>Ejemplo de Bucle For</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle For<pre><code>for (let i = 1; i &lt;= 5; i++) {\n    console.log(i);\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C{\u00bfi &lt;= 5?}\n    C --&gt;|S\u00ed| D[Ejecutar c\u00f3digo]\n    D --&gt; E[Incrementar i]\n    E --&gt; C\n    C --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-while","title":"Bucle While","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-while","title":"\u00bfQu\u00e9 es un bucle while?","text":"<p>El bucle <code>while</code> ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-while","title":"Sintaxis de while","text":"Sintaxis de While<pre><code>while (condici\u00f3n) {\n    // C\u00f3digo a ejecutar mientras la condici\u00f3n sea verdadera\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_1","title":"Ejemplo","text":"<p>Ejemplo de Bucle While</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle While<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    console.log(i);\n    i++;\n}\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C{\u00bfi &lt;= 5?}\n    C --&gt;|S\u00ed| D[Ejecutar c\u00f3digo]\n    D --&gt; E[Incrementar i]\n    E --&gt; C\n    C --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucle-do-while","title":"Bucle Do-While","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#que-es-un-bucle-do-while","title":"\u00bfQu\u00e9 es un bucle do-while?","text":"<p>El bucle <code>do-while</code> es similar al <code>while</code>, pero garantiza que el bloque de c\u00f3digo se ejecute al menos una vez, incluso si la condici\u00f3n es falsa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#sintaxis-de-do-while","title":"Sintaxis de do-while","text":"Sintaxis de Do-While<pre><code>do {\n    // C\u00f3digo a ejecutar\n} while (condici\u00f3n);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_2","title":"Ejemplo","text":"<p>Ejemplo de Bucle Do-While</p> <p>Imprimamos los n\u00fameros del 1 al 5:</p> Bucle Do-While<pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 5);\n</code></pre> Diagrama de flujo <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Inicializar i = 1]\n    B --&gt; C[Ejecutar c\u00f3digo]\n    C --&gt; D[Incrementar i]\n    D --&gt; E{\u00bfi &lt;= 5?}\n    E --&gt;|S\u00ed| C\n    E --&gt;|No| F[Fin]</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicios-de-bucles","title":"Ejercicios de Bucles","text":"<p>Importante</p> <p>Todos los ejercicios deben resolverse utilizando los tres tipos de bucles: <code>for</code>, <code>while</code> y <code>do-while</code>. Esto ayuda a practicar y entender las diferencias y aplicaciones de cada tipo de bucle.</p> <p>Ejercicio 1: Imprimir un asterisco</p> <ul> <li>Usa un bucle para imprimir un * (<code>*</code>) en 10 veces. Resuelve este ejercicio utilizando los tres tipos de bucles: <code>for</code>, <code>while</code> y <code>do-while</code>.</li> </ul> <pre><code>*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle for <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(\"*\");\n}\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle while <pre><code>let i = 1;\nwhile (i &lt;= 10) {\n    console.log(\"*\");\n    i++;\n}\n</code></pre> Soluci\u00f3n ejercicio 1 con bucle do-while <pre><code>let i = 1;\ndo {\n    console.log(\"*\");\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el ejercicio, de manera que tengamos una constante <code>N</code> que determine cu\u00e1ntas veces se imprime el asterisco.</li> </ul> <p>Ejercicio 2: Imprimir una secuencia de n\u00fameros</p> <ul> <li>Escribe un programa que imprima en la consola los n\u00fameros del 1 al 10, uno por l\u00ednea.</li> </ul> Soluci\u00f3n Imprimir n\u00fameros del 1 al 10<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(i);\n}\n</code></pre> Solucion con bucle while Imprimir n\u00fameros del 1 al 10<pre><code>let i = 1;\nwhile (i &lt;= 10) {\n    console.log(i);\n    i++;\n}\n</code></pre> Soluci\u00f3n con bucle do-while Imprimir n\u00fameros del 1 al 10<pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Retos adicional</p> <ul> <li>Modifica el programa para que imprima los n\u00fameros del 10 al 1, en orden descendente.</li> <li>Define una constante <code>N</code> que determine cu\u00e1ntos n\u00fameros se imprimir\u00e1n.</li> </ul> <p>Ejercicio 3: Suma de los primeros 100 n\u00fameros</p> <ul> <li>Crea un programa que calcule la suma de los n\u00fameros del 1 al 100.</li> </ul> Soluci\u00f3n Suma de los primeros N n\u00fameros<pre><code>let suma = 0;\nfor (let i = 1; i &lt;= 100; i++) {\n    suma += i;\n}\nconsole.log(\"La suma es:\", suma);\n</code></pre> Soluci\u00f3n con bucle while Suma de los primeros N n\u00fameros<pre><code>let suma = 0;\nlet i = 1;\nwhile (i &lt;= 100) {\n    suma += i;\n    i++;\n}\nconsole.log(\"La suma es:\", suma);\n</code></pre> Soluci\u00f3n con bucle do-while Suma de los primeros N n\u00fameros<pre><code>let suma = 0;\nlet i = 1;\ndo {\n    suma += i;\n    i++;\n} while (i &lt;= 100);\nconsole.log(\"La suma es:\", suma);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa para que solicite al usuario un n\u00famero <code>N</code> y calcule la suma de los n\u00fameros del 1 al <code>N</code>.</li> <li>Calcula ahora la suma y la media de los n\u00fameros divisibles por 3 entre 0 y N. Recuerda que para saber si es divisible por 3: <code>i % 3 === 0</code>. Y para calcular la media tienes que contar cu\u00e1ntos n\u00fameros divisibles hay.</li> </ul> <p>Ejercicio 4: Tabla de multiplicar</p> <ul> <li>Desarrolla un programa que pida al usuario un n\u00famero entero y muestre en la consola la tabla de multiplicar de ese n\u00famero del 1 al 10. El formato debe ser:</li> </ul> <pre><code>2 x 1 = 2\n2 x 2 = 4\n...\n...\n2 x 10 = 20\n</code></pre> Soluci\u00f3n Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`${num} x ${i} = ${num * i}`);\n}\n</code></pre> Soluci\u00f3n con bucle while Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 1;\nwhile (i &lt;= 10) {\n    console.log(`${num} x ${i} = ${num * i}`);\n    i++;\n}\n</code></pre> Soluci\u00f3n con bucle do-while Tabla de multiplicar<pre><code>const prompt = require(\"prompt-sync\")();\nlet num = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 1;\ndo {\n    console.log(`${num} x ${i} = ${num * i}`);\n    i++;\n} while (i &lt;= 10);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa tenga dos constantes <code>MIN</code> y <code>MAX</code>. Por ejemlo, si <code>MIN = 5</code> y <code>MAX = 15</code>, el programa mostrar\u00e1 la tabla de multiplicar del 5 al 15.</li> </ul> <p>Ejercicio 5: N\u00fameros pares entre 1 y N</p> <ul> <li>Escribe un programa que simprima en la consola todos los n\u00fameros pares desde 1 hasta 100.</li> </ul> Soluci\u00f3n N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nfor (let i = 2; i &lt;= 100; i += 2) {\n    console.log(i);\n}\n</code></pre> Soluci\u00f3n con bucle while N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 2;\nwhile (i &lt;= 100) {\n    console.log(i);\n    i += 2;\n}\n</code></pre> Soluci\u00f3n con bucle do-while N\u00fameros pares hasta N<pre><code>const prompt = require(\"prompt-sync\")();\nlet N = parseInt(prompt(\"Introduce un n\u00famero: \"));\nlet i = 2;\ndo {\n    console.log(i);\n    i += 2;\n} while (i &lt;= 100);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa para que solicite al usuario un n\u00famero <code>N</code> y muestre los n\u00fameros pares desde 1 hasta <code>N</code>.</li> <li>Modifica el programa para que saque los n\u00fameros en una l\u00ednea separados por una ','</li> </ul> <p>Ejercicio 6: Invertir una cadena</p> <ul> <li>Crea un programa que pida al usuario una cadena de texto y luego imprima la cadena invertida.</li> <li>Aunque a\u00fan no hemos vista arrays, saber que con la expresi\u00f3n <code>texto[i]</code> se puede acceder a cada car\u00e1cter de la cadena (la i debe estar entre 0 y la longitud de la cadena(<code>length - 1</code>)).</li> </ul> Soluci\u00f3n Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nfor (let i = texto.length - 1; i &gt;= 0; i--) {\n    invertida += texto[i];\n}\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> Soluci\u00f3n con bucle while Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nlet i = texto.length - 1;\nwhile (i &gt;= 0) {\n    invertida += texto[i];\n    i--;\n}\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> Soluci\u00f3n con bucle do-while Invertir una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \");\nlet invertida = \"\";\nlet i = texto.length - 1;\ndo {\n    invertida += texto[i];\n    i--;\n} while (i &gt;= 0);\nconsole.log(\"Cadena invertida:\", invertida);\n</code></pre> <p>Reto adicional</p> <ul> <li>Modifica el programa para que cree un pal\u00edndromo concatenando la cadena original con la cadena invertida;</li> </ul> <p>Ejercicio 7: Contar vocales en una cadena</p> <ul> <li>Desarrolla un programa que solicite al usuario una cadena de texto y cuente cu\u00e1ntas vocales contiene.</li> <li>Para saber si una letra es una vocal podemos utilizar un <code>if</code> o utilizar el m\u00e9todo <code>includes()</code> de los strings.</li> </ul> Soluci\u00f3n Contar vocales en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \").toLowerCase();\nlet contador = 0;\nlet vocales = \"aeiou\";\nfor (let i = 0; i &lt; texto.length; i++) {\n    if (vocales.includes(texto[i])) {\n        contador++;\n    }\n}\nconsole.log(\"N\u00famero de vocales:\", contador);\n</code></pre> Soluci\u00f3n con bucle while Contar vocales en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \").toLowerCase();\nlet contador = 0;\nlet vocales = \"aeiou\";\nlet i = 0;\nwhile (i &lt; texto.length) {\n    if (vocales.includes(texto[i])) {\n        contador++;\n    }\n    i++;\n}\nconsole.log(\"N\u00famero de vocales:\", contador);\n</code></pre> Soluci\u00f3n con bucle do-while Contar vocales en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\nlet texto = prompt(\"Introduce una cadena: \").toLowerCase();\nlet contador = 0;\nlet vocales = \"aeiou\";\nlet i = 0;\ndo {\n    if (vocales.includes(texto[i])) {\n        contador++;\n    }\n    i++;\n} while (i &lt; texto.length);\nconsole.log(\"N\u00famero de vocales:\", contador);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#bucles-anidados","title":"bucles anidados","text":"<p>Los bucles anidados son bucles que se encuentran dentro de otros bucles. Son \u00fatiles para realizar tareas m\u00e1s complejas que requieren m\u00faltiples iteraciones.  Sintaxis de un bucle <code>for</code> anidado:</p> <p>Bucle For Anidado<pre><code>for (let i = 1; i &lt;= 5; i++) {\n    for (let j = 1; j &lt;= 3; j++) {\n        console.log(i, j);\n    }\n}\n</code></pre> Este tipo de bucles se utilizan com\u00fanmente para recorrer matrices, tablas, realizar c\u00e1lculos matriciales, entre otros.</p> <p>Sistaxis de un bucle <code>while</code> anidado:</p> Bucle While Anidado<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    let j = 1;\n    while (j &lt;= 3) {\n        console.log(i, j);\n        j++;\n    }\n    i++;\n}\n</code></pre> <p>Este tipo de bucles se utilizan com\u00fanmente cuando no se conoce el n\u00famero exacto de iteraciones y se necesita una condici\u00f3n de salida m\u00e1s compleja.</p> <p>Tambi\u00e9n podemos encontrar bucles anidados mixtos como un bucle <code>for</code> dentro de un bucle <code>do-while</code> o viceversa.</p> Bucle Mixto Anidado<pre><code>let i = 1;\ndo {\n    for (let j = 1; j &lt;= 3; j++) {\n        console.log(i, j);\n    }\n    i++;\n} while (i &lt;= 5);\n</code></pre> <p>Nota</p> <p>Es importante tener en cuenta que los bucles anidados pueden aumentar la complejidad del c\u00f3digo y hacerlo m\u00e1s dif\u00edcil de entender. Por lo tanto, es recomendable utilizarlos con moderaci\u00f3n y asegurarse de que sean necesarios para la tarea en cuesti\u00f3n.</p> <p>Ejercicio 8: N\u00fameros primos</p> <ul> <li>Crea un programa que calcule y muestre todos los n\u00fameros primos entre 1 y 100.</li> </ul> <pre><code>1\n2\n3\n5\n7\n11\n13\n17\n...\n100\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle for <pre><code>for (let num = 2; num &lt;= 100; num++) {\n    let esPrimo = true;\n    for (let i = 2; i &lt; num; i++) {\n        if (num % i === 0) {\n            esPrimo = false;\n        }\n    }\n    if (esPrimo) {\n        console.log(num);\n    }\n}\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle while <pre><code>let num = 2;\nwhile (num &lt;= 100) {\n    let esPrimo = true;\n    let i = 2;\n    while (i &lt; num) {\n        if (num % i === 0) {\n            esPrimo = false;\n        }\n        i++;\n    }\n    if (esPrimo) {\n        console.log(num);\n    }\n    num++;\n}\n</code></pre> Soluci\u00f3n ejercicio 8 con bucle do-while <pre><code>let num = 2;\ndo {\n    let esPrimo = true;\n    let i = 2;\n    do {\n        if (num % i === 0) {\n            esPrimo = false;\n        }\n        i++;\n    } while (i &lt; num);\n    if (esPrimo) {\n        console.log(num);\n    }\n    num++;\n} while (num &lt;= 100);\n</code></pre> <p>Ejercicio 9, tri\u00e1ngulo rect\u00e1ngulo</p> <ul> <li>Usa un bucle para imprimir un tri\u00e1ngulo rect\u00e1ngulo de asteriscos:</li> </ul> <pre><code>*\n**\n***\n****\n*****\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle for <pre><code>for (let i = 1; i &lt;= 5; i++) {\n    let linea = \"\";\n    for (let j = 1; j &lt;= i; j++) {\n        linea += \"*\";\n    }\n    console.log(linea);\n}\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle while <pre><code>let i = 1;\nwhile (i &lt;= 5) {\n    let linea = \"\";\n    let j = 1;\n    while (j &lt;= i) {\n        linea += \"*\";\n        j++;\n    }\n    console.log(linea);\n    i++;\n}\n</code></pre> Soluci\u00f3n ejercicio 9 con bucle do-while <pre><code>let i = 1;\ndo {\n    let linea = \"\";\n    let j = 1;\n    do {\n        linea += \"*\";\n        j++;\n    } while (j &lt;= i);\n    console.log(linea);\n    i++;\n} while (i &lt;= 5);\n</code></pre> Reto adicional <ul> <li>Intenta imprimir el tri\u00e1ngulo al rev\u00e9s.</li> <li>Ejemplo:</li> </ul> <pre><code>*****\n****\n***\n**\n*\n</code></pre> <p>Ejercicio 10: Tablero ajedrez</p> <ul> <li>Crea un programa que imprima un tablero de ajedrez de 8x8 en la consola, utilizando los caracteres <code>#</code> y <code></code> (espacio en blanco).</li> </ul> <pre><code># # # #\n # # # #\n# # # #\n # # # #    \n# # # #\n # # # #\n# # # #\n # # # #\n</code></pre> Soluci\u00f3n con for <pre><code>for (let i = 1; i &lt;= 8; i++) {\n    let linea = \"\";\n    for (let j = 1; j &lt;= 8; j++) {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n    }\n    console.log(linea);\n}\n</code></pre> Soluci\u00f3n con while <pre><code>let i = 1;\nwhile (i &lt;= 8) {\n    let linea = \"\";\n    let j = 1;\n    while (j &lt;= 8) {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n        j++;\n    }\n    console.log(linea);\n    i++;\n}\n</code></pre> Soluci\u00f3n con do-while <pre><code>let i = 1;\ndo {\n    let linea = \"\";\n    let j = 1;\n    do {\n        if ((i + j) % 2 === 0) {\n            linea += \"#\";\n        } else {\n            linea += \" \";\n        }\n        j++;\n    } while (j &lt;= 8);\n    console.log(linea);\n    i++;\n} while (i &lt;= 8);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#errores-comunes-en-bucles","title":"Errores Comunes en Bucles","text":"<p>Los bucles son herramientas muy \u00fatiles, pero tambi\u00e9n pueden generar errores si no se utilizan correctamente. A continuaci\u00f3n, se explican algunos de los errores m\u00e1s comunes:</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#1-bucles-infinitos","title":"1. Bucles infinitos","text":"<p>Un bucle infinito ocurre cuando la condici\u00f3n para salir del bucle nunca se cumple, haciendo que el programa se ejecute indefinidamente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-bucle-infinito-con-while","title":"Ejemplo de bucle infinito con <code>while</code>","text":"<pre><code>let i = 0;\nwhile (i &lt; 10) {\n    console.log(i);\n    // Falta incrementar `i`, el bucle nunca termina\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion","title":"Soluci\u00f3n","text":"<pre><code>let i = 0;\nwhile (i &lt; 10) {\n    console.log(i);\n    i++; // Incrementar para salir del bucle\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#2-bucles-que-nunca-se-ejecutan","title":"2. Bucles que nunca se ejecutan","text":"<p>Esto ocurre cuando la condici\u00f3n inicial no se cumple, por lo que el bucle no se ejecuta ni una sola vez.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-bucle-que-nunca-se-ejecuta-con-for","title":"Ejemplo de bucle que nunca se ejecuta con <code>for</code>","text":"<pre><code>for (let i = 10; i &lt; 5; i++) {\n    console.log(i); // Nunca entra al bucle\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_1","title":"Soluci\u00f3n","text":"<p>Aseg\u00farate de que la condici\u00f3n inicial permita al menos una iteraci\u00f3n. <pre><code>for (let i = 5; i &lt; 10; i++) {\n    console.log(i); // Se ejecutar\u00e1 correctamente\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#3-modificar-la-variable-de-control-dentro-del-bucle","title":"3. Modificar la variable de control dentro del bucle","text":"<p>Cambiar la variable que controla el bucle puede generar resultados inesperados o bucles infinitos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-error-al-modificar-la-variable-de-control","title":"Ejemplo de error al modificar la variable de control","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n    i++; // Modificar `i` dentro del bucle genera resultados inesperados\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_2","title":"Soluci\u00f3n","text":"<p>Deja que el incremento de la variable de control lo maneje el propio bucle. <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i); // Incremento manejado autom\u00e1ticamente por el bucle\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#4-usar-la-condicion-incorrecta","title":"4. Usar la condici\u00f3n incorrecta","text":"<p>Un error com\u00fan es escribir mal la condici\u00f3n, lo que puede generar resultados inesperados o bucles infinitos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-condicion-incorrecta","title":"Ejemplo de condici\u00f3n incorrecta","text":"<pre><code>let i = 0;\nwhile (i = 10) { // Error: asignaci\u00f3n en lugar de comparaci\u00f3n\n    console.log(i);\n    i++;\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_3","title":"Soluci\u00f3n","text":"<p>Usa el operador de comparaci\u00f3n <code>===</code> o <code>==</code> seg\u00fan corresponda. <pre><code>let i = 0;\nwhile (i === 10) {\n    console.log(i);\n    i++;\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#5-salir-del-bucle-incorrectamente","title":"5. Salir del bucle incorrectamente","text":"<p>Usar <code>break</code> o <code>return</code> de forma incorrecta puede terminar el bucle antes de lo esperado o generar errores en el flujo del programa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-uso-incorrecto-de-break","title":"Ejemplo de uso incorrecto de <code>break</code>","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n    if (i === 2) {\n        break; // Termina el bucle antes de tiempo\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_4","title":"Soluci\u00f3n","text":"<p>Usa <code>break</code> solo cuando sea necesario salir del bucle en condiciones espec\u00edficas. <pre><code>for (let i = 0; i &lt; 5; i++) {\n    if (i === 2) {\n        continue; // Salta a la siguiente iteraci\u00f3n\n    }\n    console.log(i); // Se ejecutar\u00e1 para valores distintos de 2\n}\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#6-variables-mal-inicializadas","title":"6. Variables mal inicializadas","text":"<p>Si no se inicializan correctamente las variables utilizadas en la condici\u00f3n o dentro del bucle, pueden generarse errores o resultados inesperados.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo-de-variable-mal-inicializada","title":"Ejemplo de variable mal inicializada","text":"<pre><code>let suma;\nfor (let i = 0; i &lt; 5; i++) {\n    suma += i; // Error: `suma` no tiene un valor inicial\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#solucion_5","title":"Soluci\u00f3n","text":"<p>Inicializa las variables antes de usarlas. <pre><code>let suma = 0;\nfor (let i = 0; i &lt; 5; i++) {\n    suma += i;\n}\nconsole.log(suma);\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#instrucciones-break-y-continue","title":"Instrucciones <code>break</code> y <code>continue</code>","text":"<p>Las instrucciones <code>break</code> y <code>continue</code> pueden ser \u00fatiles en ciertas situaciones, pero su abuso o uso inadecuado puede hacer que el c\u00f3digo sea dif\u00edcil de leer y mantener.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#break","title":"<code>break</code>","text":"<ul> <li>Sirve para terminar un bucle de forma inmediata, sin importar si la condici\u00f3n del bucle a\u00fan es verdadera.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_3","title":"Ejemplo","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i === 5) {\n        break; // El bucle termina en 5\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#continue","title":"<code>continue</code>","text":"<ul> <li>Sirve para saltar a la siguiente iteraci\u00f3n del bucle, ignorando el resto del c\u00f3digo dentro del mismo.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejemplo_4","title":"Ejemplo","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 === 0) {\n        continue; // Ignora n\u00fameros pares\n    }\n    console.log(i);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#por-que-evitar-break-y-continue","title":"Por qu\u00e9 evitar <code>break</code> y <code>continue</code>","text":"<ul> <li>Reducci\u00f3n de claridad: El flujo de control se vuelve menos predecible y m\u00e1s dif\u00edcil de seguir.</li> <li>Alternativas m\u00e1s claras: Generalmente, es mejor estructurar el c\u00f3digo para que las condiciones de salida o iteraci\u00f3n se manejen de manera expl\u00edcita.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#alternativa-sin-break-y-continue","title":"Alternativa sin <code>break</code> y <code>continue</code>","text":"<p>En lugar de usar <code>break</code> o <code>continue</code>, se pueden reestructurar las condiciones del bucle:</p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 !== 0) {\n        console.log(i); // Solo imprime n\u00fameros impares\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicios-de-bucles-en-este-caso-debes-determinar-que-tipo-de-bucle-es-el-mas-adecuado-para-cada-ejercicio","title":"Ejercicios de Bucles, en este caso debes determinar qu\u00e9 tipo de bucle es el m\u00e1s adecuado para cada ejercicio.","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-1-pin-de-seguridad","title":"Ejercicio 1: PIN de seguridad","text":"<ul> <li>Crea un programa que solicite al usuario un PIN de seguridad de 4 d\u00edgitos. Si el PIN ingresado no es correcto, el programa debe mostrar un mensaje de error y permitir al usuario intentarlo nuevamente. El programa debe finalizar cuando el PIN ingresado sea correcto. O si el usuario ha intentado 3 veces. </li> <li>Ampliaci\u00f3n: Si el usuario ha intentado 3 veces, el programa debe bloquearse durante 30 segundos antes de permitir nuevos intentos, investiga como bloquear el rograma 30 segundos.</li> </ul> <pre><code>Introduce tu PIN de 4 d\u00edgitos: 1234\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nIntroduce tu PIN de 4 d\u00edgitos: 5678\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nIntroduce tu PIN de 4 d\u00edgitos: 9999\nPIN incorrecto. Int\u00e9ntalo de nuevo.\nEl programa se bloquear\u00e1 durante 30 segundos.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-2-adivina-el-numero","title":"Ejercicio 2: Adivina el n\u00famero","text":"<ul> <li>Crea un programa que genere un n\u00famero aleatorio entre 1 y 100. Luego, solicita al usuario que adivine el n\u00famero. Si el n\u00famero ingresado es mayor que el n\u00famero generado, muestra un mensaje indicando que el n\u00famero es demasiado alto. Si el n\u00famero ingresado es menor que el n\u00famero generado, muestra un mensaje indicando que el n\u00famero es demasiado bajo. El programa debe continuar solicitando al usuario que adivine el n\u00famero hasta que lo adivine correctamente.</li> <li>Investiga como generar n\u00fameros aleatorios en JavaScript. </li> </ul> <pre><code>Adivina el n\u00famero entre 1 y 100: 50\nEl n\u00famero es demasiado bajo. Int\u00e9ntalo de nuevo.\nAdivina el n\u00famero entre 1 y 100: 75\nEl n\u00famero es demasiado alto. Int\u00e9ntalo de nuevo.\nAdivina el n\u00famero entre 1 y 100: 60\n\u00a1Felicidades! Has adivinado el n\u00famero.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-3-calculadora-de-factorial","title":"Ejercicio 3: Calculadora de factorial","text":"<ul> <li>Crea un programa que solicite al usuario un n\u00famero entero positivo y calcule su factorial. El factorial de un n\u00famero <code>n</code> se define como el producto de todos los enteros positivos menores o iguales a <code>n</code>.</li> <li>Por ejemplo, el factorial de 5 (<code>5!</code>) es <code>5 x 4 x 3 x 2 x 1 = 120</code>.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: 5\nEl factorial de 5 es: 120\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-4-validacion-entrada-de-datos","title":"Ejercicio 4: Validaci\u00f3n entrada de datos","text":"<ul> <li>Crea un programa que solicite al usuario un n\u00famero entero positivo. Si el usuario ingresa un valor no num\u00e9rico o un n\u00famero negativo, el programa debe mostrar un mensaje de error y solicitar al usuario que ingrese un n\u00famero v\u00e1lido. El programa debe continuar solicitando al usuario que ingrese un n\u00famero v\u00e1lido hasta que lo haga.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: hola\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: -5\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: 10\nN\u00famero v\u00e1lido: 10\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_14/#ejercicio-5-validacion-de-datos-con-operacion","title":"Ejercicio 5: Validaci\u00f3n de datos con operaci\u00f3n","text":"<ul> <li>Pide al usuario que introduzca un n\u00famero entero y positivo. Si es correcto que lo sume en un acumulador. Si el usuario introduce un n\u00famero negativo o no entero, debe mostrar un mensaje de error y solicitar al usuario que introduzca un n\u00famero v\u00e1lido. El programa finalizar\u00e1 cuando el usuario introduzca un <code>0</code>, en ese caso mostrar\u00e1 el total acumulado</li> <li>Ampliaci\u00f3n: Calcula tambi\u00e9n la media de los n\u00fameros introducidos.</li> </ul> <pre><code>Introduce un n\u00famero entero positivo: 5\nIntroduce un n\u00famero entero positivo: 10\nIntroduce un n\u00famero entero positivo: hola\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: -5\nError: Debes introducir un n\u00famero entero positivo.\nIntroduce un n\u00famero entero positivo: 15\nIntroduce un n\u00famero entero positivo: 0\nTotal acumulado: 30\nMedia de los n\u00fameros introducidos: 10\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/","title":"Unidad 1: Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_15/#15-uso-avanzado-de-numeros-cadenas-y-fechas","title":"1.5 Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":"<p>En este tema exploraremos las clases y bibliotecas integradas de JavaScript para trabajar con n\u00fameros, cadenas y fechas, sus m\u00e9todos y propiedades principales, y c\u00f3mo aplicar estas herramientas en escenarios pr\u00e1cticos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#151-clase-number","title":"1.5.1 Clase <code>Number</code>","text":"<p>La clase <code>Number</code> en JavaScript representa valores num\u00e9ricos y proporciona una serie de propiedades y m\u00e9todos \u00fatiles para trabajar con n\u00fameros.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#propiedades-de-la-clase-number","title":"Propiedades de la Clase <code>Number</code>","text":"<ol> <li> <p><code>Number.MAX_VALUE</code>: El n\u00famero positivo m\u00e1s grande que se puede representar en JavaScript.     <pre><code>console.log(Number.MAX_VALUE); // Ejemplo: 1.7976931348623157e+308\n</code></pre></p> </li> <li> <p><code>Number.MIN_VALUE</code>: El n\u00famero positivo m\u00e1s peque\u00f1o mayor que 0.     <pre><code>console.log(Number.MIN_VALUE); // Ejemplo: 5e-324\n</code></pre></p> </li> <li> <p><code>Number.POSITIVE_INFINITY</code>: Representa el infinito positivo.     <pre><code>console.log(Number.POSITIVE_INFINITY); // Infinity\n</code></pre></p> </li> <li> <p><code>Number.NEGATIVE_INFINITY</code>: Representa el infinito negativo.     <pre><code>console.log(Number.NEGATIVE_INFINITY); // -Infinity\n</code></pre></p> </li> <li> <p><code>Number.NaN</code>: Representa un valor que no es un n\u00famero (Not-a-Number).     <pre><code>console.log(Number.NaN); // NaN\n</code></pre></p> </li> </ol> <p>Importante</p> <p>El valor <code>NaN</code> suele aparecer como resultado de operaciones inv\u00e1lidas, como dividir 0 entre 0.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-de-la-clase-number","title":"M\u00e9todos de la Clase <code>Number</code>","text":"<ol> <li> <p><code>Number.isNaN(valor)</code>: Comprueba si un valor es <code>NaN</code>.     <pre><code>console.log(Number.isNaN(NaN)); // true\nconsole.log(Number.isNaN(10));  // false\n</code></pre></p> </li> <li> <p><code>Number.isInteger(valor)</code>: Determina si un valor es un n\u00famero entero.     <pre><code>console.log(Number.isInteger(42));    // true\nconsole.log(Number.isInteger(42.5)); // false\n</code></pre></p> </li> <li> <p><code>toFixed(decimales)</code>: Redondea un n\u00famero al n\u00famero de decimales especificado y lo convierte en una cadena.     <pre><code>let num = 3.14159;\nconsole.log(num.toFixed(2)); // \"3.14\"\n</code></pre></p> </li> <li> <p><code>toString(base)</code>: Convierte un n\u00famero en una cadena con la base especificada (binaria, octal, decimal, hexadecimal, etc.).     <pre><code>let num = 255;\nconsole.log(num.toString(16)); // \"ff\" (hexadecimal)\nconsole.log(num.toString(2));  // \"11111111\" (binario)\n</code></pre></p> </li> <li> <p><code>parseInt(cadena, base)</code>: Convierte una cadena en un n\u00famero entero seg\u00fan la base indicada.     <pre><code>console.log(parseInt(\"1010\", 2)); // 10 (binario a decimal)\nconsole.log(parseInt(\"FF\", 16)); // 255 (hexadecimal a decimal)\n</code></pre></p> </li> <li> <p><code>parseFloat(cadena)</code>: Convierte una cadena en un n\u00famero decimal.     <pre><code>console.log(parseFloat(\"3.14\")); // 3.14\nconsole.log(parseFloat(\"123abc\")); // 123\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo","title":"Ejemplo Completo","text":"Ejemplo de uso de la Clase <code>Number</code> <pre><code>let valor = 123.456;\n\nconsole.log(\"Valor original:\", valor);\nconsole.log(\"Redondeado a 2 decimales:\", valor.toFixed(2));\nconsole.log(\"\u00bfEs un entero?:\", Number.isInteger(valor));\nconsole.log(\"M\u00e1ximo valor representable:\", Number.MAX_VALUE);\nconsole.log(\"Valor en hexadecimal:\", valor.toString(16));\nconsole.log(\"N\u00famero desde cadena:\", parseFloat(\"123.45\"));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-number","title":"Ejercicios: Clase <code>Number</code>","text":"<p>Ejercicio 1: Propiedades y M\u00e9todos de Number</p> <ul> <li>Declara un n\u00famero y muestra:<ul> <li>Su valor redondeado a 2 decimales.</li> <li>Su representaci\u00f3n en binario y hexadecimal.</li> <li>Si es un entero o no.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>let numero = 42.789;\nconsole.log(\"Redondeado a 2 decimales:\", numero.toFixed(2));\nconsole.log(\"En binario:\", numero.toString(2));\nconsole.log(\"En hexadecimal:\", numero.toString(16));\nconsole.log(\"\u00bfEs un entero?:\", Number.isInteger(numero));\n</code></pre> <p>Ejercicio 2: Conversi\u00f3n de bases</p> <ul> <li>Escribe un programa que convierta un n\u00famero en distintas bases: binario, octal y hexadecimal.</li> </ul> Soluci\u00f3n <pre><code>let numero = 255;\nconsole.log(\"Binario:\", numero.toString(2));\nconsole.log(\"Octal:\", numero.toString(8));\nconsole.log(\"Hexadecimal:\", numero.toString(16));\n</code></pre> <p>Ejercicio 3: Validar valores num\u00e9ricos</p> <ul> <li>Dado un valor, verifica si es un n\u00famero v\u00e1lido o <code>NaN</code>.</li> </ul> Soluci\u00f3n <pre><code>let valor1 = NaN;\nlet valor2 = 42;\nconsole.log(\"\u00bfEs NaN (valor1)?:\", Number.isNaN(valor1));\nconsole.log(\"\u00bfEs NaN (valor2)?:\", Number.isNaN(valor2));\n</code></pre> <p>Ejercicio 4: Convertir binario a decimal</p> <ul> <li>Crea una funci\u00f3n que reciba una cadena con un n\u00famero binario y devuelva su valor en decimal.</li> </ul> Soluci\u00f3n <pre><code>function binarioADecimal(binario) {\n    return parseInt(binario, 2);\n}\nconsole.log(\"Binario 1010 a decimal:\", binarioADecimal(\"1010\"));\n</code></pre> <p>Ejercicio 5: C\u00e1lculo de porcentaje</p> <ul> <li>Calcula el porcentaje de un valor usando n\u00fameros decimales. Por ejemplo, el 15% de 200.</li> </ul> Soluci\u00f3n <pre><code>let total = 200;\nlet porcentaje = 15;\nlet resultado = (total * porcentaje) / 100;\nconsole.log(\"El 15% de 200 es:\", resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#152-biblioteca-math","title":"1.5.2 Biblioteca <code>Math</code>","text":"<p>La biblioteca <code>Math</code> proporciona una serie de constantes y funciones para realizar operaciones matem\u00e1ticas comunes.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#constantes-de-math","title":"Constantes de <code>Math</code>","text":"<ol> <li><code>Math.PI</code>: Representa el valor de \u03c0.     <pre><code>console.log(Math.PI); // 3.141592653589793\n</code></pre></li> <li><code>Math.E</code>: Base de los logaritmos naturales.     <pre><code>console.log(Math.E); // 2.718281828459045\n</code></pre></li> <li><code>Math.LN10</code>: Logaritmo natural de 10.     <pre><code>console.log(Math.LN10); // 2.302585092994046\n</code></pre></li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-de-math","title":"M\u00e9todos de <code>Math</code>","text":"<ol> <li><code>Math.sqrt(x)</code>: Calcula la ra\u00edz cuadrada de un n\u00famero.     <pre><code>console.log(Math.sqrt(16)); // 4\n</code></pre></li> <li><code>Math.pow(base, exponente)</code>: Calcula una potencia.     <pre><code>console.log(Math.pow(2, 3)); // 8\n</code></pre></li> <li><code>Math.abs(x)</code>: Devuelve el valor absoluto de un n\u00famero.     <pre><code>console.log(Math.abs(-5)); // 5\n</code></pre></li> <li><code>Math.round(x)</code>: Redondea un n\u00famero al entero m\u00e1s cercano.     <pre><code>console.log(Math.round(4.5)); // 5\n</code></pre></li> <li><code>Math.floor(x)</code> y <code>Math.ceil(x)</code>:<ul> <li><code>Math.floor(x)</code>: Redondea hacia abajo.</li> <li><code>Math.ceil(x)</code>: Redondea hacia arriba. <pre><code>console.log(Math.floor(4.7)); // 4\nconsole.log(Math.ceil(4.2));  // 5\n</code></pre></li> </ul> </li> <li><code>Math.random()</code>: Genera un n\u00famero aleatorio entre 0 y 1 (exclusivo).     <pre><code>console.log(Math.random()); // Ejemplo: 0.5487\n</code></pre></li> <li><code>Math.min(...valores)</code> y <code>Math.max(...valores)</code>:<ul> <li><code>Math.min</code>: Devuelve el menor valor.</li> <li><code>Math.max</code>: Devuelve el mayor valor. <pre><code>console.log(Math.min(3, 7, 2, 9)); // 2\nconsole.log(Math.max(3, 7, 2, 9)); // 9\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo_1","title":"Ejemplo Completo","text":"Ejemplo con la biblioteca Math <pre><code>let base = 5;\nlet exponente = 3;\n\nconsole.log(\"Potencia:\", Math.pow(base, exponente));\nconsole.log(\"Ra\u00edz cuadrada de 25:\", Math.sqrt(25));\nconsole.log(\"N\u00famero aleatorio entre 0 y 1:\", Math.random());\nconsole.log(\"Redondeado hacia abajo (4.7):\", Math.floor(4.7));\nconsole.log(\"Redondeado hacia arriba (4.2):\", Math.ceil(4.2));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-biblioteca-math","title":"Ejercicios: Biblioteca <code>Math</code>","text":"<p>Ejercicio 1: Generar n\u00famero aleatorio</p> <ul> <li>Escribe un programa que genere un n\u00famero aleatorio entre 1 y 100.</li> </ul> Soluci\u00f3n <pre><code>let aleatorio = Math.floor(Math.random() * 100) + 1;\nconsole.log(\"N\u00famero aleatorio entre 1 y 100:\", aleatorio);\n</code></pre> <p>Ejercicio 2: Redondeo de n\u00fameros</p> <ul> <li>Solicita al usuario un n\u00famero decimal y muestra:<ul> <li>Su valor redondeado hacia abajo.</li> <li>Su valor redondeado hacia arriba.</li> <li>Su valor redondeado al entero m\u00e1s cercano.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero decimal: \"));\n\nconsole.log(\"Redondeado hacia abajo:\", Math.floor(numero));\nconsole.log(\"Redondeado hacia arriba:\", Math.ceil(numero));\nconsole.log(\"Redondeado al m\u00e1s cercano:\", Math.round(numero));\n</code></pre> <p>Ejercicio 3: Calcular \u00e1rea de un c\u00edrculo</p> <ul> <li>Solicita al usuario el radio de un c\u00edrculo y calcula:<ul> <li>Su \u00e1rea usando la f\u00f3rmula: <code>\u00c1rea = \u03c0 * radio^2</code>.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet radio = parseFloat(prompt(\"Introduce el radio del c\u00edrculo: \"));\nlet area = Math.PI * Math.pow(radio, 2);\n\nconsole.log(\"El \u00e1rea del c\u00edrculo es:\", area);\n</code></pre> <p>Ejercicio 4: Valor absoluto</p> <ul> <li>Solicita un n\u00famero al usuario y muestra su valor absoluto.</li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet numero = parseFloat(prompt(\"Introduce un n\u00famero: \"));\nconsole.log(\"El valor absoluto es:\", Math.abs(numero));\n</code></pre> <p>Ejercicio 5: Comparar n\u00fameros</p> <ul> <li>Solicita al usuario tres n\u00fameros y muestra:<ul> <li>El menor de los tres.</li> <li>El mayor de los tres.</li> </ul> </li> </ul> Soluci\u00f3n <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet num1 = parseFloat(prompt(\"Introduce el primer n\u00famero: \"));\nlet num2 = parseFloat(prompt(\"Introduce el segundo n\u00famero: \"));\nlet num3 = parseFloat(prompt(\"Introduce el tercer n\u00famero: \"));\n\nconsole.log(\"El menor n\u00famero es:\", Math.min(num1, num2, num3));\nconsole.log(\"El mayor n\u00famero es:\", Math.max(num1, num2, num3));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#153-clase-string","title":"1.5.3 Clase <code>String</code>","text":"<p>La clase <code>String</code> se utiliza para trabajar con cadenas de texto en JavaScript. Proporciona numerosas propiedades y m\u00e9todos que facilitan la manipulaci\u00f3n de texto.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#propiedades-de-la-clase-string","title":"Propiedades de la Clase <code>String</code>","text":"<ol> <li><code>length</code>: Devuelve el n\u00famero de caracteres en una cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.length); // 11\n</code></pre></li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-comunes-de-string","title":"M\u00e9todos Comunes de <code>String</code>","text":"<ol> <li><code>toUpperCase()</code> y <code>toLowerCase()</code>:</li> <li> <p>Convierte una cadena a may\u00fasculas o min\u00fasculas respectivamente.     <pre><code>let texto = \"JavaScript\";\nconsole.log(texto.toUpperCase()); // \"JAVASCRIPT\"\nconsole.log(texto.toLowerCase()); // \"javascript\"\n</code></pre></p> </li> <li> <p><code>charAt(pos)</code>: Devuelve el car\u00e1cter en una posici\u00f3n espec\u00edfica.     <pre><code>let texto = \"Hola\";\nconsole.log(texto.charAt(1)); // \"o\"\n</code></pre></p> </li> <li> <p><code>includes(subcadena)</code>: Verifica si una subcadena est\u00e1 presente en la cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.includes(\"mundo\")); // true\n</code></pre></p> </li> <li> <p><code>indexOf(subcadena)</code>: Devuelve la posici\u00f3n de la primera aparici\u00f3n de una subcadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.indexOf(\"mundo\")); // 6\n</code></pre></p> </li> <li> <p><code>slice(inicio, fin)</code>: Extrae una secci\u00f3n de la cadena.     <pre><code>let texto = \"Hola, mundo\";\nconsole.log(texto.slice(0, 4)); // \"Hola\"\n</code></pre></p> </li> <li> <p><code>replace(buscar, reemplazo)</code>: Reemplaza una subcadena por otra.     <pre><code>let texto = \"El cielo es azul\";\nconsole.log(texto.replace(\"azul\", \"rojo\")); // \"El cielo es rojo\"\n</code></pre></p> </li> <li> <p><code>split(separador)</code>: Divide una cadena en un array seg\u00fan un separador.     <pre><code>let texto = \"manzana,banana,naranja\";\nconsole.log(texto.split(\",\")); // [\"manzana\", \"banana\", \"naranja\"]\n</code></pre></p> </li> <li> <p><code>trim()</code>: Elimina espacios en blanco al inicio y al final de una cadena.     <pre><code>let texto = \"   Hola   \";\nconsole.log(texto.trim()); // \"Hola\"\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplos-completos","title":"Ejemplos Completos","text":"Ejemplo con la Clase <code>String</code> <pre><code>let frase = \"  Aprende JavaScript, es genial!  \";\n\nconsole.log(\"Longitud:\", frase.length);\nconsole.log(\"En may\u00fasculas:\", frase.toUpperCase());\nconsole.log(\"Primera palabra:\", frase.slice(2, 9));\nconsole.log(\"\u00bfIncluye 'genial'?:\", frase.includes(\"genial\"));\nconsole.log(\"Sin espacios alrededor:\", frase.trim());\n</code></pre> <p>Trocear una cadena por espacios</p> <p>Dividir texto por espacios\"      - Declara una cadena con el texto \"nombre apellido1 apellido2\".      - Muestra cada parte del texto (nombre, apellido1, apellido2) en l\u00edneas separadas sin utilizar arrays.</p> Otro ejemplo de la case <code>Sttring</code> Dividir texto por espacios<pre><code>const texto = \"nombre apellido1 apellido2\";\n\nlet inicio = 0;\nlet espacio = texto.indexOf(\" \");\n\nwhile (espacio !== -1) {\n    console.log(texto.slice(inicio, espacio));\n    inicio = espacio + 1;\n    espacio = texto.indexOf(\" \", inicio);\n}\n\n// Imprime la \u00faltima parte de la cadena\nconsole.log(texto.slice(inicio));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-string","title":"Ejercicios: Clase <code>String</code>","text":"<p>Ejercicio 1: Manipulaci\u00f3n b\u00e1sica de cadenas</p> <ul> <li>Declara una cadena con el texto: <code>\"Bienvenido a JavaScript\"</code>.</li> <li>Convierte todo el texto a may\u00fasculas.</li> <li>Extrae la palabra <code>\"JavaScript\"</code>.</li> <li>Reemplaza la palabra <code>\"Bienvenido\"</code> por <code>\"Hola\"</code>.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>let texto = \"Bienvenido a JavaScript\";\n\nconsole.log(\"En may\u00fasculas:\", texto.toUpperCase());\nconsole.log(\"Extraer 'JavaScript':\", texto.slice(13));\nconsole.log(\"Reemplazar 'Bienvenido':\", texto.replace(\"Bienvenido\", \"Hola\"));\n</code></pre> <p>Ejercicio 2: Contar palabras</p> <ul> <li>Escribe un programa que cuente el n\u00famero de palabras en una cadena ingresada por el usuario.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nlet palabras = frase.trim().split(\" \").length;\n\nconsole.log(\"N\u00famero de palabras:\", palabras);\n</code></pre> <p>Ejercicio 3: Verificar contenido</p> <ul> <li>Solicita al usuario una frase y verifica si contiene la palabra <code>\"JavaScript\"</code>.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nconsole.log(\"\u00bfContiene 'JavaScript'?:\", frase.includes(\"JavaScript\"));\n</code></pre> <p>Ejercicio 4: Formatear una lista</p> <ul> <li>Dada una cadena con elementos separados por comas, convi\u00e9rtela en una lista con vi\u00f1etas.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>let lista = \"manzana,banana,naranja\";\nlet elementos = lista.split(\",\");\n\nconsole.log(\"Lista con vi\u00f1etas:\");\nelementos.forEach(item =&gt; console.log(\"-\", item));\n</code></pre> <p>Ejercicio 5: Eliminar espacios</p> <ul> <li>Solicita al usuario una frase y elimina todos los espacios en blanco.</li> </ul> Soluci\u00f3n del ejercicio <pre><code>const prompt = require(\"prompt-sync\")();\n\nlet frase = prompt(\"Introduce una frase: \");\nconsole.log(\"Sin espacios:\", frase.replace(/\\s/g, \"\"));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#154-clase-date","title":"1.5.4 Clase <code>Date</code>","text":"<p>La clase <code>Date</code> en JavaScript permite trabajar con fechas y horas, ofreciendo m\u00e9todos para obtener, establecer y manipular valores temporales.</p>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#creacion-de-fechas","title":"Creaci\u00f3n de Fechas","text":"<ol> <li> <p>Fecha actual: <pre><code>const ahora = new Date();\nconsole.log(\"Fecha y hora actuales:\", ahora);\n</code></pre></p> </li> <li> <p>Fecha espec\u00edfica: <pre><code>const fechaEspecifica = new Date(2025, 0, 20); // A\u00f1o, mes (0-indexado), d\u00eda\nconsole.log(\"Fecha espec\u00edfica:\", fechaEspecifica);\n</code></pre></p> </li> <li> <p>Desde una cadena: <pre><code>const fechaCadena = new Date(\"2025-01-20T15:30:00\");\nconsole.log(\"Fecha desde cadena:\", fechaCadena);\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#metodos-comunes-de-date","title":"M\u00e9todos Comunes de <code>Date</code>","text":"<ol> <li> <p><code>getFullYear()</code>: Obtiene el a\u00f1o.     <pre><code>console.log(ahora.getFullYear()); // Ejemplo: 2025\n</code></pre></p> </li> <li> <p><code>getMonth()</code>: Obtiene el mes (0-indexado).     <pre><code>console.log(ahora.getMonth()); // Ejemplo: 0 para enero\n</code></pre></p> </li> <li> <p><code>getDate()</code>: Obtiene el d\u00eda del mes.     <pre><code>console.log(ahora.getDate()); // Ejemplo: 20\n</code></pre></p> </li> <li> <p><code>getDay()</code>: Obtiene el d\u00eda de la semana (0 es domingo).     <pre><code>console.log(ahora.getDay()); // Ejemplo: 1 para lunes\n</code></pre></p> </li> <li> <p><code>getHours()</code>, <code>getMinutes()</code>, <code>getSeconds()</code>: Obtienen la hora, minutos y segundos.     <pre><code>console.log(ahora.getHours(), ahora.getMinutes(), ahora.getSeconds());\n</code></pre></p> </li> <li> <p><code>toLocaleDateString()</code>: Formatea la fecha en el formato local.     <pre><code>console.log(ahora.toLocaleDateString()); // Ejemplo: \"20/01/2025\"\n</code></pre></p> </li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#comparar-fechas","title":"Comparar Fechas","text":"<p>Puedes comparar fechas usando operadores como <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p> <pre><code>const fecha1 = new Date(\"2025-01-20\");\nconst fecha2 = new Date(\"2025-01-25\");\n\nconsole.log(\"\u00bfFecha1 es anterior a Fecha2?:\", fecha1 &lt; fecha2); // true\nconsole.log(\"\u00bfSon iguales?:\", fecha1.getTime() === fecha2.getTime()); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejemplo-completo_2","title":"Ejemplo Completo","text":"Ejemplo con la Clase <code>Date</code> <pre><code>const ahora = new Date();\n\nconsole.log(\"Fecha y hora actuales:\", ahora);\nconsole.log(\"A\u00f1o:\", ahora.getFullYear());\nconsole.log(\"Mes:\", ahora.getMonth() + 1); // Se suma 1 porque es 0-indexado\nconsole.log(\"D\u00eda del mes:\", ahora.getDate());\nconsole.log(\"Hora actual:\", ahora.getHours(), \":\", ahora.getMinutes());\nconsole.log(\"Formato local:\", ahora.toLocaleDateString());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_15/#ejercicios-clase-date","title":"Ejercicios: Clase <code>Date</code>","text":"<p>Ejercicio 1: Obtener fecha y hora actuales</p> <ul> <li>Crea un programa que muestre:<ul> <li>La fecha actual en formato local.</li> <li>La hora actual (hora:minutos).</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio Fecha y hora actuales<pre><code>const ahora = new Date();\n\nconsole.log(\"Fecha actual:\", ahora.toLocaleDateString());\nconsole.log(\"Hora actual:\", ahora.getHours() + \":\" + ahora.getMinutes());\n</code></pre> <p>Ejercicio 2: Comparar dos fechas</p> <ul> <li>Solicita al usuario dos fechas en formato <code>YYYY-MM-DD</code>.</li> <li>Compara ambas fechas e indica cu\u00e1l es anterior o si son iguales.</li> </ul> Soluci\u00f3n del ejercicio Comparar fechas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fecha1 = new Date(prompt(\"Introduce la primera fecha (YYYY-MM-DD): \"));\nlet fecha2 = new Date(prompt(\"Introduce la segunda fecha (YYYY-MM-DD): \"));\n\nif (fecha1 &lt; fecha2) {\n    console.log(\"La primera fecha es anterior.\");\n} else if (fecha1 &gt; fecha2) {\n    console.log(\"La segunda fecha es anterior.\");\n} else {\n    console.log(\"Ambas fechas son iguales.\");\n}\n</code></pre> <p>Ejercicio 3: Calcular d\u00edas entre dos fechas</p> <ul> <li>Solicita al usuario dos fechas en formato <code>YYYY-MM-DD</code>.</li> <li>Calcula la diferencia en d\u00edas entre ambas fechas.</li> </ul> Soluci\u00f3n del ejercicio D\u00edas entre fechas<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet fecha1 = new Date(prompt(\"Introduce la primera fecha (YYYY-MM-DD): \"));\nlet fecha2 = new Date(prompt(\"Introduce la segunda fecha (YYYY-MM-DD): \"));\n\nlet diferencia = Math.abs(fecha2 - fecha1); // Diferencia en milisegundos\nlet dias = diferencia / (1000 * 60 * 60 * 24); // Convertir a d\u00edas\n\nconsole.log(\"Diferencia en d\u00edas:\", dias);\n</code></pre> <p>Ejercicio 4: Crear fecha a partir de valores</p> <ul> <li>Solicita al usuario que introduzca el a\u00f1o, mes y d\u00eda por separado.</li> <li>Crea un objeto <code>Date</code> con esos valores y muestra la fecha en formato local.</li> </ul> Soluci\u00f3n del ejercicio Crear fecha a partir de valores<pre><code>const prompt = require(\"prompt-sync\")();\n\nlet anio = parseInt(prompt(\"Introduce el a\u00f1o: \"));\nlet mes = parseInt(prompt(\"Introduce el mes (1-12): \")) - 1; // Restar 1 porque es 0-indexado\nlet dia = parseInt(prompt(\"Introduce el d\u00eda: \"));\n\nlet fecha = new Date(anio, mes, dia);\nconsole.log(\"Fecha creada:\", fecha.toLocaleDateString());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad01_16/","title":"Unidad 1: Uso Avanzado de N\u00fameros, Cadenas y Fechas","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_16/#16-ejercicios","title":"1.6 Ejercicios","text":""},{"location":"content/MF_0966_3/UF2215/unidad01_16/#tenis","title":"Tenis","text":"<p>Ejercicio 1: Marcador de tenis simplificado</p> <ul> <li>Dise\u00f1a un programa que permita llevar el marcador de un partido de tenis:<ul> <li>Solicita los nombres de los jugadores.</li> <li>Permite ingresar qui\u00e9n gana cada punto y actualiza el marcador.</li> <li>Llega a \"deuce\" cuando ambos tienen 40 puntos.</li> <li>Lleva el conteo de juegos ganados, y cuando un jugador llega a 6 juegos, suma un set.</li> <li>Finaliza cuando un jugador gana 2 sets.</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad01_16/#fechas-de-pago","title":"Fechas de pago","text":"<p>Ejercicio 2: Fechas de pago</p> <ul> <li>Escribe un programa que reciba:<ul> <li>Un importe.</li> <li>Una fecha de factura en formato <code>YYYY-MM-DD</code>.</li> <li>Una opci\u00f3n para calcular fechas de pago: a 30 d\u00edas, a 30 y 60 d\u00edas, o a 30, 60 y 90 d\u00edas.</li> </ul> </li> <li>Muestra las fechas de pago correspondientes.</li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad01_16/#codificaciondecodificacion","title":"codificaci\u00f3n/decodificaci\u00f3n","text":"<p>Ejercicio 3: Codificaci\u00f3n de cadenas</p> <ul> <li>Dise\u00f1a un programa que permita codificar y decodificar cadenas de texto.<ul> <li>Solicita una cadena de texto </li> <li>Codifica y decodifica la cadena seg\u00fan la cadena de codificaci\u00f3n.</li> <li>La cadena de codificaci\u00f3n ser\u00e1: <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</code> por <code>DEFGHIJKLMNOPQRSTUVWXYZABCdefghijklmnopqrstuvwxyzabc</code>.</li> </ul> </li> </ul> Soluci\u00f3n del ejercicio pendiente"},{"location":"content/MF_0966_3/UF2215/unidad02_21/","title":"Unidad 2: Arrays, Objetos y Clases","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_21/#31-arrays-en-javascript","title":"3.1 Arrays en JavaScript","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_21/#creacion-de-un-array","title":"Creaci\u00f3n de un Array","text":"<p>Un array en JavaScript es una colecci\u00f3n ordenada de elementos. Se puede crear de diferentes maneras:</p> <p>Ejemplo de creaci\u00f3n de un array</p> Definici\u00f3n de un array<pre><code>let elementos = []; // Array vac\u00edo\nlet frutas = [\"Manzana\", \"Banana\", \"Cereza\"]; // Array con elementos string\nlet numeros = [1, 2, 3, 4, 5]; // Array con elementos num\u00e9ricos\nlet mixto = [\"Hola\", 42, true, null]; // Array con elementos de diferentes tipos (mixto)\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#uso-de-indices","title":"Uso de \u00cdndices","text":"<p>Los elementos de un array est\u00e1n numerados, comenzando desde el \u00edndice <code>0</code>.</p> <p>Acceder a elementos mediante \u00edndice</p> Acceso a elementos del array<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nconsole.log(frutas[0]); // Manzana\nconsole.log(frutas[1]); // Banana\nconsole.log(frutas[2]); // Cereza\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#cambiar-un-valor-mediante-el-indice","title":"Cambiar un Valor mediante el \u00edndice","text":"<p>Podemos modificar los valores de un array asignando nuevos valores a sus \u00edndices:</p> <p>Modificar elementos en un array</p> Modificaci\u00f3n de elementos<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nfrutas[1] = \"Naranja\";\nconsole.log(frutas); // [\"Manzana\", \"Naranja\", \"Cereza\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#borrado-de-elementos-undefined","title":"Borrado de Elementos (<code>undefined</code>)","text":"<p>Si eliminamos un elemento sin reorganizar el array, su posici\u00f3n quedar\u00e1 vac\u00eda con un valor <code>undefined</code>.</p> <p>Eliminar un elemento y su problema</p> Eliminaci\u00f3n de elementos con delete<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\ndelete frutas[1];\nconsole.log(frutas); // [\"Manzana\", undefined, \"Cereza\"]\n</code></pre> <p>Este problema se soluciona utilizando m\u00e9todos espec\u00edficos para eliminar elementos, que veremos m\u00e1s adelante.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#propiedades-de-los-arrays","title":"Propiedades de los Arrays","text":"<p>La propiedad m\u00e1s importante de un array es <code>length</code>, que nos indica cu\u00e1ntos elementos tiene el array.</p> <p>Ejemplo de <code>length</code></p> Propiedad length<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nconsole.log(frutas.length); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#recorrer-un-array-con-for","title":"Recorrer un array con <code>for</code>","text":"<p>Podemos usar <code>length</code> para recorrer un array completamente con un bucle <code>for</code>.</p> <p>Ejemplo de recorrido con <code>for</code></p> <p>Recorrido con for<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\n\nfor (let i = 0; i &lt; frutas.length; i++) {\n    console.log(frutas[i]);\n}\n</code></pre> <pre><code>Manzana\nBanana\nCereza\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#recorrer-un-array-con-forof","title":"Recorrer un array con <code>for...of</code>","text":"<p>Una forma m\u00e1s moderna de recorrer un array es utilizando un bucle <code>for...of</code>, que nos permite acceder directamente a los valores sin necesidad de los \u00edndices.</p> <p>La sintaxis es:</p> <p>Sintaxis de <code>for...of</code></p> Sintaxis de for...of<pre><code>for (let elemento of array) {\n    // Acceder al elemento\n}\n</code></pre> <p>Me permite iterar sobre arrays, strings, mapas, sets, etc. bbjetos <code>iterables</code>. Veamos un par de ejemplos:</p> <p>Ejemplo recorrido array con <code>for...of</code></p> Recorrido con `for..of`<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nfor (let fruta of frutas) {\n    console.log(fruta);\n}\n</code></pre> <p>Ejemplo recorrido de un <code>string</code> con <code>for...of</code></p> Recorrido de un `string` con `for...of`<pre><code>let mensaje = \"Hola Mundo\";\nfor (let letra of mensaje) {\n    console.log(letra);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#buscar-un-elemento-con-while-y-una-variable-bandera","title":"Buscar un elemento con <code>while</code> y una variable bandera","text":"<p>Una variable bandera es una variable booleana (<code>true</code> o <code>false</code>) que utilizamos para indicar si una condici\u00f3n se ha cumplido dentro de un bucle. Se usa com\u00fanmente cuando buscamos un valor en un array o cuando queremos detener un proceso una vez que se ha encontrado un resultado.</p> <p>En este caso, utilizamos la variable <code>encontrado</code> como bandera para saber si hemos encontrado el elemento dentro del array.</p> <p>Ejemplo de b\u00fasqueda con <code>while</code></p> <p>B\u00fasqueda con while y variable bandera<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\", \"Naranja\"];\nlet buscar = \"Cereza\";\nlet encontrado = false;\nlet i = 0;\n\nwhile (i &lt; frutas.length &amp;&amp; !encontrado) {\n    if (frutas[i] === buscar) {\n        encontrado = true;\n        console.log(`Elemento encontrado en la posici\u00f3n ${i}`);\n    }\n    i++;\n}\n\nif (!encontrado) {\n    console.log(\"Elemento no encontrado\");\n}\n</code></pre> <pre><code>Elemento encontrado en la posici\u00f3n 2\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodos-de-los-arrays","title":"M\u00e9todos de los Arrays","text":"<p>JavaScript proporciona varios m\u00e9todos para manipular arrays. A continuaci\u00f3n, explicamos cada uno junto con sus par\u00e1metros y el valor que devuelven.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#push-agregar-al-final","title":"<code>push()</code> - Agregar al final","text":"<p>Agrega uno o m\u00e1s elementos al final del array y devuelve la nueva longitud del array.</p> <p>Ejemplo de <code>push()</code></p> Ejemplo de push()<pre><code>let frutas = [\"Manzana\", \"Banana\"];\nlet nuevaLongitud = frutas.push(\"Cereza\");\nconsole.log(frutas); // [\"Manzana\", \"Banana\", \"Cereza\"]\nconsole.log(nuevaLongitud); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#pop-eliminar-el-ultimo-elemento","title":"<code>pop()</code> - Eliminar el \u00faltimo elemento","text":"<p>Elimina el \u00faltimo elemento del array y devuelve el elemento eliminado.</p> <p>Ejemplo de <code>pop()</code></p> Ejemplo de pop()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nlet eliminado = frutas.pop();\nconsole.log(frutas); // [\"Manzana\", \"Banana\"]\nconsole.log(eliminado); // \"Cereza\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#shift-eliminar-el-primer-elemento","title":"<code>shift()</code> - Eliminar el primer elemento","text":"<p>Elimina el primer elemento del array y devuelve el elemento eliminado.</p> <p>Ejemplo de <code>shift()</code></p> Ejemplo de shift()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nlet eliminado = frutas.shift();\nconsole.log(frutas); // [\"Banana\", \"Cereza\"]\nconsole.log(eliminado); // \"Manzana\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#unshift-agregar-al-inicio","title":"<code>unshift()</code> - Agregar al inicio","text":"<p>Agrega uno o m\u00e1s elementos al inicio del array y devuelve la nueva longitud del array.</p> <p>Ejemplo de <code>unshift()</code></p> Ejemplo de unshift()<pre><code>let frutas = [\"Banana\", \"Cereza\"];\nlet nuevaLongitud = frutas.unshift(\"Manzana\");\nconsole.log(frutas); // [\"Manzana\", \"Banana\", \"Cereza\"]\nconsole.log(nuevaLongitud); // 3\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#splice-agregar-o-eliminar-elementos","title":"<code>splice()</code> - Agregar o eliminar elementos","text":"<p>Permite agregar, eliminar o reemplazar elementos en una posici\u00f3n espec\u00edfica.</p> <p>Par\u00e1metros:</p> <ol> <li>\u00cdndice de inicio: Posici\u00f3n donde se comenzar\u00e1 la modificaci\u00f3n.</li> <li>N\u00famero de elementos a eliminar: Define cu\u00e1ntos elementos se eliminan desde el \u00edndice indicado.</li> <li>Elementos a agregar (opcional): Elementos que se agregar\u00e1n en la posici\u00f3n indicada.</li> </ol> <p>Ejemplo de <code>splice()</code></p> Ejemplo de splice()<pre><code>let colores = [\"Rojo\", \"Verde\", \"Azul\"];\n\n// Elimina 1 elemento desde la posici\u00f3n 1 (elimina \"Verde\")\ncolores.splice(1, 1);\nconsole.log(colores); // [\"Rojo\", \"Azul\"]\n\n// Agrega dos elementos en la posici\u00f3n 1 sin eliminar ninguno\ncolores.splice(1, 0, \"Amarillo\", \"Violeta\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Violeta\", \"Azul\"]\n\n// Reemplaza un elemento en la posici\u00f3n 2\ncolores.splice(2, 1, \"Negro\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Negro\", \"Azul\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#isarray-verificar-si-es-un-array","title":"<code>isArray()</code> - Verificar si es un array","text":"<p>Devuelve <code>true</code> si el valor es un array, de lo contrario <code>false</code>.</p> <p>Ejemplo de <code>isArray()</code></p> Ejemplo de isArray()<pre><code>console.log(Array.isArray([1, 2, 3])); // true\nconsole.log(Array.isArray(\"Hola\")); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#sort-ordenar-un-array","title":"<code>sort()</code> - Ordenar un array","text":"<p>Ordena los elementos del array alfab\u00e9ticamente.</p> <p>Ejemplo de <code>sort()</code></p> Ejemplo de sort()<pre><code>let frutas = [\"Banana\", \"Manzana\", \"Cereza\"];\nfrutas.sort();\nconsole.log(frutas); // [\"Banana\", \"Cereza\", \"Manzana\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#reverse-invertir-el-orden-de-los-elementos","title":"<code>reverse()</code> - Invertir el orden de los elementos","text":"<p>Invierte el orden de los elementos en un array.</p> <p>Ejemplo de <code>reverse()</code></p> Ejemplo de reverse()<pre><code>let frutas = [\"Banana\", \"Manzana\", \"Cereza\"];\nfrutas.reverse();\nconsole.log(frutas); // [\"Manzana\", \"Cereza\", \"Banana\"]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#join-convertir-un-array-en-una-cadena","title":"<code>join()</code> - Convertir un array en una cadena","text":"<p>Une los elementos del array en una cadena de texto con un separador especificado.</p> <p>Ejemplo de <code>join()</code></p> Ejemplo de join()<pre><code>console.log(frutas.join(\", \")); // \"Manzana, Cereza, Banana\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#concat-unir-arrays","title":"<code>concat()</code> - Unir arrays","text":"<p>Concatena uno o m\u00e1s arrays y devuelve un nuevo array.</p> <p>Ejemplo de <code>concat()</code></p> Ejemplo de concat()<pre><code>let numeros1 = [1, 2, 3];\nlet numeros2 = [4, 5, 6];\nlet resultado = numeros1.concat(numeros2);\nconsole.log(resultado); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#indexof-encontrar-la-posicion-de-un-elemento","title":"<code>indexOf()</code> - Encontrar la posici\u00f3n de un elemento","text":"<p>Devuelve el primer \u00edndice donde se encuentra el elemento en el array, o <code>-1</code> si no existe.</p> <p>Esta funci\u00f3n tiene dos par\u00e1metros opcionales: </p> <ul> <li><code>fromIndex</code>: \u00cdndice donde comenzar la b\u00fasqueda.</li> <li><code>searchElement</code>: Elemento a buscar.</li> </ul> <p>Veamos un ejemplo de b\u00fasqueda de un elemento en un array.</p> <p>Ejemplo de <code>indexOf()</code></p> Ejemplo de indexOf()<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.indexOf(20)); // 1\nconsole.log(numeros.indexOf(100)); // -1\n</code></pre> <p>Ahora un ejemplo de b\u00fasqueda a partir de un \u00edndice espec\u00edfico.</p> <p>Ejemplo de <code>indexOf()</code> con <code>fromIndex</code></p> Ejemplo de indexOf() con fromIndex<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.indexOf(20, 2)); // 4\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#lastindexof-encontrar-la-ultima-aparicion-de-un-elemento","title":"<code>lastIndexOf()</code> - Encontrar la \u00faltima aparici\u00f3n de un elemento","text":"<p>Devuelve el \u00faltimo \u00edndice donde se encuentra el elemento en el array.</p> <p>Este m\u00e9todo tambi\u00e9n tiene dos par\u00e1metros opcionales:</p> <ul> <li><code>fromIndex</code>: \u00cdndice donde comenzar la b\u00fasqueda.</li> <li><code>searchElement</code>: Elemento a buscar.</li> </ul> <p>Ejemplo de <code>lastIndexOf()</code></p> Ejemplo de lastIndexOf()<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.lastIndexOf(20)); // 4\n</code></pre> <p>Ahora veamos un ejemplo de b\u00fasqueda a partir de un \u00edndice espec\u00edfico.</p> <p>Ejemplo de <code>lastIndexOf()</code> con <code>fromIndex</code></p> Ejemplo de lastIndexOf() con fromIndex<pre><code>let numeros = [10, 20, 30, 40, 20];\nconsole.log(numeros.lastIndexOf(20, 2)); // 1\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodos-avanzados-de-arrays","title":"M\u00e9todos Avanzados de Arrays","text":"<p>Estos m\u00e9todos permiten realizar operaciones m\u00e1s avanzadas sobre los arrays. En estos m\u00e9todos necesitamos definir una funci\u00f3n que se aplicar\u00e1 a cada elemento del array, seguramente cuando veamos las <code>funciones</code>y las <code>funciones flecha</code> en el tema siguiente te resultar\u00e1 m\u00e1s sencillo entender estos m\u00e9todos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#some-verificar-si-algun-elemento-cumple-una-condicion","title":"<code>some()</code> - Verificar si alg\u00fan elemento cumple una condici\u00f3n","text":"<p>Devuelve <code>true</code> si al menos un elemento cumple la condici\u00f3n dada. Ser\u00eda como un <code>OR</code> l\u00f3gico a todos los elementos, devolviendo <code>true</code> si al menos uno cumple la condici\u00f3n.</p> <p>Ejemplo de <code>some()</code></p> Ejemplo de some()<pre><code>const ages = [3, 10, 18, 20];\nfunction checkAdult(age) {\n    return age &gt; 18;\n}\nages.some(checkAdult);\n</code></pre> <p>El mismo ejemplo utilizando una funci\u00f3n flecha.</p> <p>Ejemplo de <code>some()</code></p> Ejemplo de some()<pre><code>let edades = [10, 20, 30, 40];\nlet hayMayoresDe18 = edades.some(edad =&gt; edad &gt; 18);\nconsole.log(hayMayoresDe18); // true\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#every-verificar-si-todos-los-elementos-cumplen-una-condicion","title":"<code>every()</code> - Verificar si todos los elementos cumplen una condici\u00f3n","text":"<p>Devuelve <code>true</code> si todos los elementos cumplen la condici\u00f3n dada.</p> <p>Ejemplo de <code>every()</code></p> Ejemplo de every()<pre><code>const ages = [3, 10, 18, 20];\nfunction checkAdult(age) {\n    return age &gt; 18;\n}\nages.every(checkAdult);\n</code></pre> <p>El mismo ejemplo utilizando una funci\u00f3n flecha.</p> <p>Ejemplo de <code>every()</code></p> Ejemplo de every()<pre><code>let edades = [10, 20, 30, 40];\nlet todosMayoresDe18 = edades.every(edad =&gt; edad &gt; 18);\nconsole.log(todosMayoresDe18); // false\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#filter-filtrar-elementos-de-un-array","title":"<code>filter()</code> - Filtrar elementos de un array","text":"<p>Devuelve un nuevo array con los elementos que cumplen una condici\u00f3n.</p> <p>Ejemplo de <code>filter()</code></p> Ejemplo de filter()<pre><code>const ages = [10, 20, 30, 40];\nfunction checkAdult(age) {\n    return age &gt; 18;\n}\nlet mayoresDe18 = ages.filter(checkAdult);\nconsole.log(mayoresDe18); // [20, 30, 40]\n</code></pre> <p>El mismo ejemplo utilizando una funci\u00f3n flecha.</p> <p>Ejemplo de <code>filter()</code></p> Ejemplo de filter()<pre><code>let edades = [10, 20, 30, 40];\nlet mayoresDe18 = edades.filter(edad =&gt; edad &gt; 18);\nconsole.log(mayoresDe18); // [20, 30, 40]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#foreach-recorrer-un-array-ejecutando-una-funcion","title":"<code>forEach()</code> - Recorrer un array ejecutando una funci\u00f3n","text":"<p>Ejecuta una funci\u00f3n sobre cada elemento del array.</p> <p>Ejemplo de <code>forEach()</code></p> Ejemplo de forEach()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nfunction mostrarFruta(fruta) {\n    console.log(fruta);\n}\nfrutas.forEach(mostrarFruta); // Manzana, Banana, Cereza\n</code></pre> <p>Con una funci\u00f3n flecha:</p> <p>Ejemplo de <code>forEach()</code></p> Ejemplo de forEach()<pre><code>let frutas = [\"Manzana\", \"Banana\", \"Cereza\"];\nfrutas.forEach(fruta =&gt; console.log(fruta));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#map-transformar-elementos-de-un-array","title":"<code>map()</code> - Transformar elementos de un array","text":"<p>Devuelve un nuevo array con los elementos transformados por una funci\u00f3n.</p> <p>Ejemplo de <code>map()</code></p> Ejemplo de map()<pre><code>let numeros = [10, 20, 30, 40];\nfunction doblarNumero(num) {\n    return num * 2;\n}\nlet numerosDobles = numeros.map(doblarNumero);\nconsole.log(numerosDobles); // [20, 40, 60, 80]\n</code></pre> <p>Utilizando una funci\u00f3n flecha</p> <p>Ejemplo de <code>map()</code></p> Ejemplo de map()<pre><code>let edades = [10, 20, 30, 40];\nlet edadesDobladas = edades.map(edad =&gt; edad * 2);\nconsole.log(edadesDobladas); // [20, 40, 60, 80]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#metodo-reduce-en-arrays","title":"M\u00e9todo <code>reduce()</code> en Arrays","text":"<p>El m\u00e9todo <code>reduce()</code> permite recorrer un array y acumular un resultado a partir de los elementos. Se utiliza com\u00fanmente para sumar valores, calcular promedios o transformar datos de una colecci\u00f3n. Es como una funci\u00f3n de agregaci\u00f3n en SQL, o un <code>reduce</code> en Excel.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#sintaxis-de-reduce","title":"Sintaxis de <code>reduce()</code>","text":"<p>Sintaxis de reduce()<pre><code>function sumar(acumulador, elementoActual) {\n    return acumulador + elementoActual;\n}\nlet suma = array.reduce(sumar, valorInicial);\n</code></pre> Utilizando una funci\u00f3n flecha <pre><code>array.reduce((acumulador, elementoActual) =&gt; {\n    // Operaci\u00f3n sobre cada elemento\n    return nuevoAcumulador;\n}, valorInicial);\n</code></pre></p> <ul> <li><code>acumulador</code>: Es el valor acumulado en cada iteraci\u00f3n.</li> <li><code>elementoActual</code>: Es el elemento actual del array en la iteraci\u00f3n.</li> <li><code>valorInicial</code> (opcional): Es el valor inicial del acumulador. Si no se proporciona, toma el primer elemento del array.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-basico-sumar-elementos-de-un-array","title":"Ejemplo b\u00e1sico: Sumar elementos de un array","text":"<p>Ejemplo de uso de <code>reduce()</code></p> Suma de elementos con reduce()<pre><code>let numeros = [10, 20, 30, 40];\n// definimos una funci\u00f3n que sumar\u00e1 dos n\u00fameros\nfunction sumar(acumulador, num) {\n    return acumulador + num;\n}\n// llamamos a reduce con la funci\u00f3n sumar y el valor inicial 0\nlet suma = numeros.reduce(sumar, 0);\nconsole.log(\"Suma total:\", suma); // 100\n</code></pre> <p>El mismo ejemplo pero con la funci\u00f3n flecha</p> <p>Ejemplo de uso de <code>reduce()</code></p> Suma de elementos con reduce()<pre><code>let numeros = [10, 20, 30, 40];\nlet suma = numeros.reduce((acumulador, num) =&gt; acumulador + num, 0);\nconsole.log(\"Suma total:\", suma); // 100\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-contar-elementos-con-una-condicion","title":"Ejemplo: Contar elementos con una condici\u00f3n","text":"<p>Ejemplo de contar elementos con <code>reduce</code></p> Contar elementos con reduce()<pre><code>let respuestas = [5, 3, 4, 2, 5, 1, 4, 3, 5, 2];\nfunction contarInsatisfechos(contador, respuesta) {\n    return respuesta &lt;= 3 ? contador + 1 : contador;\n}\nlet insatisfechos = respuestas.reduce(contarInsatisfechos, 0);\nconsole.log(\"N\u00famero de clientes insatisfechos:\", insatisfechos);\n</code></pre> <p>El miso ejemplo con la funci\u00f3n flecha</p> <p>Ejemplo de contar elementos con <code>reduce()</code></p> Contar elementos con reduce()<pre><code>let respuestas = [5, 3, 4, 2, 5, 1, 4, 3, 5, 2];\n\nlet insatisfechos = respuestas.reduce((contador, respuesta) =&gt; {\n    return respuesta &lt;= 3 ? contador + 1 : contador;\n}, 0);\n\nconsole.log(\"N\u00famero de clientes insatisfechos:\", insatisfechos);\n</code></pre> <p><code>reduce()</code> es una herramienta poderosa cuando se necesita transformar un array en un \u00fanico valor acumulado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#foreach-vs-for-vs-forof-en-arrays","title":"<code>forEach</code> vs <code>for</code> vs <code>for...of</code> en Arrays","text":"<p>Existen varias formas de recorrer un array en JavaScript, cada una con sus ventajas y desventajas:</p> <ul> <li><code>forEach()</code>: Es m\u00e1s limpio y legible cuando solo necesitamos aplicar una funci\u00f3n a cada elemento.</li> <li>El bucle <code>for</code>: Ofrece m\u00e1s flexibilidad, ya que podemos acceder a los \u00edndices y modificar el array. Es \u00fatil cuando necesitamos hacer varias operaciones en cada iteraci\u00f3n.</li> <li>El bucle <code>for...of</code>: Es una sintaxis m\u00e1s moderna para iterar sobre los valores de un array sin necesidad de acceder a los \u00edndices.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejemplo-comparativo-foreach-vs-for-vs-forof","title":"Ejemplo Comparativo: <code>forEach</code> vs <code>for</code> vs <code>for...of</code>","text":"Comparaci\u00f3n de <code>forEach()</code>, <code>for</code> y <code>for...of</code> Comparaci\u00f3n de forEach(), for y for...of<pre><code>let numeros = [10, 20, 30, 40, 50];\n\nconsole.log(\"Recorriendo con forEach:\");\nnumeros.forEach(num =&gt; console.log(num));\n\nconsole.log(\"Recorriendo con for:\");\nfor (let i = 0; i &lt; numeros.length; i++) {\n    console.log(numeros[i]);\n}\n\nconsole.log(\"Recorriendo con for...of:\");\nfor (let numero of numeros) {\n    console.log(numero);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#cuando-usar-foreach-for-o-forof","title":"\u00bfCu\u00e1ndo usar <code>forEach()</code>, <code>for</code> o <code>for...of</code>?","text":"M\u00e9todo Cu\u00e1ndo Usarlo <code>forEach()</code> Cuando solo queremos ejecutar una acci\u00f3n sobre cada elemento sin modificar el array ni necesitar el \u00edndice. <code>for</code> Cuando necesitamos acceder a los \u00edndices, modificar el array. Hay que realizar diversas operaciones en cada iteraci\u00f3n <code>for...of</code> Cuando queremos recorrer directamente los valores del array sin preocuparnos por los \u00edndices. <p>El <code>forEach()</code> es conveniente para realizar tareas simples sobre cada elemento, <code>for</code> nos da m\u00e1s control sobre la iteraci\u00f3n, y <code>for...of</code> es una alternativa moderna y clara para recorrer los valores del array directamente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#arrays-multidimensionales","title":"Arrays Multidimensionales","text":"<p>Un array puede contener otros arrays dentro de s\u00ed, formando una estructura de datos multidimensional.</p> <p>Ejemplo de array multidimensional</p> Array de arrays<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(matriz[1][2]); // 6\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#recorrer-un-array-multidimensional-con-for-anidado","title":"Recorrer un array multidimensional con <code>for</code> anidado","text":"<p>Ejemplo de recorrido con <code>for</code> anidado</p> Recorrer array multidimensional<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor (let i = 0; i &lt; matriz.length; i++) {\n    for (let j = 0; j &lt; matriz[i].length; j++) {\n        console.log(`Elemento [${i}][${j}] = ${matriz[i][j]}`);\n    }\n}\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo anterior para que muestre el array completo en forma de matriz.</li> </ol> </li> <li> <ol> <li>Modifica el array completo para que muestre la diagonal principal de la matriz. (la diagonal principal son los elementos donde <code>i</code> y <code>j</code> son iguales).</li> </ol> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#multiplicacion-de-dos-matrices","title":"Multiplicaci\u00f3n de dos matrices","text":"<p>En este ejemplo, multiplicamos dos matrices <code>A</code> y <code>B</code> para obtener un resultado <code>C</code>. Para multiplicar dos matrices, el n\u00famero de columnas de la primera matriz debe ser igual al n\u00famero de filas de la segunda matriz. Podemos encontrar m\u00e1s informaci\u00f3n sobre multiplicaci\u00f3n de matrices aqu\u00ed </p> <p>Ejemplo de multiplicaci\u00f3n de matrices</p> Multiplicaci\u00f3n de matrices<pre><code>let A = [\n    [1, 2],\n    [3, 4]\n];\n\nLet B = [\n    [5, 6],\n    [7, 8]\n];\n\nLet resultado =[];\n\nfor (let i = 0; i &lt; A.length; i++) {\n    resultado[i] = [];\n    for (let j = 0; j &lt; B[0].length; j++) {\n        let suma = 0;\n        for (let k = 0; k &lt; A[0].length; k++) {\n            suma += A[i][k] * B[k][j];\n        }\n        resultado[i][j] = suma;\n    }\n}\n\nconsole.log(resultado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#ejercicios-sobre-arrays-en-javascript","title":"Ejercicios sobre Arrays en JavaScript","text":"<p>A continuaci\u00f3n, se presentan una serie de ejercicios que ponen en pr\u00e1ctica los conceptos aprendidos en este tema.</p> <p>Ejercicio 1: Crear un array y mostrar su contenido</p> <ul> <li>Crea un array con cinco nombres y muestra su contenido utilizando <code>for</code>.</li> </ul> Soluci\u00f3n Mostrar contenido de un array<pre><code>let nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nfor (let i = 0; i &lt; nombres.length; i++) {\n    console.log(nombres[i]);\n}\n</code></pre> <p>Retos</p> <ul> <li>a. Modifica el c\u00f3digo anterior para que muestre los nombres en orden inverso.</li> <li>b. Modifica el c\u00f3digo para que muestre solo los nombres que empiecen con la letra \"A\".</li> <li>c. Utiliza forEach para mostrar los nombres en lugar de un bucle <code>for</code>.</li> </ul> <p>Ejercicio 2: Buscar un elemento en un array</p> <ul> <li>Pide al usuario un nombre y verifica si existe en un array de nombres utilizando <code>indexOf()</code>.</li> </ul> Soluci\u00f3n B\u00fasqueda en un array<pre><code>const prompt = require(\"prompt-sync\")();\nlet nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nlet nombreBuscado = prompt(\"Introduce un nombre: \");\n\nlet posicion = nombres.indexOf(nombreBuscado);\nif (posicion !== -1) {\n    console.log(`El nombre est\u00e1 en la posici\u00f3n ${posicion}`);\n} else {\n    console.log(\"Nombre no encontrado\");\n}\n</code></pre> <p>Ejercicio 3: Uso de <code>push()</code> y <code>pop()</code></p> <ul> <li>Crea un array vac\u00edo.</li> <li>Usa <code>push()</code> para agregar tres elementos.</li> <li>Usa <code>pop()</code> para eliminar el \u00faltimo elemento y mostrar el resultado.</li> </ul> Soluci\u00f3n Agregar y eliminar con push y pop<pre><code>let numeros = [];\nnumeros.push(10, 20, 30);\nconsole.log(numeros);\n\nnumeros.pop();\nconsole.log(numeros);\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para pedir al usuario los elementos a agregar hasta que ponga un 0. Si escribe -1 eliminamos el \u00faltimo elemento. En cada iteraci\u00f3n mostramos el array.</li> </ol> </li> </ul> <p>Ejercicio 4: Filtrar elementos con <code>filter()</code></p> <ul> <li>Crea un array de n\u00fameros.</li> <li>Usa <code>filter()</code> para obtener solo los n\u00fameros mayores de 50.</li> </ul> Soluci\u00f3n Uso de filter()<pre><code>let numeros = [10, 55, 60, 32, 70];\nlet mayoresDe50 = numeros.filter(num =&gt; num &gt; 50);\nconsole.log(mayoresDe50); // [55, 60, 70]\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica el c\u00f3digo para que el usuario introduza un m\u00ednimo y m\u00e1ximo para filtrar. Ejemplo, si pone 10,20 sacaremos s\u00f3lo los valores que est\u00e1n entre 10 y 20.</li> </ol> </li> </ul> <p>Ejercicio 5: Transformar elementos con <code>map()</code></p> <ul> <li>Dado un array de precios en euros, convi\u00e9rtelos a d\u00f3lares (suponiendo que 1\u20ac = 1.1$).</li> </ul> Soluci\u00f3n Uso de map()<pre><code>let preciosEuros = [10, 20, 30];\nlet preciosDolares = preciosEuros.map(precio =&gt; precio * 1.1);\nconsole.log(preciosDolares);\n</code></pre> <p>Retos</p> <ul> <li> <ol> <li>Modifica con un array de cambios (1-dolares, 2-yenes y 3-libras) con el valor de cada uno respecto al euro. Pide al usuario a qu\u00e9 moneda quiere cambiar los precios [1,2 o 3]. Y muestra los precios en la moneda seleccionada.</li> </ol> </li> </ul> <p>Ejercicio 6: Recorriendo un array con <code>forEach()</code></p> <ul> <li>Dado un array de nombres, usa <code>forEach()</code> para mostrarlos en la consola.</li> </ul> Soluci\u00f3n Uso de forEach()<pre><code>let nombres = [\"Ana\", \"Luis\", \"Pedro\", \"Mar\u00eda\", \"Carlos\"];\nnombres.forEach(nombre =&gt; console.log(nombre));\n</code></pre> <p>Retos</p> <ul> <li>a. Modifica el c\u00f3digo para que muestre los nombres en may\u00fasculas.</li> <li>b. Modifica el c\u00f3digo para que muestre los nombres con su longitud.</li> <li>c. Modifica el c\u00f3digo para conseguir un array con el orden inverso.</li> </ul> <p>Ejercicio 7: Uso de <code>splice()</code> para modificar un array</p> <ul> <li>Dado un array de colores <code>[rojo, verde, azul, amarillo]</code>, usa <code>splice()</code> para eliminar el segundo elemento y agregar un nuevo color en su lugar.</li> </ul> Soluci\u00f3n Uso de splice()<pre><code>let colores = [\"Rojo\", \"Verde\", \"Azul\"];\ncolores.splice(1, 1, \"Amarillo\");\nconsole.log(colores); // [\"Rojo\", \"Amarillo\", \"Azul\"]\n</code></pre> <p>Retos</p> <ul> <li>a. Modifica el c\u00f3digo para que el usuario pueda elegir el color a agregar y en qu\u00e9 posici\u00f3n lo quiere. Si el color est\u00e1 repetido, mostrar un mensaje de error.</li> <li>b. Modifica el c\u00f3digo para que el usuario pueda elegir el color a eliminar. Si el color no se encuntra dar un mensaje de error.</li> </ul> <p>Ejercicio 8: Uso de <code>sort()</code> y <code>reverse()</code></p> <ul> <li>Dado un array de palabras, ord\u00e9nalas alfab\u00e9ticamente y luego en orden inverso.</li> </ul> Soluci\u00f3n Uso de sort() y reverse()<pre><code>let palabras = [\"manzana\", \"banana\", \"cereza\", \"durazno\"];\npalabras.sort();\nconsole.log(palabras);\n\npalabras.reverse();\nconsole.log(palabras);\n</code></pre> <p>Ejercicio 9: Matriz bidimensional</p> <ul> <li>Crea una matriz 3x3 e imprime todos sus elementos con un <code>for</code> anidado.</li> </ul> Soluci\u00f3n Recorrer matriz bidimensional<pre><code>let matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nfor (let i = 0; i &lt; matriz.length; i++) {\n    for (let j = 0; j &lt; matriz[i].length; j++) {\n        console.log(`Elemento [${i}][${j}] = ${matriz[i][j]}`);\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#proyecto-final-eleccion-de-delegado","title":"Proyecto Final: Elecci\u00f3n de Delegado","text":"<p>En este proyecto, gestionaremos la elecci\u00f3n de delegado de clase. Contamos con 5 candidatos y 50 votos de alumnos. Nuestro objetivo es calcular el n\u00famero de votos obtenidos por cada candidato y mostrar el ranking en orden descendente.</p> <p>El inicio de nuestro programe debe ser: Elecci\u00f3n de delegado<pre><code>let candidatos = [\"Ana\", \"Luis\", \"Carlos\", \"Mar\u00eda\", \"Pedro\"];\nlet votos = [\n    1, 2, 3, 4, 5, 1, 1, 3, 4, 2,\n    5, 3, 2, 1, 4, 5, 3, 1, 2, 4,\n    3, 5, 2, 1, 3, 4, 5, 1, 2, 3,\n    1, 2, 3, 4, 5, 2, 1, 5, 3, 4,\n    5, 1, 2, 3, 4, 2, 5, 1, 3, 4\n];\n...\n...\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#solucion-con-bucles","title":"Soluci\u00f3n con Bucles","text":"<p>Usaremos bucles para contar los votos y ordenar los resultados.</p> Soluci\u00f3n con Bucles Elecci\u00f3n de delegado con bucles<pre><code>let candidatos = [\"Ana\", \"Luis\", \"Carlos\", \"Mar\u00eda\", \"Pedro\"];\nlet votos = [\n    1, 2, 3, 4, 5, 1, 1, 3, 4, 2,\n    5, 3, 2, 1, 4, 5, 3, 1, 2, 4,\n    3, 5, 2, 1, 3, 4, 5, 1, 2, 3,\n    1, 2, 3, 4, 5, 2, 1, 5, 3, 4,\n    5, 1, 2, 3, 4, 2, 5, 1, 3, 4\n];\n\nlet conteo = [0, 0, 0, 0, 0];\n\nfor (let i = 0; i &lt; votos.length; i++) {\n    let indice = votos[i] - 1;\n    conteo[indice]++;\n}\n\nlet resultados = [];\nfor (let i = 0; i &lt; candidatos.length; i++) {\n    resultados.push({ nombre: candidatos[i], votos: conteo[i] });\n}\n// esta funci\u00f3n devuelve: 0 si a es menor que b, 1 si a es mayor que b y 0 si son iguales\nfunction compararVotos(a, b) {\n    return b.votos - a.votos;\n}\n\nresultados.sort(compararVotos);\nconsole.log(\"Resultados de la elecci\u00f3n:\", resultados);\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo: La funci\u00f3n <code>compararVotos(a,b)</code> es una funci\u00f3n que:</p> <p>Resta b.votos - a.votos, lo que significa que:</p> <pre><code>- Si b.votos es mayor que a.votos, devuelve un valor positivo, colocando b antes que a.\n- Si b.votos es menor que a.votos, devuelve un valor negativo, colocando a antes que b.\n- Si son iguales, mantiene su orden original.\n</code></pre> <p>El efecto es ordenar el array en orden descendente seg\u00fan la propiedad votos de los objetos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_21/#solucion-con-metodos-de-arrays","title":"Soluci\u00f3n con M\u00e9todos de Arrays","text":"<p>Ahora usaremos m\u00e9todos como <code>reduce()</code>, <code>map()</code> y <code>sort()</code> para simplificar el c\u00f3digo.</p> Soluci\u00f3n con M\u00e9todos de Arrays Elecci\u00f3n de delegado con m\u00e9todos de arrays<pre><code>let conteoVotos = votos.reduce((acc, voto) =&gt; {\n    acc[voto - 1]++;\n    return acc;\n}, [0, 0, 0, 0, 0]);\n\nlet resultadosFinales = candidatos.map((nombre, i) =&gt; ({ nombre, votos: conteoVotos[i] }))\n                                 .sort((a, b) =&gt; b.votos - a.votos);\n\nconsole.log(\"Resultados de la elecci\u00f3n:\", resultadosFinales);\n</code></pre> <p>Esta segunda soluci\u00f3n es m\u00e1s concisa y aprovecha mejor las funciones avanzadas de los arrays.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/","title":"Unidad 2: Arrays, Objetos y Clases","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_22/#22-objetos-y-su-uso","title":"2.2 Objetos y su uso","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_22/#introduccion-a-los-objetos-en-javascript","title":"Introducci\u00f3n a los Objetos en JavaScript","text":"<p>Los objetos en JavaScript son estructuras de datos que permiten agrupar informaci\u00f3n en un mismo lugar. Son clave en el desarrollo de aplicaciones ya que representan entidades del mundo real, como por ejemplo: usuarios, productos o empleados. </p> <p>A diferencia de los arrays, que almacenan valores en una lista indexada, los objetos almacenan datos en pares clave-valor, lo que permite un acceso m\u00e1s intuitivo a la informaci\u00f3n.</p> <p>Algunas de las ventajas de los objetos son:</p> <ul> <li>Permiten organizar datos de forma estructurada.</li> <li>Facilitan la manipulaci\u00f3n y consulta de informaci\u00f3n.</li> <li>Son fundamentales para la programaci\u00f3n orientada a objetos en JavaScript.</li> <li>Se utilizan en APIs, almacenamiento en JSON y modelado de datos, etc.</li> </ul> <p>En esta secci\u00f3n, trabajaremos con un objeto <code>empleado</code>, al que iremos a\u00f1adiendo nuevas caracter\u00edsticas en cada secci\u00f3n para entender mejor su utilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#declarando-objetos","title":"Declarando Objetos","text":"<p>Existen varias maneras de declarar un objeto en JavaScript:</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#1-declaracion-con-llaves-objeto-literal","title":"1\ufe0f Declaraci\u00f3n con llaves <code>{}</code> (Objeto Literal)","text":"<p>La manera m\u00e1s intuitiva de declarar un objeto es mediante la notaci\u00f3n de llaves <code>{}</code>. Es la primera opci\u00f3n a considerar para crear objetos simples.</p> <p>Ejemplo de Objeto Literal</p> Declaraci\u00f3n de un objeto<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#2-creacion-con-new-object","title":"2\ufe0f Creaci\u00f3n con <code>new Object()</code>","text":"<p>la palabra clave <code>new</code> se utiliza para crear un nuevo objeto. Se pueden crear tantos objetos como se necesiten.</p> <p>Ejemplo con <code>new Object()</code></p> Declaraci\u00f3n con new Object()<pre><code>let empleado = new Object();\nempleado.nombre = \"Carlos P\u00e9rez\";\nempleado.edad = 35;\nempleado.puesto = \"Desarrollador Web\";\n</code></pre> <p>Accediendo a Propiedades</p> <p>Podemos acceder a las propiedades de un objeto mediante la notaci\u00f3n de punto <code>.</code> o corchetes <code>[]</code>.</p> <p>Acceso a propiedades</p> Acceso a propiedades<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\nconsole.log(empleado.nombre); // Carlos P\u00e9rez\nconsole.log(empleado[\"edad\"]); // 35\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#3-agregar-propiedades-en-tiempo-de-ejecucion","title":"3\ufe0f Agregar Propiedades en Tiempo de Ejecuci\u00f3n","text":"<p>Podemos agregar propiedades despu\u00e9s de haber creado el objeto. Para ello bastar\u00e1 con asignar un nuevo valor a una propiedad que no exista.</p> <p>Agregar propiedades din\u00e1micamente</p> Agregar nuevas propiedades<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\"\n};\nempleado.salario = 3000;\nconsole.log(empleado.salario); // 3000\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#metodos-en-objetos","title":"M\u00e9todos en Objetos","text":"<p>Los m\u00e9todos son funciones dentro de un objeto que permiten realizar acciones sobre \u00e9l.</p> <p>Declaraci\u00f3n y uso de m\u00e9todos</p> M\u00e9todo en un objeto<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\",\n    saludar: function() {\n        console.log(\"Hola, mi nombre es \" + this.nombre);\n    }\n};\n\nempleado.saludar(); // Hola, mi nombre es Carlos P\u00e9rez\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#la-palabra-clave-this","title":"La Palabra Clave <code>this</code>","text":"<p>El uso de <code>this</code> en JavaScript hace referencia al objeto actual, lo que nos permite acceder a sus propiedades dentro de un m\u00e9todo.</p> <p>Uso de <code>this</code> en m\u00e9todos</p> Ejemplo de this en objetos<pre><code>let empleado = {\n    nombre: \"Carlos P\u00e9rez\",\n    edad: 35,\n    puesto: \"Desarrollador Web\",\n    mostrarInfo: function() {\n        console.log(`${this.nombre}, ${this.puesto}, ${this.edad} a\u00f1os`);\n    }\n};\n\nempleado.mostrarInfo(); // Carlos P\u00e9rez, Desarrollador Web, 35 a\u00f1os\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#constructores-de-objetos","title":"Constructores de Objetos","text":"<p>Los constructores permiten crear m\u00faltiples objetos con la misma estructura de forma eficiente. De esta manera los objetos comparten la misma estructura y m\u00e9todos. Ahorrando tiempo y c\u00f3digo. </p> <p>Primero veamos un ejemplo con un constructor sin par\u00e1metros.</p> <p>Declaraci\u00f3n de un objeto con constructor sin inicialzaci\u00f3n de propiedades</p> Uso de constructores<pre><code>function Empleado() {\n    this.nombre = \"Carlos P\u00e9rez\";\n    this.edad = 35;\n    this.puesto = \"Desarrollador\";\n}\n\nlet emp1 = new Empleado();\nlet emp2 = new Empleado();\n\nconsole.log(emp1.nombre); // Carlos P\u00e9rez\nconsole.log(emp2.nombre); // Carlos P\u00e9rez\n</code></pre> <p>Este m\u00e9todo es \u00fatil para crear objetos con la misma estructura, pero si queremos personalizar los valores de las propiedades, podemos pasar par\u00e1metros al constructor.</p> <p>Declaraci\u00f3n de un constructor</p> Uso de constructores<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n    this.mostrarNombre = function() {\n        console.log(`Mi nombre es ${this.nombre}`);\n    }\n}\n// Otra manera de declarar el objeto\nfunction Articulo(nombre, precio) {\n    let obj = {\n        nombre: nombre,\n        precio: precio\n        mostrarPrecio: function() {\n            console.log(`El precio de ${this.nombre} es ${this.precio}`);\n        }\n    }\n    return obj;\n}\n\nlet emp1 = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nlet emp2 = new Empleado(\"Laura G\u00f3mez\", 29, \"Dise\u00f1adora\");\nlet art1 = new Articulo(\"Camisa\", 20);\n\nconsole.log(emp1.nombre); // Carlos P\u00e9rez\nconsole.log(emp2.nombre); // Laura G\u00f3mez\nconsole.log(art1.nombre); // Camisa\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#el-operador-new","title":"El Operador <code>new</code>","text":"<p>El operador <code>new</code> se usa para crear instancias de un constructor. La diferencia con el objeto literal es que permite generar m\u00faltiples objetos con la misma estructura sin repetir c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#herencia-y-prototipos","title":"Herencia y Prototipos","text":"<p>En JS, cuando creamos m\u00faltimples objetos estos no comparten la misma estructura, por lo que si creamos centenares o miles de objetos estamos usando una cantidad de memoria innecesaria. Para solucionar esto, podemos usar prototipos. En los prototipos, los objetos comparten la misma estructura y m\u00e9todos, lo que ahorra memoria.</p> <p>En JavaScript, los objetos pueden heredar propiedades y m\u00e9todos de otros objetos usando prototipos.</p> <p>Ejemplo de herencia con prototipos</p> Herencia con prototipos<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n}\n\nEmpleado.prototype.saludar = function() {\n    console.log(\"Hola, soy \" + this.nombre);\n};\n\nlet emp1 = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nlet emp2 = new Empleado(\"Laura G\u00f3mez\", 29, \"Dise\u00f1adora\");\nLet emp3 = new Empleado(\"Juan P\u00e9rez\", 45, \"Gerente\");\nemp1.saludar(); // Hola, soy Carlos P\u00e9rez\n</code></pre> <p>En el ejemplo anterior los 3 objetos comparten la misma estructura y el m\u00e9todo <code>saludar</code>. Lo que ahorra memoria y c\u00f3digo.</p> <p>Ahora si tenemos 2 objetos que heredan de empleado como pueden ser director y gerente, podemos hacer lo siguiente:</p> <p>Ejemplo de herencia con prototipos</p> Herencia con prototipos<pre><code>function Empleado(nombre, edad, puesto) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.puesto = puesto;\n}\n\nEmpleado.prototype.saludar = function() {\n    console.log(\"Hola, soy \" + this.nombre);\n};\n\nfunction Director(nombre, edad, puesto, departamento) {\n    Empleado.call(this, nombre, edad, puesto);\n    this.departamento = departamento;\n}\n\nDirector.prototype = Object.create(Empleado.prototype);\nDirector.prototype.constructor = Director;\n\nlet dir1 = new Director(\"Ana L\u00f3pez\", 50, \"Directora\", \"Marketing\");\ndir1.saludar(); // Hola, soy Ana L\u00f3pez\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#ejercicios-sobre-objetos-en-javascript","title":"Ejercicios sobre Objetos en JavaScript","text":"<p>A continuaci\u00f3n, se presentan una serie de ejercicios que ponen en pr\u00e1ctica los conceptos aprendidos en este tema, sin utilizar <code>class</code>, solo con funciones constructoras y prototipos.</p> <p>Ejercicio 1: Crear un objeto <code>c\u00edrculo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>c\u00edrculo</code> con la propiedad <code>radio</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto C\u00edrculo<pre><code>function Circulo(radio) {\n    this.radio = radio;\n}\n\nCirculo.prototype.area = function() {\n    return Math.PI * this.radio ** 2;\n};\n\nCirculo.prototype.perimetro = function() {\n    return 2 * Math.PI * this.radio;\n};\n\nlet c = new Circulo(5);\nconsole.log(\"\u00c1rea:\", c.area());\nconsole.log(\"Per\u00edmetro:\", c.perimetro());\n</code></pre> <p>Ejercicio 2: Crear un objeto <code>rect\u00e1ngulo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>rect\u00e1ngulo</code> con propiedades <code>base</code> y <code>altura</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Rect\u00e1ngulo<pre><code>function Rectangulo(base, altura) {\n    this.base = base;\n    this.altura = altura;\n}\n\nRectangulo.prototype.area = function() {\n    return this.base * this.altura;\n};\n\nRectangulo.prototype.perimetro = function() {\n    return 2 * (this.base + this.altura);\n};\n\nlet r = new Rectangulo(10, 5);\nconsole.log(\"\u00c1rea:\", r.area());\nconsole.log(\"Per\u00edmetro:\", r.perimetro());\n</code></pre> <p>Ejercicio 3: Crear un objeto <code>tri\u00e1ngulo</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>tri\u00e1ngulo</code> con propiedades <code>base</code>, <code>altura</code> y <code>lados</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Tri\u00e1ngulo<pre><code>function Triangulo(base, altura, lado1, lado2, lado3) {\n    this.base = base;\n    this.altura = altura;\n    this.lados = [lado1, lado2, lado3];\n}\n\nTriangulo.prototype.area = function() {\n    return (this.base * this.altura) / 2;\n};\n\nTriangulo.prototype.perimetro = function() {\n    return this.lados.reduce((a, b) =&gt; a + b, 0);\n};\n\nlet t = new Triangulo(6, 4, 3, 4, 5);\nconsole.log(\"\u00c1rea:\", t.area());\nconsole.log(\"Per\u00edmetro:\", t.perimetro());\n</code></pre> <p>Ejercicio 4: Crear un objeto <code>cuadrado</code> con m\u00e9todos para calcular su \u00e1rea y per\u00edmetro</p> <ul> <li>Crea un objeto <code>cuadrado</code> con la propiedad <code>lado</code>.</li> <li>Agrega m\u00e9todos para calcular el \u00e1rea y el per\u00edmetro.</li> </ul> Soluci\u00f3n Objeto Cuadrado<pre><code>function Cuadrado(lado) {\n    this.lado = lado;\n}\n\nCuadrado.prototype.area = function() {\n    return this.lado ** 2;\n};\n\nCuadrado.prototype.perimetro = function() {\n    return 4 * this.lado;\n};\n\nlet q = new Cuadrado(4);\nconsole.log(\"\u00c1rea:\", q.area());\nconsole.log(\"Per\u00edmetro:\", q.perimetro());\n</code></pre> <p>Ejercicio 5: Crear una superclase <code>Figura</code> y herencia para las dem\u00e1s figuras</p> <ul> <li>Crea una superclase <code>Figura</code> que tenga los m\u00e9todos <code>calcularArea()</code> y <code>calcularPerimetro()</code>.</li> <li>Haz que <code>C\u00edrculo</code>, <code>Rect\u00e1ngulo</code>, <code>Tri\u00e1ngulo</code> y <code>Cuadrado</code> hereden de <code>Figura</code>.</li> </ul> Soluci\u00f3n Herencia con Prototipos<pre><code>function Figura() {}\n\nFigura.prototype.calcularArea = function() {\n    throw \"Este m\u00e9todo debe ser implementado en la subclase\";\n};\n\nFigura.prototype.calcularPerimetro = function() {\n    throw \"Este m\u00e9todo debe ser implementado en la subclase\";\n};\n\nfunction Circulo(radio) {\n    this.radio = radio;\n}\nCirculo.prototype = Object.create(Figura.prototype);\nCirculo.prototype.calcularArea = function() {\n    return Math.PI * this.radio ** 2;\n};\nCirculo.prototype.calcularPerimetro = function() {\n    return 2 * Math.PI * this.radio;\n};\n\nlet c = new Circulo(5);\nconsole.log(\"\u00c1rea:\", c.calcularArea());\nconsole.log(\"Per\u00edmetro:\", c.calcularPerimetro());\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#clases-en-javascript","title":"Clases en JavaScript","text":"<p>Desde ES6, JavaScript permite definir objetos mediante <code>class</code>. Las clases proporcionan una sintaxis m\u00e1s clara y sencilla para crear objetos y manejar herencia.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#sintaxis-de-una-clase","title":"Sintaxis de una Clase","text":"<p>Una clase en JavaScript se declara utilizando la palabra clave <code>class</code>.</p> <p>Sintaxis b\u00e1sica de una clase</p> Sintaxis de class<pre><code>class Empleado {\n    let nombre = \"Carlos P\u00e9rez\";\n    let edad = 35;\n    let puesto = \"Desarrollador\";\n}\n</code></pre> <ul> <li><code>class</code>: Define una nueva clase.</li> </ul> <p>Ahora para utilizar esta clase, podemos crear un empleado y mostrar o modificar su edad:</p> <p>Creaci\u00f3n de una instancia de una clase</p> Uso de una clase<pre><code>let emp = new Empleado();\nconsole.log(emp.nombre); // Carlos P\u00e9rez\nemp.edad = 36;\nconsole.log(emp.edad); // 36\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#el-constructor","title":"El Constructor","text":"<p>El constructor es un m\u00e9todo que se ejecuta cuando se crea una nueva instancia de la clase. Todas las clases tiene un constructor por defecto, pero podemos definir uno personalizado. La ventaja es que nos permite inicializar las propiedades de un objeto.</p> <p>Uso del constructor</p> Constructor en clase<pre><code>class Empleado {\n    constructor(nombre, edad, puesto) {\n        this.nombre = nombre;\n        this.edad = edad;\n        this.puesto = puesto;\n    }\n}\nlet emp = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\n</code></pre> <ul> <li><code>constructor</code>: M\u00e9todo especial para inicializar las propiedades de un objeto.</li> </ul> <p>El uso de la clase ser\u00eda el mismo pero podemos inicializar las propiedades:</p> <p>Creaci\u00f3n de una instancia de una clase</p> Uso de una clase<pre><code>let emp = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nconsole.log(emp.nombre); // Carlos P\u00e9rez\nemp.edad = 36;\nconsole.log(emp.edad); // 36\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#propiedades-y-metodos","title":"Propiedades y M\u00e9todos","text":"<p>Podemos a\u00f1adir propiedades y m\u00e9todos a una clase.</p> <p>Propiedades y m\u00e9todos</p> Propiedades y m\u00e9todos en clase<pre><code>class Empleado {\n    constructor(nombre, edad, puesto) {\n        this.nombre = nombre;\n        this.edad = edad;\n        this.puesto = puesto;\n    }\n    saludar() {\n        console.log(`Hola, soy ${this.nombre}`);\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#getters-y-setters","title":"Getters y Setters","text":"<p>Los <code>getters</code> y <code>setters</code> permiten acceder y modificar propiedades de forma controlada. la diferencia entre una propiedad _nombre (con guion bajo, usada como convenci\u00f3n para propiedades internas o privadas) y una propiedad nombre (p\u00fablica). Aunque JavaScript no tiene propiedades privadas reales, esta convenci\u00f3n ayuda a indicar que la propiedad no deber\u00eda ser modificada directamente. </p> <p>Uso de getters y setters</p> Getters y Setters<pre><code>class Empleado {\n    constructor(nombre, edad, puesto) {\n        this._nombre = nombre;\n        this.edad = edad;\n        this.puesto = puesto;\n    }\n    get nombre() {\n        return this._nombre;\n    }\n    set nombre(nuevoNombre) {\n        this._nombre = nuevoNombre;\n    }\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#herencia-con-extends-y-super","title":"Herencia con <code>extends</code> y <code>super</code>","text":"<p>Podemos crear clases que hereden propiedades y m\u00e9todos de otras clases usando <code>extends</code>. De esta manera, una clase hija puede reutilizar la estructura de una clase padre, no teniendo que redefinir todos los m\u00e9todos y propiedades. Esto nos permite en programaci\u00f3n crear lo que conocemos como una <code>jeraqu\u00eda de clases</code>. Esto nos permite racionalizar el c\u00f3digo y hacerlo m\u00e1s mantenible.</p> <p>Ejemplo de herencia</p> Herencia con extends y super<pre><code>class Empleado {\n    constructor(nombre, edad, puesto) {\n        this.nombre = nombre;\n        this.edad = edad;\n        this.puesto = puesto;\n    }\n}\nclass Director extends Empleado {\n    constructor(nombre, edad, puesto, departamento) {\n        super(nombre, edad, puesto);\n        this.departamento = departamento;\n    }\n}\n</code></pre> <p>Una de las ventajas de la herencia es que los objetos creados con la clase hija <code>Director</code> pueden acceder a los m\u00e9todos y propiedades de la clase padre <code>Empleado</code>, y podemos tratar una objeto <code>Director</code>  como un objeto <code>Empleado</code>.</p> <p>Uso de la herencia</p> Uso de la herencia<pre><code>function tratarEmpleado(emp) {\n    console.log(emp.nombre);\n    console.log(emp.edad);\n    console.log(emp.puesto);\n}\nlet dir = new Director(\"Ana L\u00f3pez\", 50, \"Directora\", \"Marketing\");\nlet emp = new Empleado(\"Carlos P\u00e9rez\", 35, \"Desarrollador\");\nconsole.log(dir.nombre); // Ana L\u00f3pez\nconsole.log(dir.puesto); // Directora\ntratarEmpleado(emp); // Carlos P\u00e9rez, 35, Desarrollador\ntraerEmpleado(dir); // Ana L\u00f3pez, 50, Directora\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#ejemplo-completo-figura-rectangulo-y-circulo","title":"Ejemplo Completo: Figura, Rect\u00e1ngulo y C\u00edrculo","text":"Ejemplo completo de clases<pre><code>class Figura {\n    constructor(nombre) {\n        this._nombre = nombre;\n    }\n    get nombre() {\n        return this._nombre;\n    }\n    area() { throw \"M\u00e9todo no implementado\"; }\n    perimetro() { throw \"M\u00e9todo no implementado\"; }\n}\nclass Rectangulo extends Figura {\n    constructor(nombre, ancho, alto) {\n        super(nombre);\n        this.ancho = ancho;\n        this.alto = alto;\n    }\n    area() { return this.ancho * this.alto; }\n    perimetro() { return 2 * (this.ancho + this.alto); }\n}\nclass Circulo extends Figura {\n    constructor(nombre, radio) {\n        super(nombre);\n        this.radio = radio;\n    }\n    area() { return Math.PI * this.radio ** 2; }\n    perimetro() { return 2 * Math.PI * this.radio; }\n}\n</code></pre> <p>Ahora podemos ver un ejemplo de uso de la jeraqu\u00eda de clases: Uso de la jeraqu\u00eda de clases<pre><code>let r = new Rectangulo('Rectangulo', 10, 5);\nlet c = new Circulo('C\u00edrculo', 5);\nconsole.log(\"\u00c1rea del rect\u00e1ngulo:\", r.nombre, r.area());\nconsole.log(\"Per\u00edmetro del rect\u00e1ngulo:\", r.nombre, r.perimetro());\nconsole.log(\"\u00c1rea del c\u00edrculo:\", c.nombre, c.area());\nconsole.log(\"Per\u00edmetro del c\u00edrculo:\", c.nombre, c.perimetro());\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#cuando-usar-class-o-prototipos","title":"\u00bfCu\u00e1ndo Usar <code>class</code> o Prototipos?","text":"<ul> <li><code>class</code> es m\u00e1s intuitivo y f\u00e1cil de leer.</li> <li>Los prototipos permiten m\u00e1s flexibilidad en algunos casos avanzados.</li> </ul> <p>En general, <code>class</code> es recomendado para la mayor\u00eda de proyectos modernos, ya que es m\u00e1s claro y se asemeja a la sintaxis de otros lenguajes orientados a objetos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_22/#ejercicios-sobre-clases-y-herencia","title":"Ejercicios sobre Clases y Herencia","text":"<p>Ejercicio 1: Crear una jerarqu\u00eda de Veh\u00edculos</p> <ul> <li>Crea una clase <code>Vehiculo</code> con propiedades <code>marca</code>, <code>modelo</code>, <code>velocidad</code> y un m\u00e9todo <code>arrancar()</code>.</li> <li>Crea dos clases que hereden de <code>Vehiculo</code>: <code>Coche</code> (con propiedad <code>puertas</code>) y <code>Moto</code> (con propiedad <code>cilindrada</code>).</li> <li>Implementa los m\u00e9todos necesarios para cada subclase.</li> </ul> <p>Ejercicio 2: Crear una jerarqu\u00eda de Animales</p> <ul> <li>Crea una clase <code>Animal</code> con propiedades <code>nombre</code> y <code>edad</code>.</li> <li>Crea dos subclases: <code>Perro</code> (con m\u00e9todo <code>ladrar()</code>) y <code>Gato</code> (con m\u00e9todo <code>maullar()</code>).</li> <li>Implementa un m\u00e9todo <code>presentarse()</code> en la superclase y \u00fasalo en las subclases.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/","title":"Unidad 2: Arrays, Objetos y Clases","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_23/#23-persistencia-en-javascript-con-json","title":"2.3 Persistencia en JavaScript con JSON","text":""},{"location":"content/MF_0966_3/UF2215/unidad02_23/#introduccion","title":"Introducci\u00f3n","text":"<p>En JavaScript, la persistencia de datos es fundamental cuando queremos almacenar informaci\u00f3n de manera duradera. Para ello, uno de los formatos m\u00e1s utilizados es JSON (JavaScript Object Notation), que permite representar estructuras de datos de manera clara, sencilla y compatible con distintos sistemas.</p> <p>Este formato es ampliamente usado en el intercambio de datos entre aplicaciones web, APIs y almacenamiento en archivos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#que-es-json","title":"\u00bfQu\u00e9 es JSON?","text":"<p>JSON (JavaScript Object Notation) es un formato de texto para el intercambio de datos, basado en la sintaxis de objetos de JavaScript. Es independiente del lenguaje y f\u00e1cil de leer tanto por humanos como por m\u00e1quinas.</p> <ul> <li>Se estructura en pares clave-valor.</li> <li>Permite almacenar datos en forma de objetos y arrays.</li> <li>Es compatible con m\u00faltiples lenguajes de programaci\u00f3n.</li> </ul> <p>Ejemplo de un objeto en JSON:</p> Ejemplo de JSON<pre><code>{\n  \"nombre\": \"Carlos P\u00e9rez\",\n  \"edad\": 35,\n  \"puesto\": \"Desarrollador\",\n  \"habilidades\": [\"JavaScript\", \"HTML\", \"CSS\"]\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#como-utilizar-json-en-javascript","title":"\u00bfC\u00f3mo utilizar JSON en JavaScript?","text":"<p>JavaScript proporciona dos m\u00e9todos fundamentales para trabajar con JSON:</p> <ul> <li><code>JSON.stringify()</code> \u2192 Convierte un objeto JavaScript a una cadena JSON.</li> <li><code>JSON.parse()</code> \u2192 Convierte una cadena JSON a un objeto JavaScript.</li> </ul> <p>Ejemplo de uso de <code>JSON.stringify()</code> y <code>JSON.parse()</code></p> Trabajando con JSON<pre><code>let empleado = {\n    nombre: \"Ana L\u00f3pez\",\n    edad: 28,\n    puesto: \"Analista\"\n};\n\n// Convertimos el objeto a JSON\nlet jsonString = JSON.stringify(empleado);\nconsole.log(jsonString);\n\n// Convertimos el JSON de nuevo a un objeto\nlet objetoRecuperado = JSON.parse(jsonString);\nconsole.log(objetoRecuperado);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#leyendo-un-json-externo","title":"Leyendo un JSON externo","text":"<p>Podemos leer archivos JSON externos utilizando <code>fetch()</code> en JavaScript. Este JSON lo utilizaremos estos datos de ejemplo, que lo puedes encontrar en este enlace.</p> <pre><code>{\n  \"squadName\": \"Super hero squad\",\n  \"homeTown\": \"Metro City\",\n  \"formed\": 2016,\n  \"secretBase\": \"Super tower\",\n  \"active\": true,\n  \"members\": [\n    {\n      \"name\": \"Molecule Man\",\n      \"age\": 29,\n      \"secretIdentity\": \"Dan Jukes\",\n      \"powers\": [\n        \"Radiation resistance\",\n        \"Turning tiny\",\n        \"Radiation blast\"\n      ]\n    },\n    {\n      \"name\": \"Madame Uppercut\",\n      \"age\": 39,\n      \"secretIdentity\": \"Jane Wilson\",\n      \"powers\": [\n        \"Million tonne punch\",\n        \"Damage resistance\",\n        \"Superhuman reflexes\"\n      ]\n    },\n    {\n      \"name\": \"Eternal Flame\",\n      \"age\": 1000000,\n      \"secretIdentity\": \"Unknown\",\n      \"powers\": [\n        \"Immortality\",\n        \"Heat Immunity\",\n        \"Inferno\",\n        \"Teleportation\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>Lectura de un JSON externo</p> Leyendo JSON externo<pre><code>fetch('https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json')\n    .then(response =&gt; {\n        if (!response.ok) {\n            throw new Error('Error al cargar el JSON');\n        }\n        return response.json();\n    })\n    .then(data =&gt; {\n        console.log(`Equipo: ${data.squadName}`);\n        console.log(`Ciudad: ${data.homeTown}`);\n        console.log(`Formado en: ${data.formed}`);\n        console.log('Miembros del equipo:');\n        data.members.forEach(member =&gt; {\n            console.log(`- Nombre: ${member.name}`);\n            console.log(`  Edad: ${member.age}`);\n            console.log(`  Identidad secreta: ${member.secretIdentity}`);\n            console.log('  Poderes:');\n            member.powers.forEach(power =&gt; console.log(`    * ${power}`));\n        });\n    })\n    .catch(error =&gt; console.error('Error al cargar el JSON:', error));\n</code></pre> <p>Este ejemplo muestra la informaci\u00f3n b\u00e1sica del equipo de superh\u00e9roes, as\u00ed como los detalles de cada miembro, incluyendo su edad, identidad secreta y lista de poderes.\"</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#ejemplo-completo-aplicacion-interactiva-con-json","title":"Ejemplo Completo: Aplicaci\u00f3n Interactiva con JSON","text":"<p>Vamos a desarrollar una aplicaci\u00f3n que cargue la informaci\u00f3n del JSON de superh\u00e9roes en un array, notifique al usuario y permita ver los detalles de cada superh\u00e9roe mediante un men\u00fa interactivo.</p> Aplicaci\u00f3n interactiva con JSON Aplicaci\u00f3n JSON Interactiva<pre><code>async function cargarSuperheroes() {\n    try {\n        const response = await fetch('https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json');\n        if (!response.ok) {\n            throw new Error('Error al cargar el JSON');\n        }\n        const data = await response.json();\n\n        // Cargar datos en un array\n        const superheroes = data.members;\n\n        // Informar al usuario\n        console.log(`\u00a1Datos cargados correctamente!`);\n        console.log(`Equipo: ${data.squadName}`);\n        console.log(`Ciudad: ${data.homeTown}`);\n        console.log(`Formado en: ${data.formed}`);\n        console.log(`N\u00famero de miembros: ${superheroes.length}`);\n\n        // Men\u00fa interactivo\n        let indice;\n        do {\n            indice = parseInt(prompt(`Introduce un \u00edndice entre 0 y ${superheroes.length - 1} para ver un superh\u00e9roe (introduce otro n\u00famero para salir):`));\n\n            if (indice &gt;= 0 &amp;&amp; indice &lt; superheroes.length) {\n                const hero = superheroes[indice];\n                console.log(`\\nInformaci\u00f3n del superh\u00e9roe:`);\n                console.log(`Nombre: ${hero.name}`);\n                console.log(`Edad: ${hero.age}`);\n                console.log(`Identidad secreta: ${hero.secretIdentity}`);\n                console.log(`Poderes:`);\n                hero.powers.forEach(power =&gt; console.log(`- ${power}`));\n            } else {\n                console.log(\"Saliendo de la aplicaci\u00f3n...\");\n            }\n\n        } while (indice &gt;= 0 &amp;&amp; indice &lt; superheroes.length);\n\n    } catch (error) {\n        console.error('Error al cargar o procesar el JSON:', error);\n    }\n}\n\ncargarSuperheroes();\n</code></pre> <p>\u00bfQu\u00e9 hace esta aplicaci\u00f3n?</p> <ol> <li>Carga el archivo JSON externo con <code>fetch</code>.</li> <li>Informa al usuario sobre el contenido del archivo.</li> <li>Muestra un men\u00fa que permite introducir un \u00edndice para ver informaci\u00f3n detallada de un superh\u00e9roe.</li> <li>Finaliza cuando el usuario introduce un \u00edndice no v\u00e1lido.</li> </ol> <p>Este ejemplo muestra c\u00f3mo cargar datos JSON, almacenarlos en un array, recorrerlos y mostrarlos de forma interactiva mediante un men\u00fa simple.\"</p>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#almacenar-un-objeto-json-en-un-fichero-local","title":"Almacenar un objeto JSON en un fichero local","text":"<p>Para almacenar datos en un archivo local usando Node.js, podemos usar el m\u00f3dulo <code>fs</code>.</p> <p>Almacenando JSON en un archivo</p> Guardar JSON en archivo<pre><code>const fs = require('fs');\n\nlet empleados = [\n    { \"codigo\": 101, \"nombre\": \"Carlos P\u00e9rez\", \"edad\": 35, \"sueldo\": 2500 },\n    { \"codigo\": 102, \"nombre\": \"Ana L\u00f3pez\", \"edad\": 28, \"sueldo\": 2200 }\n];\n\nlet jsonData = JSON.stringify(empleados, null, 2);\n\nfs.writeFileSync('empleados.json', jsonData, 'utf-8');\nconsole.log('Archivo JSON guardado exitosamente.');\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#leer-un-json-desde-un-fichero-local","title":"Leer un JSON desde un fichero local","text":"<p>Podemos leer un archivo JSON localmente usando Node.js.</p> <p>Leyendo un archivo JSON local</p> Leer JSON desde archivo<pre><code>const fs = require('fs');\n\nlet datos = fs.readFileSync('empleados.json', 'utf-8');\nlet empleados = JSON.parse(datos);\n\nconsole.log(empleados);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad02_23/#ejercicio-propuesto","title":"Ejercicio Propuesto","text":"<p>Se proporciona el siguiente archivo JSON con informaci\u00f3n de empleados:</p> <p><code>empleados.json</code> <pre><code>[\n    { \"codigo\": 101, \"nombre\": \"Carlos P\u00e9rez\", \"edad\": 35, \"sueldo\": 2500 },\n    { \"codigo\": 102, \"nombre\": \"Ana L\u00f3pez\", \"edad\": 28, \"sueldo\": 2200 },\n    { \"codigo\": 103, \"nombre\": \"Luis Garc\u00eda\", \"edad\": 40, \"sueldo\": 3000 }\n]\n</code></pre></p> <p>Requisitos del ejercicio:</p> <ol> <li>Leer el archivo JSON y convertirlo a un array de objetos.</li> <li>Solicitar al usuario un c\u00f3digo de empleado.</li> <li>Mostrar la informaci\u00f3n del empleado correspondiente.</li> <li>Permitir al usuario modificar la edad o el sueldo.</li> <li>Guardar de nuevo el array modificado en el archivo JSON.</li> </ol> Posible soluci\u00f3n Soluci\u00f3n del ejercicio<pre><code>const fs = require('fs');\nconst prompt = require('prompt-sync')();\n\n// Leer el archivo JSON\nlet datos = fs.readFileSync('empleados.json', 'utf-8');\nlet empleados = JSON.parse(datos);\n\n// Pedir c\u00f3digo de empleado\nlet codigo = parseInt(prompt('Introduce el c\u00f3digo del empleado: '));\nlet empleado = empleados.find(emp =&gt; emp.codigo === codigo);\n\nif (empleado) {\n    console.log(`Empleado encontrado: ${empleado.nombre}, Edad: ${empleado.edad}, Sueldo: ${empleado.sueldo}`);\n\n    // Permitir modificar edad o sueldo\n    let opcion = prompt('\u00bfQuieres modificar la edad (e) o el sueldo (s)?: ').toLowerCase();\n    if (opcion === 'e') {\n        let nuevaEdad = parseInt(prompt('Introduce la nueva edad: '));\n        empleado.edad = nuevaEdad;\n    } else if (opcion === 's') {\n        let nuevoSueldo = parseFloat(prompt('Introduce el nuevo sueldo: '));\n        empleado.sueldo = nuevoSueldo;\n    }\n\n    // Guardar los cambios en el archivo JSON\n    fs.writeFileSync('empleados.json', JSON.stringify(empleados, null, 2), 'utf-8');\n    console.log('Datos actualizados correctamente.');\n} else {\n    console.log('Empleado no encontrado.');\n}\n</code></pre> <p>Este ejercicio permite comprender c\u00f3mo leer, modificar y guardar datos en formato JSON utilizando JavaScript y Node.js.\"</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/","title":"Unidad 3: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_31/#31-funciones-en-javascript","title":"3.1 Funciones en JavaScript","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables que permiten organizar y estructurar mejor nuestros programas. Nos ayudan a reducir la repetici\u00f3n de c\u00f3digo y mejorar la legibilidad.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#como-se-ejecutan-las-funciones-en-un-programa","title":"\u00bfC\u00f3mo se ejecutan las funciones en un programa?","text":"<p>Cuando declaramos una funci\u00f3n en JavaScript, esta no se ejecuta inmediatamente, sino que se almacena en memoria y solo se ejecuta cuando es llamada en el c\u00f3digo. Esto nos permite definir funciones al inicio de un programa y utilizarlas en cualquier momento posterior.</p> Ejemplo de declaraci\u00f3n y llamada de funci\u00f3n Ejemplo b\u00e1sico de funci\u00f3n<pre><code>function mensaje() {\n    console.log(\"Este mensaje se muestra solo cuando se llama a la funci\u00f3n.\");\n}\n\n// Llamamos a la funci\u00f3n\nmensaje();\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#311-declaracion-y-uso-de-funciones","title":"3.1.1 Declaraci\u00f3n y Uso de Funciones","text":"<p>Las funciones en JavaScript se pueden declarar utilizando la palabra clave <code>function</code>. Estas permiten organizar el c\u00f3digo en bloques reutilizables.</p> <p>Ejemplo de funci\u00f3n simple</p> Funci\u00f3n que muestra un mensaje<pre><code>function saludar() {\n    console.log(\"Hola, bienvenido a JavaScript!\");\n}\n\nsaludar(); // Llamada a la funci\u00f3n\n</code></pre> <p>Las funciones pueden aceptar par\u00e1metros para hacerlas m\u00e1s din\u00e1micas:</p> <p>Ejemplo con par\u00e1metros</p> Funci\u00f3n con par\u00e1metros<pre><code>function saludar(nombre) {\n    console.log(\"Hola, \" + nombre + \"!\");\n}\n\nsaludar(\"Carlos\"); // Salida: Hola, Carlos!\nsaludar(\"Mar\u00eda\"); // Salida: Hola, Mar\u00eda!\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#312-parametros-y-valores-de-retorno","title":"3.1.2 Par\u00e1metros y Valores de Retorno","text":"<p>Las funciones pueden devolver valores utilizando la palabra clave <code>return</code>. Esto permite que el resultado de una funci\u00f3n pueda ser utilizado posteriormente en el programa.</p> <p>Ejemplo con valor de retorno</p> Funci\u00f3n que retorna un valor<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\nlet resultado = sumar(5, 3);\nconsole.log(\"La suma es:\", resultado);\n</code></pre> <p>Si una funci\u00f3n no tiene <code>return</code>, devuelve <code>undefined</code> de forma impl\u00edcita.</p> <p>Ejemplo de funci\u00f3n sin retorno</p> Funci\u00f3n sin return<pre><code>function mostrarMensaje() {\n    console.log(\"Este es un mensaje de prueba\");\n}\n\nlet mensaje = mostrarMensaje();\nconsole.log(mensaje); // undefined\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#313-funciones-anonimas","title":"3.1.3 Funciones An\u00f3nimas","text":"<p>Las funciones an\u00f3nimas son aquellas que no tienen un nombre definido. Se suelen asignar a variables:</p> <p>Ejemplo de funci\u00f3n an\u00f3nima</p> Funci\u00f3n an\u00f3nima asignada a una variable<pre><code>let multiplicar = function(a, b) {\n    return a * b;\n};\n\nconsole.log(multiplicar(4, 5)); // Salida: 20\n</code></pre> <p>Las funciones an\u00f3nimas son \u00fatiles para definir comportamientos que solo se usan en un contexto espec\u00edfico.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#314-funciones-como-expresiones","title":"3.1.4 Funciones como Expresiones","text":"<p>En JavaScript, las funciones pueden ser declaradas como expresiones y asignadas a variables.</p> <p>Ejemplo de funci\u00f3n como expresi\u00f3n</p> Funci\u00f3n como expresi\u00f3n<pre><code>let suma = function(a, b) {\n    return a + b;\n};\n\nconsole.log(suma(3, 4)); // Salida: 7\n</code></pre> <p>Las funciones expresadas se usan cuando queremos definir una funci\u00f3n y almacenarla en una variable para luego ejecutarla en un momento determinado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#315-paso-de-parametros-por-valor-y-por-referencia","title":"3.1.5 Paso de Par\u00e1metros por Valor y por Referencia","text":"<p>En JavaScript, los tipos primitivos (n\u00fameros, cadenas, booleanos) se pasan por valor, mientras que los objetos y arrays se pasan por referencia.</p> <p>Nota</p> <p>Pasar por valor significa que se crea una copia del valor original, mientras que pasar por referencia significa que se comparte la misma referencia en memoria. En los casos de los tipos primitivos, cualquier cambio dentro de la funci\u00f3n no afectar\u00e1 a la variable original. Por tanto el paso es por valor.</p> <p>Ejemplo de paso por valor</p> Paso por valor<pre><code>function cambiarValor(numero) {\n    numero = 100;\n    console.log(\"Dentro de la funci\u00f3n:\", numero);\n}\n\nlet x = 10;\ncambiarValor(x);\nconsole.log(\"Fuera de la funci\u00f3n:\", x); // x sigue siendo 10\n</code></pre> <p>Nota</p> <p>En el caso de los objetos y arrays, si modificamos el objeto dentro de la funci\u00f3n, los cambios se reflejar\u00e1n fuera de la funci\u00f3n. Por tanto en este caso se pasa siempre por referencia.</p> <p>Ejemplo de paso por referencia</p> Paso por referencia<pre><code>function modificarObjeto(objeto) {\n    objeto.nombre = \"Modificado\";\n}\n\nlet persona = { nombre: \"Original\" };\nmodificarObjeto(persona);\nconsole.log(\"Despu\u00e9s de la funci\u00f3n:\", persona.nombre); // \"Modificado\"\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#316-alcance-de-las-variables-local-y-global","title":"3.1.6 Alcance de las Variables: Local y Global","text":"<p>Las variables en JavaScript pueden tener \u00e1mbito global o \u00e1mbito local dependiendo de d\u00f3nde sean declaradas.</p> <ul> <li>Variables globales: Son accesibles desde cualquier parte del c\u00f3digo.</li> <li>Variables locales: Solo existen dentro de la funci\u00f3n donde fueron declaradas.</li> </ul> <p>Ejemplo de variables globales y locales</p> \u00c1mbito de variables<pre><code>let global = \"Soy global\";\n\nfunction mostrarAmbito() {\n    let local = \"Soy local\";\n    console.log(global); // Accede a la variable global\n    console.log(local);  // Accede a la variable local\n}\n\nmostrarAmbito();\nconsole.log(global); // Funciona\n// console.log(local); // Error: local no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#317-funciones-recursivas-introduccion","title":"3.1.7 Funciones recursivas (Introducci\u00f3n)","text":"<p>Una funci\u00f3n recursiva es aquella que se llama a s\u00ed misma dentro de su propio cuerpo. Es una t\u00e9cnica muy poderosa y \u00fatil en programaci\u00f3n, especialmente para resolver problemas que se pueden dividir en subproblemas m\u00e1s peque\u00f1os.</p> <p>Algunos ejemplos t\u00edpicos de resoluci\u00f3n de problemas mediante funciones recursivas son el c\u00e1lculo de factoriales, la serie de Fibonacci, la b\u00fasqueda de elementos en \u00e1rboles, entre otros.</p> <p>Vamos a ver como ejercicios pr\u00e1cticos algunos ejemplos de funciones recursivas.</p> <p>Ejemplo de funci\u00f3n recursiva: Factorial</p> Funci\u00f3n recursiva: Factorial<pre><code>function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconsole.log(factorial(5)); // 5! = 120\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#318-retorno-de-funciones","title":"3.1.8 Retorno de Funciones","text":"<p>Las funciones en JavaScript pueden devolver un valor mediante la palabra clave <code>return</code>. Esto permite que el resultado de una funci\u00f3n pueda ser utilizado posteriormente en el programa.</p> <p>Ejemplo de retorno en funciones</p> Uso del return en funciones<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\nlet resultado = sumar(5, 3);\nconsole.log(\"El resultado de la suma es:\", resultado);\n</code></pre> <p>Cuando una funci\u00f3n no tiene <code>return</code>, devuelve <code>undefined</code> de forma impl\u00edcita.</p> <p>Ejemplo de funci\u00f3n sin retorno</p> Funci\u00f3n sin return<pre><code>function mostrarMensaje() {\n    console.log(\"Este es un mensaje de prueba\");\n}\n\nlet mensaje = mostrarMensaje();\nconsole.log(mensaje); // undefined\n</code></pre> <p>Las funciones pueden retornar distintos tipos de valores:</p> <ol> <li> <p>Valores primitivos (n\u00fameros, cadenas, booleanos): Retorno de valores primitivos<pre><code>function obtenerNombre() {\n    return \"Carlos\";\n}\n\nconsole.log(obtenerNombre());\n</code></pre></p> </li> <li> <p>Expresiones o c\u00e1lculos: Retorno de una expresi\u00f3n<pre><code>function calcularDoble(x) {\n    return x * 2;\n}\n\nconsole.log(calcularDoble(10)); // Salida: 20\n</code></pre></p> </li> <li> <p>Objetos (tema que veremos m\u00e1s adelante): Retorno de un objeto<pre><code>function crearPersona(nombre, edad) {\n    return { nombre: nombre, edad: edad };\n}\n\nlet persona = crearPersona(\"Ana\", 30);\nconsole.log(persona.nombre, persona.edad); // Salida: Ana 30\n</code></pre></p> </li> <li> <p>Otras funciones: Retorno de una funci\u00f3n<pre><code>function crearFuncion() {\n    return function() {\n        console.log(\"Soy una funci\u00f3n retornada\");\n    };\n}\n\nlet nuevaFuncion = crearFuncion();\nnuevaFuncion();\n</code></pre></p> </li> </ol> <p>El uso adecuado de <code>return</code> permite que las funciones sean m\u00e1s reutilizables y organizadas dentro del c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#319-funciones-anonimas-autoejecutadas-iife","title":"3.1.9 Funciones An\u00f3nimas Autoejecutadas (IIFE)","text":"<p>Las funciones an\u00f3nimas autoejecutadas (IIFE, Immediately Invoked Function Expressions) son funciones que se ejecutan inmediatamente despu\u00e9s de ser definidas. Se usan para evitar contaminar el \u00e1mbito global y encapsular variables.</p> <p>Ejemplo de funci\u00f3n autoejecutada</p> IIFE b\u00e1sica<pre><code>(function() {\n    console.log(\"Esta funci\u00f3n se ejecuta inmediatamente\");\n})();\n</code></pre> <p>Tambi\u00e9n pueden recibir par\u00e1metros:</p> <p>IIFE con par\u00e1metros</p> IIFE con par\u00e1metros<pre><code>(function(nombre) {\n    console.log(\"Hola, \" + nombre);\n})(\"Carlos\");\n</code></pre> <p>En este punto podemos a\u00f1adir la <code>funci\u00f3n cierre</code> o <code>closure</code> que es una funci\u00f3n anidada dentro de otra funci\u00f3n que tiene acceso a las variables de la funci\u00f3n exterior. Veamos un ejemplo con una funci\u00f3n <code>contador</code> con un atributo <code>valor</code> y m\u00e9todos <code>getValor</code> y <code>incrementar</code> y <code>decrementar</code>:</p> <p>Ejemplo de funci\u00f3n cierre</p> Funci\u00f3n cierre<pre><code>var miContador = (function contador() {\n    let valor = 0;\n\n    return {\n        getValor: function() {\n            return valor;\n        },\n        incrementar: function() {\n            valor++;\n        },\n        decrementar: function() {\n            valor--;\n        }\n    };\n})();\n\nconsole.log(miContador.getValor()); // 0\nmiContador.incrementar();\nmiContador.incrementar();\nconsole.log(miContador.getValor()); // 2\nmiContador.decrementar();\nconsole.log(miContador.getValor()); // 1\n</code></pre> <p>Este patr\u00f3n de dise\u00f1o es muy \u00fatil para proteger variables y m\u00e9todos de ser accedidos desde fuera de la funci\u00f3n. Su principal diferencia con los objetos (clases) es que no se pueden crear instancias de la funci\u00f3n <code>contador</code> y solo se puede acceder a sus m\u00e9todos a trav\u00e9s de la funci\u00f3n <code>contador</code>.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#3110-funciones-flecha-arrow-functions","title":"3.1.10 Funciones Flecha (<code>Arrow Functions</code>)","text":"<p>Las funciones flecha (<code>=&gt;</code>) son una forma m\u00e1s concisa de escribir funciones en JavaScript. Se utilizan sobre todo en funciones cortas y expresiones de retorno r\u00e1pido.</p> <p>Sintaxis b\u00e1sica:</p> Sintaxis de una funci\u00f3n flecha<pre><code>const sumar = (a, b) =&gt; a + b;\nconsole.log(sumar(5, 3)); // Salida: 8\n</code></pre> <p>Si la funci\u00f3n tiene una sola l\u00ednea, el <code>return</code> es impl\u00edcito. Si tiene varias l\u00edneas, se necesita escribir un bloque con <code>{}</code> y <code>return</code>:</p> <p>Ejemplo con varias l\u00edneas</p> Funci\u00f3n flecha con varias l\u00edneas<pre><code>const multiplicar = (a, b) =&gt; {\n    let resultado = a * b;\n    return resultado;\n};\nconsole.log(multiplicar(4, 5)); // Salida: 20\n</code></pre> <p>Las funciones flecha no tienen su propio <code>this</code>, lo que las hace \u00fatiles en ciertos casos (aunque esto se ver\u00e1 m\u00e1s adelante).</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#ejercicios-funciones-en-javascript","title":"Ejercicios: Funciones en JavaScript","text":"<p>Ejercicio 1: Funci\u00f3n para determinar si un n\u00famero es positivo, negativo o cero</p> <ul> <li>Crea una funci\u00f3n llamada <code>determinarSigno</code> que reciba un n\u00famero como par\u00e1metro.</li> <li>La funci\u00f3n debe devolver <code>\"positivo\"</code> si el n\u00famero es mayor que cero, <code>\"negativo\"</code> si es menor que cero, y <code>\"cero\"</code> si es exactamente cero.</li> </ul> Soluci\u00f3n Funci\u00f3n para determinar signo de un n\u00famero<pre><code>function determinarSigno(numero) {\n    if (numero &gt; 0) {\n        return \"positivo\";\n    } else if (numero &lt; 0) {\n        return \"negativo\";\n    } else {\n        return \"cero\";\n    }\n}\n\nconsole.log(determinarSigno(10));  // positivo\nconsole.log(determinarSigno(-5));  // negativo\nconsole.log(determinarSigno(0));   // cero\n</code></pre> <p>Ejercicio 2: Funci\u00f3n para verificar si una palabra es un pal\u00edndromo</p> <ul> <li>Crea una funci\u00f3n <code>esPalindromo</code> que reciba una palabra y devuelva <code>true</code> si se lee igual de izquierda a derecha que de derecha a izquierda, y <code>false</code> en caso contrario.</li> </ul> Soluci\u00f3n Funci\u00f3n para verificar pal\u00edndromos usando bucles<pre><code>function esPalindromo(palabra) {\n    let longitud = palabra.length;\n    for (let i = 0; i &lt; longitud / 2; i++) {\n        if (palabra[i].toLowerCase() !== palabra[longitud - 1 - i].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(esPalindromo(\"reconocer\")); // true\nconsole.log(esPalindromo(\"javascript\")); // false\n</code></pre> <p>Ejercicio 3: Funci\u00f3n para calcular la media de tres n\u00fameros</p> <ul> <li>Crea una funci\u00f3n llamada <code>calcularMedia</code> que reciba tres n\u00fameros como par\u00e1metros y devuelva la media aritm\u00e9tica de los tres.</li> </ul> Soluci\u00f3n Funci\u00f3n para calcular la media<pre><code>function calcularMedia(a, b, c) {\n    return (a + b + c) / 3;\n}\n\nconsole.log(calcularMedia(5, 10, 15)); // 10\nconsole.log(calcularMedia(7, 14, 21)); // 14\n</code></pre> <p>Ejercicio 4: Funci\u00f3n para determinar si un n\u00famero es primo</p> <ul> <li>Crea una funci\u00f3n <code>esPrimo</code> que reciba un n\u00famero entero positivo y devuelva <code>true</code> si es primo y <code>false</code> en caso contrario.</li> </ul> Soluci\u00f3n Funci\u00f3n para verificar si un n\u00famero es primo<pre><code>function esPrimo(numero) {\n    if (numero &lt; 2) return false;\n    for (let i = 2; i &lt; numero; i++) {\n        if (numero % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(esPrimo(7)); // true\nconsole.log(esPrimo(10)); // false\n</code></pre> <p>Ejercicio 5: Funci\u00f3n que devuelve la cantidad de vocales en una palabra</p> <ul> <li>Crea una funci\u00f3n <code>contarVocales</code> que reciba una palabra y devuelva cu\u00e1ntas vocales contiene.</li> </ul> Soluci\u00f3n Funci\u00f3n para contar vocales en una palabra<pre><code>function contarVocales(palabra) {\n    let contador = 0;\n    let vocales = \"aeiouAEIOU\";\n    for (let i = 0; i &lt; palabra.length; i++) {\n        if (vocales.includes(palabra[i])) {\n            contador++;\n        }\n    }\n    return contador;\n}\n\nconsole.log(contarVocales(\"javascript\")); // 3\nconsole.log(contarVocales(\"programaci\u00f3n\")); // 5\n</code></pre> <p>Ejercicio 6: Funci\u00f3n para generar un n\u00famero aleatorio entre dos valores</p> <ul> <li>Crea una funci\u00f3n <code>numeroAleatorio</code> que reciba dos n\u00fameros (<code>min</code> y <code>max</code>) y devuelva un n\u00famero entero aleatorio dentro de ese rango, incluyendo ambos valores.</li> </ul> Soluci\u00f3n Funci\u00f3n para generar un n\u00famero aleatorio<pre><code>function numeroAleatorio(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconsole.log(numeroAleatorio(1, 10)); // N\u00famero aleatorio entre 1 y 10\nconsole.log(numeroAleatorio(50, 100)); // N\u00famero aleatorio entre 50 y 100\n</code></pre> <p>Ejercicio 7: Funci\u00f3n como expresi\u00f3n</p> <ul> <li>Crea una funci\u00f3n como expresi\u00f3n que calcule el cuadrado de un n\u00famero y la almacene en una variable.</li> </ul> Soluci\u00f3n Funci\u00f3n como expresi\u00f3n<pre><code>let cuadrado = function(n) {\n    return n * n;\n};\n\nconsole.log(cuadrado(5)); // Salida: 25\n</code></pre> <p>Ejercicio 8: Diferencia entre paso por valor y referencia</p> <ul> <li>Declara una funci\u00f3n que intente modificar una variable primitiva y otra que modifique un objeto. Explica la diferencia.</li> </ul> Soluci\u00f3n Paso por valor y referencia<pre><code>function cambiarNumero(num) {\n    num = 50;\n}\n\nfunction cambiarObjeto(obj) {\n    obj.nombre = \"Nuevo\";\n}\n\nlet numero = 10;\nlet persona = { nombre: \"Viejo\" };\n\ncambiarNumero(numero);\ncambiarObjeto(persona);\n\nconsole.log(numero); // Sigue siendo 10 (paso por valor)\nconsole.log(persona.nombre); // \"Nuevo\" (paso por referencia)\n</code></pre> <p>Ejercicio 9: Comprender el \u00e1mbito de variables</p> <ul> <li>Crea una funci\u00f3n que defina una variable local e intenta acceder a ella desde fuera de la funci\u00f3n. \u00bfQu\u00e9 sucede?</li> </ul> Soluci\u00f3n \u00c1mbito de variables<pre><code>function definirVariable() {\n    let local = \"Solo existo aqu\u00ed\";\n    console.log(local); // Funciona dentro de la funci\u00f3n\n}\n\ndefinirVariable();\n// console.log(local); // Error: local no est\u00e1 definida fuera de la funci\u00f3n\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_31/#ejercicios-adicionales","title":"Ejercicios adicionales","text":"<p>Ejercicio 10: Validar la letra del DNI</p> <ul> <li>Crea una funci\u00f3n que reciba un n\u00famero de DNI y su letra.</li> <li>Comprueba si la letra es correcta (usando el m\u00e9todo oficial de c\u00e1lculo del DNI en Espa\u00f1a).</li> <li>Pista: define y utiliza la constante <code>const letras = \"TRWAGMYFPDXBNJZSQVHLCKE\"</code>;</li> <li>Pide al usuario el n\u00famero de DNI y su letra y verifica si son correctos.</li> </ul> Soluci\u00f3n Validaci\u00f3n de letra del DNI<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction calcularLetraDNI(numero) {\n    const letras = \"TRWAGMYFPDXBNJZSQVHLCKE\";\n    return letras[numero % 23];\n}\n\nlet dni = prompt(\"Introduce el n\u00famero del DNI: \");\nlet letra = prompt(\"Introduce la letra del DNI: \").toUpperCase();\n\nlet letraCalculada = calcularLetraDNI(parseInt(dni));\n\nif (letra === letraCalculada) {\n    console.log(\"DNI correcto.\");\n} else {\n    console.log(\"DNI incorrecto. La letra deber\u00eda ser:\", letraCalculada);\n}\n</code></pre> <p>Ejercicio 11: Contar repeticiones de una letra en una cadena</p> <ul> <li>Crea una funci\u00f3n que reciba una cadena y una letra.</li> <li>Devuelve cu\u00e1ntas veces aparece esa letra en la cadena.</li> <li>Pide al usuario una cadena y una letra y muestra el resultado.</li> </ul> Soluci\u00f3n Contar letras en una cadena<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction contarLetra(cadena, letra) {\n    let contador = 0;\n    for (let i = 0; i &lt; cadena.length; i++) {\n        if (cadena[i].toLowerCase() === letra.toLowerCase()) {\n            contador++;\n        }\n    }\n    return contador;\n}\n\nlet cadenaUsuario = prompt(\"Introduce una cadena: \");\nlet letraUsuario = prompt(\"Introduce una letra: \");\n\nconsole.log(`La letra '${letraUsuario}' aparece`, contarLetra(cadenaUsuario, letraUsuario), \"veces en la cadena.\");\n</code></pre> <p>Ejercicio 12: C\u00e1lculo \u00e1rea de diferentes figuras</p> <ul> <li>Crea funciones que calculen el \u00e1rea de diferentes figuras geom\u00e9tricas. (<code>\"cuadrado\"</code>, <code>\"triangulo\"</code>, <code>\"circulo\"</code>).</li> <li>Crea una funci\u00f3n para pedir al usuario un n\u00famero positivo y validar que sea un n\u00famero, devolver -1 si no es v\u00e1lido.</li> <li>Pide al usuario la figura y dependiendo d la figura pide los par\u00e1metros necesarios.</li> <li>Calcula el \u00e1rea de la figura y mu\u00e9strala (utilizando la funci\u00f3n correspondiente). </li> </ul> Soluci\u00f3n con <code>if...else</code> C\u00e1lculo de \u00e1reas de figuras geom\u00e9tricas<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction pedirNumero() {\n    let numero = prompt(\"Introduce un n\u00famero positivo (el s\u00edmbolo decimal es la ','): \");\n    if (isNaN(numero) || numero &lt;= 0) {\n        return -1;\n    }\n    return parseFloat(numero);\n}\n\nfunction calcularAreaCuadrado(lado) {\n    return lado * lado;\n}\n\nfunction calcularAreaTriangulo(base, altura) {\n    return (base * altura) / 2;\n}\n\nfunction calcularAreaCirculo(radio) {\n    return Math.PI * radio * radio;\n}\n\nlet figura = prompt(\"Introduce la figura (cuadrado, triangulo, circulo): \").toLowerCase();\n\nif (figura === \"cuadrado\") {\n    let lado = pedirNumero();\n    if (lado !== -1) {\n        console.log(\"El \u00e1rea del cuadrado es:\", calcularAreaCuadrado(lado));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else if (figura === \"triangulo\") {\n    let base = pedirNumero();\n    let altura = pedirNumero();\n    if (base !== -1 &amp;&amp; altura !== -1) {\n        console.log(\"El \u00e1rea del tri\u00e1ngulo es:\", calcularAreaTriangulo(base, altura));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else if (figura === \"circulo\") {\n    let radio = pedirNumero();\n    if (radio !== -1) {\n        console.log(\"El \u00e1rea del c\u00edrculo es:\", calcularAreaCirculo(radio));\n    } else {\n        console.log(\"N\u00famero inv\u00e1lido.\");\n    }\n} else {\n    console.log(\"Figura no v\u00e1lida.\");\n}\n</code></pre> Soluci\u00f3n con <code>switch</code> C\u00e1lculo de \u00e1reas de figuras geom\u00e9tricas con switch<pre><code>const prompt = require(\"prompt-sync\")();\nfunction pedirNumero() {\n    let numero = prompt(\"Introduce un n\u00famero positivo (el s\u00edmbolo decimal es la ','): \");\n    if (isNaN(numero) || numero &lt;= 0) {\n        return -1;\n    }\n    return parseFloat(numero);\n}\n\nfunction calcularAreaCuadrado(lado) {\n    return lado * lado;\n}\nfunction calcularAreaTriangulo(base, altura) {\n    return (base * altura) / 2;\n}\nfunction calcularAreaCirculo(radio) {\n    return Math.PI * radio * radio;\n}\nlet figura = prompt(\"Introduce la figura (cuadrado, triangulo, circulo): \").toLowerCase();\n\nswitch (figura) {\n    case \"cuadrado\":\n        let lado = pedirNumero();\n        if (lado !== -1) {\n            console.log(\"El \u00e1rea del cuadrado es:\", calcularAreaCuadrado(lado));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    case \"triangulo\":\n        let base = pedirNumero();\n        let altura = pedirNumero();\n        if (base !== -1 &amp;&amp; altura !== -1) {\n            console.log(\"El \u00e1rea del tri\u00e1ngulo es:\", calcularAreaTriangulo(base, altura));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    case \"circulo\":\n        let radio = pedirNumero();\n        if (radio !== -1) {\n            console.log(\"El \u00e1rea del c\u00edrculo es:\", calcularAreaCirculo(radio));\n        } else {\n            console.log(\"N\u00famero inv\u00e1lido.\");\n        }\n        break;\n    default:\n        console.log(\"Figura no v\u00e1lida.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/","title":"Unidad 3: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_32/#32-manejo-de-errores-en-javascript","title":"3.2 Manejo de Errores en JavaScript","text":"<p>JavaScript proporciona mecanismos para manejar errores y prevenir que un programa falle completamente cuando ocurre un problema inesperado. </p> <p>El uso de <code>try...catch</code> nos permite capturar errores y tomar decisiones sobre c\u00f3mo manejarlos sin interrumpir la ejecuci\u00f3n del programa.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#321-el-bloque-trycatch","title":"3.2.1 El Bloque <code>try...catch</code>","text":"<p>La estructura b\u00e1sica para manejar errores en JavaScript es:</p> Sintaxis de try...catch<pre><code>try {\n    // C\u00f3digo que puede generar un error\n} catch (error) {\n    // C\u00f3digo que se ejecuta si ocurre un error\n}\n</code></pre> <p>Cuando el c\u00f3digo dentro de <code>try</code> genera un error, la ejecuci\u00f3n se detiene y se pasa autom\u00e1ticamente al bloque <code>catch</code>, donde podemos manejar el error.</p> <p>Ejemplo b\u00e1sico de <code>try...catch</code></p> Captura de error con try...catch<pre><code>try {\n    let resultado = 10 / 0;\n    console.log(resultado);\n} catch (error) {\n    console.log(\"Se ha producido un error:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#322-uso-del-bloque-finally","title":"3.2.2 Uso del Bloque <code>finally</code>","text":"<p>El bloque <code>finally</code> se ejecuta siempre, independientemente de si hubo o no un error.</p> <p>Ejemplo con <code>finally</code></p> Uso de try...catch...finally<pre><code>try {\n    let x = 5;\n    console.log(x.toUpperCase()); // Error: toUpperCase no existe en un n\u00famero\n} catch (error) {\n    console.log(\"Se ha capturado un error:\", error.message);\n} finally {\n    console.log(\"Este mensaje siempre se mostrar\u00e1.\");\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#323-lanzar-errores-con-throw","title":"3.2.3 Lanzar Errores con <code>throw</code>","text":"<p>Podemos generar errores manualmente usando <code>throw</code>. Esto es \u00fatil cuando queremos validar datos y detener la ejecuci\u00f3n si no son correctos.</p> <p>Ejemplo con <code>throw</code></p> Lanzamiento de errores con throw<pre><code>function verificarEdad(edad) {\n    if (edad &lt; 18) {\n        throw new Error(\"No puedes acceder, eres menor de edad.\");\n    }\n    return \"Acceso permitido.\";\n}\n\ntry {\n    console.log(verificarEdad(16)); // Esto generar\u00e1 un error\n} catch (error) {\n    console.log(\"Error detectado:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#323-tipos-de-errores-comunes-en-javascript","title":"3.2.3 Tipos de Errores Comunes en JavaScript","text":"<p>JavaScript tiene varios tipos de errores que pueden ocurrir durante la ejecuci\u00f3n de un programa. Algunos de los errores m\u00e1s comunes son:</p> <ul> <li><code>SyntaxError</code>: Ocurre cuando hay un error en la sintaxis del c\u00f3digo.</li> <li><code>ReferenceError</code>: Sucede cuando intentamos acceder a una variable que no est\u00e1 definida.</li> <li><code>TypeError</code>: Aparece cuando intentamos ejecutar una operaci\u00f3n sobre un tipo de dato incorrecto.</li> <li><code>RangeError</code>: Se produce cuando un valor num\u00e9rico est\u00e1 fuera del rango permitido.</li> <li><code>EvalError</code>: Relacionado con el uso incorrecto de <code>eval()</code> (aunque es poco com\u00fan en c\u00f3digo moderno).</li> </ul> <p>Ejemplo de errores comunes</p> Errores comunes en JavaScript<pre><code>// SyntaxError (descomenta para ver el error)\n// console.log(\"Hola);\n\n// ReferenceError\ntry {\n    console.log(variableNoDefinida);\n} catch (error) {\n    console.log(\"ReferenceError detectado:\", error.message);\n}\n\n// TypeError\ntry {\n    let num = 5;\n    num(); // No se puede llamar un n\u00famero como funci\u00f3n\n} catch (error) {\n    console.log(\"TypeError detectado:\", error.message);\n}\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#324-personalizacion-de-mensajes-de-error","title":"3.2.4 Personalizaci\u00f3n de Mensajes de Error","text":"<p>Podemos personalizar los errores en JavaScript lanzando mensajes descriptivos mediante <code>throw</code>. Esto es \u00fatil cuando queremos manejar errores espec\u00edficos en nuestro c\u00f3digo.</p> <p>Ejemplo de personalizaci\u00f3n de errores</p> Lanzar errores personalizados<pre><code>function dividir(a, b) {\n    if (b === 0) {\n        throw new Error(\"No se puede dividir por cero.\");\n    }\n    return a / b;\n}\n\ntry {\n    console.log(dividir(10, 2)); // 5\n    console.log(dividir(10, 0)); // Error\n} catch (error) {\n    console.log(\"Error personalizado:\", error.message);\n}\n</code></pre> <p>Los mensajes de error personalizados permiten que el c\u00f3digo sea m\u00e1s claro y f\u00e1cil de depurar.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_32/#ejercicios-manejo-de-errores-en-javascript","title":"Ejercicios: Manejo de Errores en JavaScript","text":"<p>Ejercicio 1: Validaci\u00f3n de entrada num\u00e9rica</p> <ul> <li>Crea una funci\u00f3n <code>pedirNumero</code> que solicite un n\u00famero al usuario.</li> <li>Usa <code>try...catch</code> para asegurarte de que el usuario ingrese un n\u00famero v\u00e1lido.</li> <li>Si el usuario ingresa algo que no sea un n\u00famero, lanza un error con <code>throw</code> y captura el error.</li> </ul> Soluci\u00f3n Validaci\u00f3n de entrada num\u00e9rica<pre><code>const prompt = require(\"prompt-sync\")();\n\nfunction pedirNumero() {\n    try {\n        let input = prompt(\"Introduce un n\u00famero: \");\n        let numero = Number(input);\n        if (isNaN(numero)) {\n            throw new Error(\"El valor introducido no es un n\u00famero v\u00e1lido.\");\n        }\n        console.log(\"N\u00famero ingresado:\", numero);\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\npedirNumero();\n</code></pre> <p>Reto</p> <ul> <li>Modifica la funci\u00f3n <code>pedirNumero</code>, que tenga un valir m\u00ednimo y uno m\u00e1ximo, que de dos tipos de errores, uno si la entrada no es num\u00e9rica y otro si el n\u00famero no est\u00e1 en el rango permitido.</li> </ul> <p>Ejercicio 2: Divisi\u00f3n segura</p> <ul> <li>Crea una funci\u00f3n <code>dividir</code> que reciba dos n\u00fameros y los divida.</li> <li>Usa <code>try...catch</code> para evitar divisiones entre cero.</li> <li>Si el divisor es cero, lanza un error con <code>throw</code>.</li> </ul> Soluci\u00f3n Divisi\u00f3n segura con manejo de errores<pre><code>function dividir(a, b) {\n    try {\n        if (b === 0) {\n            throw new Error(\"No se puede dividir por cero.\");\n        }\n        return a / b;\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\nconsole.log(dividir(10, 2)); // 5\nconsole.log(dividir(10, 0)); // Error: No se puede dividir por cero.\n</code></pre> <p>Ejercicio 3: Validaci\u00f3n de edad para votar</p> <ul> <li>Crea una funci\u00f3n <code>validarEdadVotacion</code> que reciba una edad como par\u00e1metro.</li> <li>Si la edad es menor que 18, lanza un error con <code>throw</code> indicando que la persona no puede votar.</li> <li>Usa <code>try...catch</code> para capturar el error y mostrar un mensaje adecuado.</li> </ul> Soluci\u00f3n Validaci\u00f3n de edad para votar<pre><code>function validarEdadVotacion(edad) {\n    try {\n        if (edad &lt; 18) {\n            throw new Error(\"No puedes votar, debes tener al menos 18 a\u00f1os.\");\n        }\n        console.log(\"Puedes votar.\");\n    } catch (error) {\n        console.log(\"Error:\", error.message);\n    }\n}\n\nvalidarEdadVotacion(20); // Puedes votar.\nvalidarEdadVotacion(16); // Error: No puedes votar, debes tener al menos 18 a\u00f1os.\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/","title":"Unidad 3: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_33/#33-asincronia-en-javascript","title":"3.3 Asincron\u00eda en JavaScript","text":"<p>JavaScript es un lenguaje de programaci\u00f3n monohilo, lo que significa que ejecuta una sola operaci\u00f3n a la vez en su hilo principal. Sin embargo, permite manejar tareas asincr\u00f3nicas mediante callbacks, promesas y <code>async/await</code>, evitando bloqueos en la ejecuci\u00f3n del c\u00f3digo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#331-concurrencia-y-paralelismo-en-javascript","title":"3.3.1 Concurrencia y Paralelismo en JavaScript","text":"<p>En programaci\u00f3n, concurrencia y paralelismo son dos conceptos clave cuando se trabaja con tareas as\u00edncronas:</p> <ul> <li>Concurrencia: Es la capacidad de manejar m\u00faltiples tareas a la vez, pero no necesariamente ejecut\u00e1ndolas simult\u00e1neamente.</li> <li>Paralelismo: Implica la ejecuci\u00f3n de m\u00faltiples tareas al mismo tiempo en diferentes hilos o n\u00facleos de procesamiento.</li> </ul> <p>N\u00f3tese la diferencia: que varias tareas\u00a0progresen\u00a0simult\u00e1neamente no tiene porque significar que sucedan al mismo tiempo. Mientras que la concurrencia aborda un problema m\u00e1s general, el paralelismo es un sub-caso de la concurrencia donde las cosas suceden exactamente al mismo tiempo.</p> <p>Mucha gente a\u00fan sigue creyendo que la concurrencia implica necesariamente m\u00e1s de un\u00a0thread.\u00a0Esto no es cierto. El entrelazado (o multiplexado), por ejemplo, es un mecanismo com\u00fan para implementar concurrencia en escenarios donde los recursos son limitados. Piensa en cualquier sistema operativo moderno haciendo multitarea con un \u00fanico\u00a0core. Simplemente trocea las tareas en tareas m\u00e1s peque\u00f1as y las entrelaza, de modo que cada una de ellas se ejecutar\u00e1 durante un breve instante. Sin embargo, a largo plazo, la impresi\u00f3n es que todas progresan a la vez.</p> <p>JavaScript utiliza un modelo basado en eventos con un bucle de eventos (Event Loop) para manejar la concurrencia, en lugar de m\u00faltiples hilos de ejecuci\u00f3n como otros lenguajes.</p> <p></p> <ul> <li>Escenario 1: no es ni concurrente ni paralelo. Es simplemente una ejecuci\u00f3n secuencial, primero una tarea, despu\u00e9s la siguiente.</li> <li> <p>Escenario 2,\u00a03\u00a0y\u00a04: son escenarios donde se ilustra la concurrencia bajo distintas t\u00e9cnicas:</p> <ol> <li>Escenario 3: muestra como la concurrencia puede conseguirse con un \u00fanico\u00a0thread. Peque\u00f1as porciones de cada tarea se entrelazan para que ambas mantengan un progreso constante. Esto es posible siempre y cuando las tareas puedan descompuestas en subtareas mas simples.</li> <li>Escenario 2\u00a0y\u00a04: ilustran paralelismo, utilizando multiples\u00a0threads\u00a0donde las tareas o subtareas corren en paralelo exactamente al mismo tiempo. A nivel de\u00a0thread, el escenario\u00a02\u00a0es secuencial, mientras que\u00a04\u00a0aplica entrelazado.</li> </ol> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#naturaleza-de-io-bloqueante-vs-no-bloqueante","title":"Naturaleza de I/O Bloqueante vs No Bloqueante","text":"<p>Cuando un programa interact\u00faa con operaciones de entrada/salida (I/O), puede hacerlo de dos maneras:</p> <ul> <li>I/O Bloqueante: La ejecuci\u00f3n del programa se detiene hasta que la operaci\u00f3n de I/O finaliza.</li> <li>I/O No Bloqueante: Permite que el programa siga ejecutando otras tareas mientras la operaci\u00f3n de I/O se completa en segundo plano.</li> </ul> <p>JavaScript implementa I/O no bloqueante, lo que significa que puede manejar m\u00faltiples operaciones as\u00edncronas sin detener la ejecuci\u00f3n del programa.</p> <p></p> <p>S\u00edncrono vs As\u00edncrono se refiere a cuando tendr\u00e1 lugar la respuesta:</p> <ul> <li>S\u00edncrono: es frecuente emplear 'bloqueante' y 's\u00edncrono' como sin\u00f3nimos, dando a entender que toda la operaci\u00f3n de entrada/salida se ejecuta de forma secuencial y, por tanto, debemos esperar a que se complete para procesar el resultado.</li> <li>As\u00edncrono: la finalizaci\u00f3n de la operaci\u00f3n\u00a0I/O\u00a0se se\u00f1aliza m\u00e1s tarde, mediante un mecanismo espec\u00edfico como por ejemplo un\u00a0callback, una promesa o un evento (se explicar\u00e1n despu\u00e9s), lo que hace posible que la respuesta sea procesada en diferido. Como se puede adivinar, su comportamiento es no bloqueante ya que la llamda\u00a0I/O\u00a0devuelve inmediatamente.</li> </ul> <p></p> <p>Seg\u00fan la clasificaci\u00f3n anterior, podemos tener operaciones\u00a0I/O\u00a0de tipo:</p> <ul> <li>S\u00edncronas y Bloqueantes. Toda la operaci\u00f3n se hace de una vez, bloqueando el flujo de ejecuci\u00f3n:          1.  El\u00a0thread\u00a0es bloqueado mientras espera.          2.  La respuesta se procesa inmediatamente despu\u00e9s de terminar la operaci\u00f3n.</li> <li>S\u00edncronas y No-Bloqueantes. Similar a la anterior pero usando alguna t\u00e9cnica de\u00a0polling\u00a0para evitar el bloqueo en la primera fase:          1.  La llamada devuelve inmediatamente, el\u00a0thread\u00a0no se bloquea. Se necesitar\u00e1n sucesivos intentos hasta completar la operaci\u00f3n.          2.  La respuesta se procesa inmediatamente despu\u00e9s de terminar la operaci\u00f3n.</li> <li>As\u00edncronas y No-Bloqueantes:          1.  La petici\u00f3n devuelve inmediatamente para evitar el bloqueo.          2.  Se env\u00eda una notificaci\u00f3n una vez que la operaci\u00f3n se ha completado. Es entonces cuando la funci\u00f3n que procesar\u00e1 la respuesta (callback) se encola para ser ejecutada en alg\u00fan momento en nuestra aplicaci\u00f3n.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#el-modelo-de-javascript-event-loop-y-paralelismo","title":"El Modelo de JavaScript: Event Loop y Paralelismo","text":"<p>JavaScript usa un bucle de eventos (Event Loop) para gestionar la ejecuci\u00f3n de c\u00f3digo as\u00edncrono.</p> <p>Gracias a esta soluci\u00f3n, Javascript es \u00e1ltamente concurrente a pesar de emplear un \u00fanico\u00a0thread. Ya conocemos el significado de\u00a0as\u00edncrono\u00a0y\u00a0no bloqueante, pero \u00bfqu\u00e9 es el\u00a0loop\u00a0de eventos? Este mecanismo ser\u00e1 explicado en el siguiente cap\u00edtulo. Antes, a modo de repaso, veamos el aspecto de una operaci\u00f3n\u00a0I/O\u00a0as\u00edncrona en Javascript:</p> <p>Modelo:  </p> <p>Paso a paso:</p> <p> </p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#el-loop-de-eventos","title":"El loop de eventos","text":"<ol> <li>Heap: Donde se almacenan los objetos y datos.</li> <li>Call Stack (Pila de llamadas): Donde se ejecuta el c\u00f3digo de forma secuencial.</li> <li>Web APIs (para c\u00f3digo as\u00edncrono): Maneja operaciones como <code>setTimeout()</code>, eventos de usuario, o peticiones HTTP.</li> <li>Task Queue (Cola de tareas): Donde se encolan las funciones de callback hasta que el <code>Call Stack</code> est\u00e9 libre.</li> <li>Event Loop: Coordina el flujo de ejecuci\u00f3n y mueve las tareas desde la <code>Task Queue</code> al <code>Call Stack</code> cuando este \u00faltimo est\u00e1 vac\u00edo.</li> </ol> <p>De esta forma, podemos entender\u00a0la cola como el almac\u00e9n de los mensajes (notificaciones) y sus\u00a0callbacks\u00a0asociados\u00a0mientras que\u00a0el\u00a0loop\u00a0de eventos es el mecanismo para despacharlos. Este mecanismo sigue un comportamiento s\u00edncrono: cada mensaje debe ser procesado de forma completa para que pueda comenzar el siguiente.</p> <p>Una de las implicaciones m\u00e1s relevantes de este bucle de eventos es que\u00a0los\u00a0callbacks\u00a0no ser\u00e1n despachados tan pronto como sean encolados, sino que deben esperar su turno. Este tiempo de espera depender\u00e1 del numero de mensajes pendientes de procesar (por delante en la cola) as\u00ed como del tiempo que se tardar\u00e1 en cada uno de ellos. Aunque pueda parecer obvio, esto explica la raz\u00f3n por la cual la finalizaci\u00f3n de una operaci\u00f3n as\u00edncrona no puede predecirse con seguridad, sino que se atiende en modo\u00a0best effort.</p> <p>El\u00a0loop\u00a0de eventos no est\u00e1 libre de problemas, y podr\u00edan darse situaciones comprometidas en los siguientes casos:</p> <ul> <li>La pila de llamadas no se vac\u00eda ya que nuestra aplicaci\u00f3n hace uso intensivo de ella. No habr\u00e1\u00a0tick\u00a0en el bucle de eventos y por tanto los mensajes no se procesan.</li> <li>El flujo de mensajes que se van encolando es mayor que el de mensajes procesados. Demasiados eventos a la vez.</li> <li>Un\u00a0callback\u00a0requiere procesamiento intensivo y acapara la pila. De nuevo bloqueamos los\u00a0ticks\u00a0del bucle de eventos y el resto de mensajes no se despachan.</li> </ul> <p>Lo m\u00e1s probable es que un cuello de botella se produzca como consecuencia de una mezcla de factores. En cualquier caso, acabar\u00edan\u00a0retrasando el flujo de ejecuci\u00f3n. Y por tanto retrasando el renderizado, el procesado de eventos, etc. La experiencia de usuario se degradar\u00eda y la aplicaci\u00f3n dejar\u00eda de responder de forma fluida. Para evitar esta situaci\u00f3n, recuerda siempre\u00a0mantener los\u00a0callbacks\u00a0lo m\u00e1s ligeros posible. En general, evita c\u00f3digo que acapare la CPU y permite que el\u00a0loop\u00a0de eventos se ejecute a buen ritmo.</p> <p>Ejemplo de c\u00f3mo funciona el Event Loop</p> Ejemplo del Event Loop<pre><code>console.log(\"Inicio\");\n\nsetTimeout(() =&gt; {\n    console.log(\"Mensaje dentro de setTimeout\");\n}, 0);\n\nconsole.log(\"Fin\");\n</code></pre> <p>Salida esperada: <pre><code>Inicio\nFin\nMensaje dentro de setTimeout\n</code></pre></p> <p>Incluso con un tiempo de espera de <code>0</code>, la funci\u00f3n en <code>setTimeout</code> se ejecuta despu\u00e9s porque se encola en la <code>Task Queue</code> y solo se ejecuta cuando el <code>Call Stack</code> est\u00e1 vac\u00edo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#nota-sobre-paralelismo-en-javascript","title":"Nota sobre Paralelismo en JavaScript","text":"<p>Aunque JavaScript es monohilo, puede ejecutar tareas en paralelo a trav\u00e9s de Web Workers o m\u00f3dulos como <code>Worker Threads</code> en Node.js, lo que permite aprovechar m\u00faltiples n\u00facleos de CPU.</p> <p>Esto no es lo mismo que el Event Loop, ya que los Web Workers ejecutan c\u00f3digo en hilos separados sin acceso al <code>Call Stack</code> principal.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#332-callbacks","title":"3.3.2 Callbacks","text":"<p>Los\u00a0callbacks\u00a0son la pieza clave para que Javascript pueda funcionar de forma as\u00edncrona. De hecho, el resto de patrones as\u00edncronos en Javascript est\u00e1 basado en\u00a0callbacks\u00a0de un modo u otro, simplemente a\u00f1aden az\u00facar sint\u00e1ctico para trabajar con ellos m\u00e1s c\u00f3modamente.</p> <p>Un\u00a0callback\u00a0no es m\u00e1s que\u00a0una funci\u00f3n que se pasa como argumento de otra funci\u00f3n, y que ser\u00e1 invocada para completar alg\u00fan tipo de acci\u00f3n. En nuestro contexto as\u00edncrono, un\u00a0callback\u00a0representa el '\u00bfQu\u00e9 quieres hacer una vez que tu operaci\u00f3n as\u00edncrona termine?'. Por tanto, es el trozo de c\u00f3digo que ser\u00e1 ejecutado una vez que una operaci\u00f3n as\u00edncrona notifique que ha terminado. Esta ejecuci\u00f3n se har\u00e1 en alg\u00fan momento futuro, gracias al mecanismo que implementa el bucle de eventos.</p> <p>F\u00edjate en el siguiente ejemplo sencillo utilizando un callback:</p> <p>Ejemplo de callback</p> Uso de un callback<pre><code>function operacion(a, b, callback) {\n    let resultado = a + b;\n    callback(resultado);\n}\n\nfunction mostrarResultado(resultado) {\n    console.log(\"El resultado es:\", resultado);\n}\n\n// Uso de un callback\noperacion(5, 3, mostrarResultado); \n// callback an\u00f3nimo, funci\u00f3n flecha\noperacion(10, 20, resultado =&gt; console.log(\"El resultado es:\", resultado)); \n// callback an\u00f3nimo, funci\u00f3n tradicional\noperacion(15, 25, function(resultado) {\n    console.log(\"El resultado es:\", resultado);\n});\n</code></pre> <p>Problema con los Callbacks: Callback Hell</p> <p>Cuando encadenamos m\u00faltiples callbacks, el c\u00f3digo se vuelve dif\u00edcil de leer y mantener. Esto se conoce como callback hell.</p> <p>Ejemplo de Callback Hell</p> Callback Hell<pre><code>function paso1(callback) {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 1 completado\");\n        callback();\n    }, 1000);\n}\n\nfunction paso2(callback) {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 2 completado\");\n        callback();\n    }, 1000);\n}\n\nfunction paso3() {\n    setTimeout(() =&gt; {\n        console.log(\"Paso 3 completado\");\n    }, 1000);\n}\n\npaso1(() =&gt; {\n    paso2(() =&gt; {\n        paso3();\n    });\n});\n</code></pre> <p>Para evitar este problema, se introdujeron las Promesas.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#333-promesas-en-javascript","title":"3.3.3 Promesas en JavaScript","text":"<p>Una promesa es un objeto que representa\u00a0el resultado de una operaci\u00f3n as\u00edncrona. Este resultado podr\u00eda estar disponible\u00a0ahora\u00a0o en el\u00a0futuro. Las promesas se basan en\u00a0callbacks pero a\u00f1aden az\u00facar para un mejor manejo y sintaxis. Las promesas son especiales en t\u00e9rminos de asincron\u00eda ya que a\u00f1aden un nuevo nivel de prioridad que estudiaremos a continuaci\u00f3n.</p> <p>Cuando llamamos a una funci\u00f3n as\u00edncrona implementada con este patr\u00f3n, nos devolver\u00e1 inmediatamente una promesa como garant\u00eda de que la operaci\u00f3n as\u00edncrona finalizar\u00e1 en alg\u00fan momento, ya sea con \u00e9xito o con fallo. Una vez que tengamos el objeto promesa en nuestro poder, registramos un par de\u00a0callbacks: uno para indicarle a la promesa 'que debe hacer en caso de que todo vaya bien' (resoluci\u00f3n de la promesa o\u00a0resolve) y otro para determinar 'que hacer en caso de fallo' (rechazo de la promesa o\u00a0reject).</p> <p>A resumidas cuentas, una promesa es un objeto al que le\u00a0adjuntamos\u00a0callbacks, en lugar de pasarlos directamente a la funci\u00f3n as\u00edncrona. La forma en que registramos esos dos\u00a0callbacks\u00a0es mediante el m\u00e9todo\u00a0.then(resolveCallback, rejectCallback). En terminolog\u00eda de promesas, decimos que una promesa se resuelve con \u00e9xito (resolved) o se rechaza con fallo (rejected). Echa un vistazo al siguiente ejemplo:</p> <p>Una promesa es un objeto que representa un valor que puede estar disponible ahora, en el futuro o nunca. Las promesas tienen tres estados:</p> <ul> <li>Pendiente (<code>pending</code>): La operaci\u00f3n a\u00fan no ha finalizado.</li> <li>Resuelta (<code>fulfilled</code>): La operaci\u00f3n se complet\u00f3 con \u00e9xito.</li> <li>Rechazada (<code>rejected</code>): Ocurri\u00f3 un error.</li> </ul> <p>Sintaxis de la promesa</p> Sintaxis de una Promesa<pre><code>const currentURL = document.URL.toString();\nconst promise = fetch(currentURL);\n\npromise.then(result =&gt; console.log(result), e =&gt; console.log(`Error capturado:  ${e}`));\n</code></pre> <p>Es m\u00e1s legible de esta manera:</p> <p>Sintaxis de la promesa m\u00e1s legible</p> Sintaxis de una Promesa<pre><code>fetch(document.URL.toString())\n    .then(result =&gt; console.log(result),\n        e =&gt; console.log(`Error capturado:  ${e}`));\n</code></pre> <p>En el ejemplo anterior, pedimos al servidor que nos provea una URL utilizando la funci\u00f3n as\u00edncrona fetch y nos devuelve una promesa. Configuramos la promesa con dos callbacks: uno para resolver la promesa, que mostrar\u00e1 la p\u00e1gina por consola en caso de \u00e9xito, y otro para rechazarla en caso de fallo que mostrar\u00e1 el error asociado.</p> <p>Creando una Promesa</p> <p>Ejemplo de Promesa</p> Uso de Promesas<pre><code>function operacionAsincrona() {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            let exito = true;\n            if (exito) {\n                resolve(\"Operaci\u00f3n completada\");\n            } else {\n                reject(\"Error en la operaci\u00f3n\");\n            }\n        }, 2000);\n    });\n}\n\noperacionAsincrona()\n    .then(mensaje =&gt; console.log(mensaje))\n    .catch(error =&gt; console.log(\"Error:\", error));\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#334-asyncawait-manejo-de-codigo-asincrono-de-forma-mas-clara","title":"3.3.4 <code>async/await</code>: Manejo de C\u00f3digo As\u00edncrono de Forma M\u00e1s Clara","text":"<p>Las promesas supusieron un gran salto en Javascript al introducir una mejora sustancial sobre los\u00a0callbacks\u00a0y un manejo m\u00e1s elegante de nuestras tareas as\u00edncronas. Sin embargo, tambi\u00e9n pueden llegar a ser tediosas y verbosas a medida que se requieren m\u00e1s y m\u00e1s\u00a0.then().\u00a0Las palabras clave\u00a0async\u00a0y\u00a0await\u00a0surgieron para simplificar el manejo de las promesas. Son puro az\u00facar para hacer las promesas m\u00e1s amigables, escribir c\u00f3digo m\u00e1s sencillo, reducir el anidamiento y mejorar la trazabilidad al depurar. Pero recuerda,\u00a0async\u00a0\\\u00a0await\u00a0y las promesas son lo mismo en el fondo.</p> <p>La etiqueta\u00a0async\u00a0declara una funci\u00f3n como as\u00edncrona e indica que una promesa ser\u00e1 autom\u00e1ticamente devuelta. Podemos declarar como\u00a0async\u00a0tanto funciones con nombre, an\u00f3nimas, o funciones flecha. Por otro lado,\u00a0await\u00a0debe ser usado siempre dentro de una funci\u00f3n declarada como\u00a0async\u00a0y esperar\u00e1 autom\u00e1ticamente (de forma as\u00edncrona y no bloqueante) a que una promesa se resuelva.</p> <p><code>async/await</code> es una forma m\u00e1s sencilla y clara de manejar operaciones asincr\u00f3nicas sin caer en la anidaci\u00f3n de callbacks o el uso complejo de <code>.then()</code> y <code>.catch()</code>.</p> <p>Para usarlo: - Se define una funci\u00f3n con la palabra clave <code>async</code>. - Se usa <code>await</code> para esperar el resultado de una promesa.</p> <p>Sintaxis de <code>async/await</code> AJAX</p> Uso de async/await<pre><code>const checkServerWithSugar = async (url) =&gt; {\n    try {\n        const response = await fetch(url);\n        return `Estado del servidor: ${response.status === 200 ? \"OK\" : \"NOT OK\"}`;\n    } catch (e) {\n        throw `Manejo intero del error. Error original: ${e}`;\n    }\n}\n\ncheckServerWithSugar(document.URL.toString())\n    .then(result =&gt; console.log(result))\n    .catch(e =&gt; console.log(`Error Capturado Fuera de la funci\u00f3n async: ${e}`));\n</code></pre> <p>Ejemplo con <code>async/await</code></p> Uso de async/await<pre><code>function operacionAsincrona() {\n    return new Promise(resolve =&gt; {\n        setTimeout(() =&gt; resolve(\"Operaci\u00f3n completada\"), 2000);\n    });\n}\n\nasync function ejecutarOperacion() {\n    console.log(\"Iniciando operaci\u00f3n...\");\n    let resultado = await operacionAsincrona();\n    console.log(resultado);\n}\n\nejecutarOperacion();\n</code></pre> <p>Otro ejemplo de uso de <code>async/await</code> puede ser:</p> <p>Ejemplo con <code>async/await</code></p> Uso de async/await<pre><code>async function myDisplay() {\n    let myPromise = new Promise(function(resolve, reject) {\n        resolve(\"I love You !!\");\n    });\n    document.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_33/#comparacion-entre-callbacks-promesas-y-asyncawait","title":"Comparaci\u00f3n entre Callbacks, Promesas y <code>async/await</code>","text":"M\u00e9todo Facilidad de lectura Manejo de errores Callbacks Baja (callback hell) Uso de m\u00faltiples <code>if</code> Promesas Media <code>.then()</code> y <code>.catch()</code> async/await Alta (c\u00f3digo m\u00e1s limpio) Uso de <code>try...catch</code> <p>Las promesas y <code>async/await</code> son la mejor opci\u00f3n en proyectos modernos para manejar c\u00f3digo asincr\u00f3nico de manera eficiente y legible.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/","title":"Unidad 3: Funciones y Manejo de Errores","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#34-ejemplo-practico-con-asyncawait","title":"3.4 Ejemplo pr\u00e1ctico con Async/Await","text":"<p>Este microservicio proporciona informaci\u00f3n sobre ciudades espa\u00f1olas almacenadas en un archivo JSON.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#introduccion-a-las-api-rest","title":"\ud83d\udccc Introducci\u00f3n a las API REST","text":"<p>Este microservicio sigue el concepto de API REST (Representational State Transfer), un estilo arquitect\u00f3nico que permite la comunicaci\u00f3n entre sistemas a trav\u00e9s de HTTP. </p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#caracteristicas-de-una-api-rest","title":"Caracter\u00edsticas de una API REST","text":"<ul> <li>Basado en recursos: Cada entidad (en este caso, ciudades) es un recurso accesible mediante una URL \u00fanica.</li> <li>Uso de m\u00e9todos HTTP est\u00e1ndar: Se utilizan m\u00e9todos como:</li> <li><code>GET</code> para obtener datos.</li> <li><code>POST</code> para enviar datos (no implementado en este ejemplo).</li> <li><code>PUT</code> para actualizar datos.</li> <li><code>DELETE</code> para eliminar recursos.</li> <li>Formato de datos JSON: Los datos se env\u00edan y reciben en formato JSON, lo que facilita la interoperabilidad con otros sistemas.</li> </ul> <p>Este microservicio REST proporciona informaci\u00f3n sobre ciudades espa\u00f1olas mediante dos endpoints:</p> <ol> <li><code>GET /ciudades</code> \u2192 Devuelve la lista completa de ciudades.</li> <li><code>GET /ciudades/:codigo</code> \u2192 Devuelve la informaci\u00f3n de una ciudad espec\u00edfica seg\u00fan su c\u00f3digo.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#1-archivo-json-con-los-datos-ciudadesjson","title":"1\ufe0f\u20e3 Archivo JSON con los datos (<code>ciudades.json</code>)","text":"ciudades.json<pre><code>[\n    { \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 },\n    { \"codigo\": \"BCN\", \"nombre\": \"Barcelona\", \"poblacion\": 1620000 },\n    { \"codigo\": \"VAL\", \"nombre\": \"Valencia\", \"poblacion\": 791000 },\n    { \"codigo\": \"SEV\", \"nombre\": \"Sevilla\", \"poblacion\": 688000 },\n    { \"codigo\": \"ZAR\", \"nombre\": \"Zaragoza\", \"poblacion\": 674000 },\n    { \"codigo\": \"MAL\", \"nombre\": \"M\u00e1laga\", \"poblacion\": 574000 },\n    { \"codigo\": \"MUR\", \"nombre\": \"Murcia\", \"poblacion\": 460000 },\n    { \"codigo\": \"PAL\", \"nombre\": \"Palma de Mallorca\", \"poblacion\": 415000 },\n    { \"codigo\": \"BIL\", \"nombre\": \"Bilbao\", \"poblacion\": 345000 },\n    { \"codigo\": \"VGO\", \"nombre\": \"Vigo\", \"poblacion\": 296000 }\n]\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#2-servidor-nodejs-con-express-y-asyncawait-serverjs","title":"2\ufe0f\u20e3 Servidor Node.js con Express y Async/Await (<code>server.js</code>)","text":"server.js<pre><code>const express = require(\"express\");\nconst fs = require(\"fs/promises\"); // Uso de fs con promesas para async/await\nconst app = express();\nconst PORT = 3000;\n\n// Funci\u00f3n para leer el JSON de ciudades\nasync function cargarCiudades() {\n    try {\n        const data = await fs.readFile(\"ciudades.json\", \"utf-8\");\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error al leer el archivo JSON\", error);\n        return [];\n    }\n}\n\n// \ud83d\udccc Endpoint para obtener todas las ciudades\napp.get(\"/ciudades\", async (req, res) =&gt; {\n    const ciudades = await cargarCiudades();\n    res.json(ciudades);\n});\n\n// \ud83d\udccc Endpoint para obtener una ciudad por su c\u00f3digo\napp.get(\"/ciudades/:codigo\", async (req, res) =&gt; {\n    const codigo = req.params.codigo.toUpperCase();\n    const ciudades = await cargarCiudades();\n    const ciudad = ciudades.find(c =&gt; c.codigo === codigo);\n\n    if (ciudad) {\n        res.json(ciudad);\n    } else {\n        res.status(404).json({ error: \"Ciudad no encontrada\" });\n    }\n});\n\n// Iniciar servidor\napp.listen(PORT, () =&gt; {\n    console.log(`Servidor ejecut\u00e1ndose en http://localhost:${PORT}`);\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#3-como-ejecutar-el-microservicio","title":"3\ufe0f\u20e3 C\u00f3mo Ejecutar el Microservicio","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#1-instalar-nodejs-y-express","title":"\ud83d\udccc 1. Instalar Node.js y Express","text":"<p>Ejecuta los siguientes comandos: <pre><code>npm init -y\nnpm install express\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#2-crear-los-archivos","title":"\ud83d\udccc 2. Crear los archivos","text":"<ul> <li>Guarda el archivo <code>ciudades.json</code> con los datos.</li> <li>Guarda el archivo <code>server.js</code> con el c\u00f3digo del servidor.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#3-iniciar-el-servidor","title":"\ud83d\udccc 3. Iniciar el servidor","text":"<p>Ejecuta el siguiente comando: <pre><code>node server.js\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#4-pruebas-con-el-servidor","title":"4\ufe0f\u20e3 Pruebas con el Servidor","text":""},{"location":"content/MF_0966_3/UF2215/unidad03_34/#obtener-todas-las-ciudades","title":"\u2714 Obtener todas las ciudades","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades</code></p> <p>\ud83d\udccc Ejemplo de respuesta: <pre><code>[\n    { \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 },\n    { \"codigo\": \"BCN\", \"nombre\": \"Barcelona\", \"poblacion\": 1620000 }\n]\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#obtener-una-ciudad-por-codigo","title":"\u2714 Obtener una ciudad por c\u00f3digo","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades/MAD</code></p> <p>\ud83d\udccc Ejemplo de respuesta: <pre><code>{ \"codigo\": \"MAD\", \"nombre\": \"Madrid\", \"poblacion\": 3223000 }\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#ciudad-no-encontrada","title":"\u274c Ciudad no encontrada","text":"<p>\ud83d\udccc Ruta: <code>http://localhost:3000/ciudades/XYZ</code></p> <p>\ud83d\udccc Respuesta: <pre><code>{ \"error\": \"Ciudad no encontrada\" }\n</code></pre></p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#5-como-acceder-a-los-servicios-rest","title":"5\ufe0f\u20e3 C\u00f3mo acceder a los servicios REST","text":"<p>Existen varias formas de probar y consumir servicios REST. Aqu\u00ed te mostramos tres m\u00e9todos: desde un plugin de VSCode, desde un navegador web y con Postman.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-1-usar-una-extension-de-vscode-rest-client","title":"\u2714 Opci\u00f3n 1: Usar una Extensi\u00f3n de VSCode (REST Client)","text":"<ol> <li>Instalar la extensi\u00f3n REST Client en VSCode.</li> <li>Crear un archivo con extensi\u00f3n <code>.http</code> o <code>.rest</code>.</li> <li>Escribir la petici\u00f3n:</li> </ol> <pre><code>GET http://localhost:3000/ciudades\n</code></pre> <ol> <li>Hacer clic en Send Request para ver la respuesta en JSON.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-2-desde-el-navegador-chrome","title":"\u2714 Opci\u00f3n 2: Desde el navegador Chrome","text":"<p>Si solo necesitas probar las peticiones <code>GET</code>, puedes hacerlo desde el navegador:</p> <ol> <li>Abre Google Chrome.</li> <li>Escribe en la barra de direcciones:    <pre><code>http://localhost:3000/ciudades\n</code></pre></li> <li>Ver\u00e1s la respuesta en formato JSON en pantalla.</li> <li>Para buscar una ciudad espec\u00edfica:    <pre><code>http://localhost:3000/ciudades/MAD\n</code></pre></li> </ol> <p>Esto mostrar\u00e1 la informaci\u00f3n de la ciudad de Madrid.</p>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#opcion-3-usar-postman-para-probar-la-api","title":"\u2714 Opci\u00f3n 3: Usar Postman para probar la API","text":"<ol> <li>Descargar e instalar Postman desde postman.com.</li> <li>Abrir Postman y crear una nueva solicitud (<code>New Request</code>).</li> <li>Seleccionar el m\u00e9todo GET e ingresar la URL:    <pre><code>http://localhost:3000/ciudades\n</code></pre></li> <li>Hacer clic en Send y ver la respuesta JSON.</li> <li>Para buscar una ciudad espec\u00edfica, cambia la URL:    <pre><code>http://localhost:3000/ciudades/MAD\n</code></pre></li> <li>Si deseas probar otros m\u00e9todos como <code>POST</code> o <code>PUT</code>, puedes enviar datos JSON en el Body.</li> </ol>"},{"location":"content/MF_0966_3/UF2215/unidad03_34/#conclusion","title":"Conclusi\u00f3n","text":"<p>Este microservicio muestra c\u00f3mo utilizar async/await en Node.js para manejar archivos JSON de manera as\u00edncrona y proporcionar datos a trav\u00e9s de una API sencilla con Express.js. \ud83d\ude80</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/","title":"4. Integraci\u00f3n de JS con HTML y DOM","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_40/#40-aspectos-previos","title":"4.0 Aspectos previos","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_40/#401-que-es-un-servicio-web","title":"4.0.1 \u00bfQu\u00e9 es un Servicio Web?","text":"<p>Un servicio web es una aplicaci\u00f3n que responde a peticiones HTTP realizadas por un cliente (normalmente un navegador) y devuelve informaci\u00f3n en forma de p\u00e1ginas web, datos JSON o cualquier otro contenido.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#402-estructura-basica-de-una-peticion-web","title":"4.0.2 Estructura B\u00e1sica de una <code>Petici\u00f3n Web</code>","text":"<p>Cuando un usuario accede a una p\u00e1gina web, el proceso que ocurre es el siguiente:</p> <ol> <li>El usuario introduce una URL en su navegador.</li> <li>El navegador env\u00eda una petici\u00f3n HTTP al servidor correspondiente.</li> <li>El servidor recibe la petici\u00f3n y genera una respuesta (un archivo HTML, datos de una base de datos, etc.).</li> <li>El navegador recibe la respuesta, interpreta el c\u00f3digo HTML y ejecuta cualquier JavaScript incluido.</li> </ol> <p>El servidor responde con un c\u00f3digo de estado HTTP , estos son los m\u00e1s comunes:</p> C\u00f3digo Descripci\u00f3n 200 OK 404 No encontrado 500 Error interno <p>Este flujo es sin memoria: cada petici\u00f3n es independiente y el servidor no recuerda estados anteriores (a menos que se use almacenamiento en cookies o bases de datos).</p> <p>V\u00eddeo explicativo</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#403-que-es-una-url-y-como-funciona-http","title":"4.0.3 \u00bfQu\u00e9 es una URL y c\u00f3mo funciona HTTP?","text":"<ul> <li>URL (Uniform Resource Locator): Direcci\u00f3n \u00fanica que identifica un recurso en la web (ejemplo: <code>https://www.ejemplo.com/productos</code>).</li> <li>HTTP (HyperText Transfer Protocol): Protocolo que define c\u00f3mo se comunican los navegadores con los servidores web.</li> <li>M\u00e9todos HTTP m\u00e1s comunes:<ul> <li><code>GET</code>: Solicita informaci\u00f3n (ejemplo: cargar una p\u00e1gina).</li> <li><code>POST</code>: Env\u00eda datos al servidor (ejemplo: un formulario).</li> <li><code>PUT</code>: Actualiza informaci\u00f3n en el servidor.</li> <li><code>DELETE</code>: Elimina datos en el servidor.</li> <li><code>HEAD</code>: Solicita solo los encabezados de una respuesta.</li> </ul> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#404-frontend-vs-backend","title":"4.0.4 Frontend vs Backend","text":"<p>La programaci\u00f3n web se divide en dos partes principales:</p> Frontend (Cliente) Backend (Servidor) Se ejecuta en el navegador del usuario. Se ejecuta en el servidor web. Usa HTML, CSS y JavaScript. Usa lenguajes como PHP, Node.js, Python, etc. Se encarga de la apariencia y la interacci\u00f3n con el usuario. Se encarga de la l\u00f3gica del negocio y la base de datos. <p>JavaScript es el \u00fanico lenguaje que puede trabajar en ambos lados: - En el frontend (en el navegador) para la interacci\u00f3n con el usuario. - En el backend (con Node.js) para la gesti\u00f3n de datos y l\u00f3gica del servidor.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#405-caso-de-uso-carga-de-una-pagina-web-con-codigo-de-ejemplo","title":"4.0.5 Caso de Uso: Carga de una P\u00e1gina Web con C\u00f3digo de Ejemplo","text":"<p>Para entender mejor c\u00f3mo funciona una petici\u00f3n HTTP en una aplicaci\u00f3n web, veamos un caso pr\u00e1ctico donde un usuario accede a una p\u00e1gina de productos y el servidor responde generando un HTML din\u00e1mico con los datos de una base de datos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#paso-1-peticion-get-desde-el-navegador","title":"\ud83d\udccc Paso 1: Petici\u00f3n GET desde el Navegador","text":"<p>Cuando el usuario escribe <code>www.ejemplo.com/productos</code> en la barra de direcciones, el navegador env\u00eda una petici\u00f3n HTTP GET al servidor:</p> <pre><code>GET /productos HTTP/1.1\nHost: www.ejemplo.com\nUser-Agent: Mozilla/5.0\nAccept: text/html\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#paso-2-servidor-nodejs-recibe-la-peticion","title":"\ud83d\udccc Paso 2: Servidor Node.js recibe la petici\u00f3n","text":"<p>En el backend, el servidor recoge la petici\u00f3n GET y consulta la base de datos para obtener los productos:</p> <p>Servidor Node.js con Express</p> Servidor Node.js que responde con HTML<pre><code>const express = require('express');\nconst mysql = require('mysql2');\nconst app = express();\n\n// Conexi\u00f3n a la base de datos\nconst conexion = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'tienda'\n});\n\n// Ruta para manejar la petici\u00f3n GET /productos\napp.get('/productos', (req, res) =&gt; {\n    conexion.query('SELECT * FROM productos', (error, resultados) =&gt; {\n        if (error) {\n            res.status(500).send(\"Error en la base de datos\");\n            return;\n        }\n\n        // Construcci\u00f3n del HTML con los datos de la BD\n        let html = `\n            &lt;!DOCTYPE html&gt;\n            &lt;html lang=\"es\"&gt;\n            &lt;head&gt;\n                &lt;meta charset=\"UTF-8\"&gt;\n                &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n                &lt;title&gt;Lista de Productos&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;h1&gt;Lista de Productos&lt;/h1&gt;\n                &lt;table border=\"1\"&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;ID&lt;/th&gt;\n                        &lt;th&gt;Nombre&lt;/th&gt;\n                        &lt;th&gt;Precio&lt;/th&gt;\n                    &lt;/tr&gt;`;\n\n        resultados.forEach(producto =&gt; {\n            html += `\n                    &lt;tr&gt;\n                        &lt;td&gt;${producto.id}&lt;/td&gt;\n                        &lt;td&gt;${producto.nombre}&lt;/td&gt;\n                        &lt;td&gt;${producto.precio}\u20ac&lt;/td&gt;\n                    &lt;/tr&gt;`;\n        });\n\n        html += `\n                &lt;/table&gt;\n            &lt;/body&gt;\n            &lt;/html&gt;`;\n\n        res.send(html);\n    });\n});\n\n// Iniciar servidor\napp.listen(3000, () =&gt; {\n    console.log('Servidor ejecut\u00e1ndose en http://localhost:3000');\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#paso-3-el-servidor-envia-la-respuesta-al-navegador","title":"\ud83d\udccc Paso 3: El servidor env\u00eda la respuesta al navegador","text":"<p>Una vez que la base de datos devuelve los productos, el servidor genera un documento HTML y lo env\u00eda como respuesta:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/html\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Lista de Productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Lista de Productos&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;ID&lt;/th&gt;\n            &lt;th&gt;Nombre&lt;/th&gt;\n            &lt;th&gt;Precio&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;1&lt;/td&gt;\n            &lt;td&gt;Camisa&lt;/td&gt;\n            &lt;td&gt;25\u20ac&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;2&lt;/td&gt;\n            &lt;td&gt;Pantal\u00f3n&lt;/td&gt;\n            &lt;td&gt;40\u20ac&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_40/#paso-4-el-navegador-renderiza-la-pagina","title":"\ud83d\udccc Paso 4: El navegador renderiza la p\u00e1gina","text":"<p>El navegador recibe el HTML y lo interpreta para mostrar la lista de productos en pantalla.</p> <p>Este flujo explica c\u00f3mo funciona una aplicaci\u00f3n web desde la petici\u00f3n hasta la respuesta. Una vez comprendido este proceso, podemos empezar a integrar JavaScript en el navegador para mejorar la interactividad de la p\u00e1gina web.</p> <p></p> <p>Enlace a la p\u00e1gina de productos</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/","title":"4. Integraci\u00f3n de JS con HTML y DOM","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_41/#41-introduccion-a-html","title":"4.1. Introducci\u00f3n a HTML","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_41/#411-que-es-html-y-para-que-sirve","title":"4.1.1 \u00bfQu\u00e9 es HTML y para qu\u00e9 sirve?","text":"<p>HTML (HyperText Markup Language) es el lenguaje est\u00e1ndar utilizado para la creaci\u00f3n de p\u00e1ginas web. Define la estructura y el contenido de un documento web mediante etiquetas.</p> <p>Diferencias clave:</p> <ul> <li>HTML define la estructura y contenido.</li> <li>CSS gestiona la apariencia.</li> <li>JavaScript controla la interactividad.</li> </ul> <p>Ejemplo m\u00ednimo de HTML</p> Ejemplo b\u00e1sico<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi primera p\u00e1gina&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola, mundo!&lt;/h1&gt;\n    &lt;p&gt;Este es un documento HTML b\u00e1sico.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-1-crear-un-documento-html-minimo","title":"Ejercicio 1: Crear un documento HTML m\u00ednimo","text":"<p>Ejercicio</p> <ul> <li>Crea un archivo HTML desde cero.</li> <li>Incluye un t\u00edtulo en el <code>&lt;head&gt;</code>, <code>Mi primera p\u00e1gina web</code>.</li> <li>En el <code>&lt;body&gt;</code>, agrega un encabezado y un p\u00e1rrafo, con tu nombre y la fecha.</li> </ul> Ejemplo de HTML Ejemplo de HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi primera p\u00e1gina web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Javier Beteta&lt;/h1&gt;\n    &lt;p&gt;20 de enero de 2025&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#412-estructura-basica-de-un-documento-html","title":"4.1.2 Estructura b\u00e1sica de un documento HTML","text":"<p>Un documento HTML tiene una estructura fundamental:</p> <p>\ud83d\udccc Elementos esenciales:</p> <ul> <li><code>&lt;!DOCTYPE html&gt;</code> \u2192 Indica que el documento es HTML5.</li> <li><code>&lt;html&gt;</code> \u2192 Contenedor principal.</li> <li><code>&lt;head&gt;</code> \u2192 Informaci\u00f3n meta y enlaces a CSS.</li> <li><code>&lt;body&gt;</code> \u2192 Contenido visible.</li> </ul> <p>Estructura b\u00e1sica HTML, lo m\u00ednimo necesario</p> Estructura de HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ejemplo de estructura&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Encabezado Principal&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo de ejemplo.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>VSCode Snippet</p> <p>Para crear r\u00e1pidamente la estructura b\u00e1sica de un documento HTML en Visual Studio Code, puedes usar el comando <code>!</code> seguido de la tecla <code>Tab</code>. <code>Pruebal\u00f3 en tu editor de c\u00f3digo.</code></p> <ul> <li>Crea un nuevo documento con extensi\u00f3n <code>.html</code>.</li> <li>Escribe <code>!</code> y presiona la tecla <code>Tab</code>.</li> <li>Se generar\u00e1 autom\u00e1ticamente la estructura b\u00e1sica de un documento HTML.</li> </ul> Estructura de HTML con Snippet<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Si analizamos la estructura b\u00e1sica de un documento HTML, vemos que el contenedor principal es la etiqueta <code>&lt;html&gt;</code>, que contiene dos secciones principales: <code>&lt;head&gt;</code> y <code>&lt;body&gt;</code>. En <code>&lt;head&gt;</code> se colocan metadatos y enlaces a <code>CSS</code>, mientras que <code>&lt;body&gt;</code> contiene el contenido visible de la p\u00e1gina.</p> <p>Las etiquetas <code>&lt;meta&gt;</code> proporcionan informaci\u00f3n adicional al navegador sobre c\u00f3mo se debe manejar la p\u00e1gina. A continuaci\u00f3n, se explica cada una:</p> <ol> <li><code>&lt;meta charset=\"UTF-8\"&gt;</code><ul> <li><code>charset</code>: Define el conjunto de caracteres que usar\u00e1 el documento HTML.</li> <li><code>UTF-8</code>: Es un est\u00e1ndar de codificaci\u00f3n de caracteres que soporta pr\u00e1cticamente todos los caracteres y s\u00edmbolos de todos los idiomas.</li> <li>\u00bfPara qu\u00e9 sirve?     Garantiza que los caracteres especiales (como tildes, \u00f1, caracteres chinos, \u00e1rabes, etc.) se muestren correctamente.</li> </ul> </li> <li><code>&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;</code><ul> <li><code>http-equiv</code>: Permite que la metaetiqueta act\u00fae como un encabezado HTTP.</li> <li><code>X-UA-Compatible</code>: Indica a Internet Explorer c\u00f3mo debe interpretar la p\u00e1gina.</li> <li><code>IE=edge</code>: Le dice a Internet Explorer que use la \u00faltima versi\u00f3n disponible de su motor de renderizado.</li> <li>\u00bfPara qu\u00e9 sirve?     Evita que versiones antiguas de IE usen modos de compatibilidad obsoletos, asegurando una mejor representaci\u00f3n de la p\u00e1gina.</li> </ul> </li> <li><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;</code><ul> <li><code>name=\"viewport\"</code>: Define la configuraci\u00f3n de la ventana gr\u00e1fica (viewport) para dispositivos m\u00f3viles.</li> <li><code>content</code>: Especifica c\u00f3mo debe ajustarse la p\u00e1gina en diferentes tama\u00f1os de pantalla.</li> <li><code>width=device-width</code>: Hace que el ancho del viewport sea igual al ancho del dispositivo.</li> <li><code>initial-scale=1.0</code>: Establece el nivel de zoom inicial en 1 (sin zoom por defecto).</li> <li>\u00bfPara qu\u00e9 sirve?     Hace que la p\u00e1gina sea responsive, asegurando que se vea correctamente en dispositivos m\u00f3viles y tabletas.</li> </ul> </li> </ol> <p>Importancia de las metaetiquetas</p> <p>Estas etiquetas <code>&lt;meta&gt;</code> mejoran la accesibilidad, compatibilidad y adaptaci\u00f3n de la p\u00e1gina en distintos navegadores y dispositivos. Son esenciales para cualquier p\u00e1gina web moderna.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-2-analizar-la-estructura-de-html","title":"Ejercicio 2: Analizar la estructura de HTML","text":"<p>Ejercicio</p> <ul> <li>Crea una p\u00e1gina nueva utilizando la estructura b\u00e1sica de HTML.</li> <li>Agrega un t\u00edtulo en el <code>&lt;head&gt;</code>, Mi segunda p\u00e1gina web </li> <li>Y un encabezado en el <code>&lt;body&gt;</code>, con tu nombre y la fecha.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#413-etiquetas-html-basicas","title":"4.1.3 Etiquetas HTML B\u00e1sicas","text":"<p>El lenguaje HTML utiliza etiquetas para definir la estructura y el contenido de un documento web. Viene del lenguaje de marcado SGML (Standard Generalized Markup Language). Donde todos los elementos de un documento HTML est\u00e1n rodeados por etiquetas. </p> <p>Las etiquetas se defininen con el siguiente formato: <pre><code>&lt;etiqueta&gt;Contenido&lt;/etiqueta&gt;\n</code></pre></p> <p>Donde tienes una etiqueta de apertura <code>&lt;etiqueta&gt;</code> y una de cierre <code>&lt;/etiqueta&gt;</code>. El contenido es lo que se muestra en la p\u00e1gina web (si est\u00e1 en el body). HTML5 permite que algunas etiquetas no tengan cierre, como <code>&lt;img&gt;</code> o <code>&lt;br&gt;</code>.</p> <p>Lo que s\u00ed que tenemos que tener en cuenta es que las etiquetas deben estar anidadas correctamente, es decir, no se pueden solapar. Por ejemplo, esto no ser\u00eda correcto: <pre><code>&lt;p&gt;Este es un p\u00e1rrafo &lt;b&gt;con una palabra en negrita&lt;/p&gt;&lt;/b&gt;\n</code></pre></p> <p>Anidaci\u00f3n de etiquetas</p> <p>Las etiquetas deben cerrarse en el orden inverso al que se abrieron. Por ejemplo, si abrimos una etiqueta <code>&lt;div&gt;</code> y una etiqueta <code>&lt;p&gt;</code>, debemos cerrar <code>&lt;/p&gt;</code> antes de cerrar la etiqueta <code>&lt;/div&gt;</code>.</p> <pre><code>&lt;div&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo dentro de un div.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>En la estructura b\u00e1sica ya vimos que la etiqueta <code>&lt;html&gt;</code> es el contenedor principal, y dentro de ella se encuentran <code>&lt;head&gt;</code> y <code>&lt;body&gt;</code>. Dentro de <code>&lt;head&gt;</code> se colocan metadatos y enlaces a CSS, mientras que <code>&lt;body&gt;</code> contiene el contenido visible de la p\u00e1gina. </p> <p>Hay que manejarse con cuidado: aunque hoy en d\u00eda la mayor\u00eda de editores de c\u00f3digo nos ayudan a cerrar las etiquetas autom\u00e1ticamente, y detectan errores de anidaci\u00f3n. Ten en cuenta que los navegadores tambi\u00e9n intentan corregir errores, pero es mejor evitarlos, ya que el rsultado puede ser inesperado.</p> <p>Principales etiquetas HTML:</p> <p>Encabezados</p> <p><code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>: T\u00edtulos de mayor a menor tama\u00f1o. Los encabezados son importantes para la sem\u00e1ntica de la p\u00e1gina, ya que indican la jerarqu\u00eda de la informaci\u00f3n. Es recomendable usarlos de forma coherente. Normalmente utilizamos un solo <code>&lt;h1&gt;</code> por p\u00e1gina, y luego los dem\u00e1s encabezados seg\u00fan la jerarqu\u00eda de la informaci\u00f3n.</p> <pre><code>&lt;h1&gt;Encabezado Principal&lt;/h1&gt;\n&lt;h2&gt;Subt\u00edtulo&lt;/h2&gt;\n&lt;h3&gt;Subt\u00edtulo 2&lt;/h3&gt;\n</code></pre> <p>Si vemos el ejemplo de la estructura b\u00e1sica, el t\u00edtulo de la p\u00e1gina se coloca en un <code>&lt;h1&gt;</code>, ya que es el t\u00edtulo principal de la p\u00e1gina. Lo veremos con un tama\u00f1o de letra mayor y en negrita. El resto de encabezados se utilizan para jerarquizar la informaci\u00f3n, y sevisualizar\u00e1n cada vez m\u00e1s peque\u00f1os.</p> <p>P\u00e1rrafos</p> <p><code>&lt;p&gt;</code>: P\u00e1rrafos de texto. Los p\u00e1rrafos son la forma m\u00e1s com\u00fan de mostrar texto en una p\u00e1gina web. Se utilizan para agrupar texto y darle formato.</p> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo de texto.&lt;/p&gt;\n</code></pre> <p>VSCode snippet <code>etiqueta</code></p> <p>Para crear r\u00e1pidamente una etiqueta de p\u00e1rrafo en Visual Studio Code, puedes usar el comando <code>p</code> seguido de la tecla <code>Tab</code>. <code>Pruebal\u00f3 en tu editor de c\u00f3digo.</code> - Escribe <code>p</code> y presiona la tecla <code>Tab</code>. - Se generar\u00e1 autom\u00e1ticamente la etiqueta de p\u00e1rrafo. - Esto es \u00fatil para crear r\u00e1pidamente etiquetas HTML.</p> Ejemplo de etiqueta de p\u00e1rrafo<pre><code>&lt;p&gt;&lt;/p&gt;\n</code></pre> <p>VSCode snippet <code>Lorem</code></p> <p>Si quieres escribir un p\u00e1rrafo de texto, puedes usar el comando <code>lorem</code> seguido de la tecla <code>Tab</code>, incluso si quieres indicar el n\u00famero de palabras, pueds hacerlo de la siguiente manera <code>lorem5</code>. <code>Pruebal\u00f3 en tu editor de c\u00f3digo.</code> Ejemplo de lorem ipsum<pre><code>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;\n</code></pre> Por \u00faltimo, prueba a escribir <code>p*5&gt;lorem5</code> y presiona la tecla <code>Tab</code> para ver qu\u00e9 sucede.</p> <p>Enlaces</p> <p>Se utilizan para enlazar a otras p\u00e1ginas web o a otros recursos. Se definen con la etiqueta <code>&lt;a&gt;</code> y el atributo <code>href</code> que indica la URL de destino. Las p\u00e1ginas o recursos enlazados pueden estar en la misma p\u00e1gina, en la misma web o en cualquier otro sitio de Internet.</p> <p>Los enlaces internos a la misma p\u00e1gina se utilizan para navegar por la misma p\u00e1gina o por otras p\u00e1ginas de la misma web. Se definen con la etiqueta <code>&lt;a&gt;</code> y el atributo <code>href</code> que indica la URL de destino. Un ejemplo de enlace interno ser\u00eda:</p> <pre><code>&lt;a href=\"#seccion2\"&gt;Ir a la secci\u00f3n 2&lt;/a&gt;\n</code></pre> <p>Para ello debemos haber definido un identificador en la secci\u00f3n de destino, de la siguiente manera:</p> <pre><code>&lt;h2 id=\"seccion2\"&gt;Secci\u00f3n 2&lt;/h2&gt;\n</code></pre> <p>Los enlaces internos a otras p\u00e1ginas de la misma web se utilizan para navegar por otras p\u00e1ginas de la misma web. Se definen con la etiqueta <code>&lt;a&gt;</code> y el atributo <code>href</code> que indica la URL de destino. Un ejemplo de enlace interno ser\u00eda:</p> <pre><code>&lt;a href=\"pagina2.html\"&gt;Ir a la p\u00e1gina 2&lt;/a&gt;\n</code></pre> <p>Con estos enlaces utilizaremos siempre rutas relativas, es decir, la ruta desde la p\u00e1gina actual a la p\u00e1gina de destino. Si la p\u00e1gina de destino est\u00e1 en la misma carpeta que la p\u00e1gina actual, solo necesitamos el nombre del archivo. Si est\u00e1 en una carpeta diferente, necesitamos la ruta relativa a la p\u00e1gina actual. Por ejemplo si tenemos esta estructura de web:</p> <pre><code>web/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 pagina2.html\n\u2514\u2500\u2500 carpeta/\n    \u2514\u2500\u2500 pagina3.html\n</code></pre> <p>Si de la p\u00e1gina index creamos enlaces a las p\u00e1ginas 2 y 3, ser\u00edan de la siguiente manera:</p> <pre><code>&lt;a href=\"pagina2.html\"&gt;Ir a la p\u00e1gina 2&lt;/a&gt;\n&lt;a href=\"carpeta/pagina3.html\"&gt;Ir a la p\u00e1gina 3&lt;/a&gt;\n</code></pre> <p>En el primer caso al estar en la misma p\u00e1gina no necesitamos indicar la ruta, en el segundo caso al estar en una carpeta diferente, indicamos la ruta relativa a la p\u00e1gina actual. Como es descender en una carpeta, indicamos el nombre de la carpeta y el archivo.</p> <p>En cambio de la p\u00e1gina 3 a la p\u00e1gina index, ser\u00eda de la siguiente manera:</p> <pre><code>&lt;a href=\"../index.html\"&gt;Ir a la p\u00e1gina principal&lt;/a&gt;\n</code></pre> <p>En este caso tenemos que subir un nivel, por lo que utilizamos <code>../</code> para indicar que subimos un nivel y luego indicamos el nombre del archivo.</p> <p>sobre las rutas relativas</p> <p>Es conveniente utilizar rutas relativas siempre que sea posible, ya que si cambiamos la estructura de la web, los enlaces seguir\u00e1n funcionando correctamente. Si utilizamos rutas absolutas, si cambiamos la estructura de la web, los enlaces dejar\u00e1n de funcionar. Por tanto debemos ser capaces de manejar las rutas relativas con soltura, debemos pr\u00e1cticar con ellas y estar seguros de saber movernos por la estructura de la web. Las rutas absolutas pueden dar al traste con la web si cambiamos la web de sitio, por lo que es mejor evitarlas. De esta manera nuestra web ser\u00e1 m\u00e1s robusta y f\u00e1cil de mantener.</p> <p>Los enlaces externos se utilizan para enlazar a otras p\u00e1ginas web o a otros recursos. Se definen con la etiqueta <code>&lt;a&gt;</code> y el atributo <code>href</code> que indica la URL de destino. Un ejemplo de enlace externo ser\u00eda:</p> <pre><code>&lt;a href=\"https://www.google.com\"&gt;Ir a Google&lt;/a&gt;\n</code></pre> <p>En este caso el enlace nos llevar\u00e1 a la p\u00e1gina de Google. Aqu\u00ed utilizamos una ruta absoluta, ya que no tenemos control sobre la p\u00e1gina de destino. En este caso, la ruta absoluta es la \u00fanica opci\u00f3n. A esta ruta se le denomina tambi\u00e9n FQDN (Fully Qualified Domain Name), y es \u00fanica para cada p\u00e1gina web. Puede ser un enlace a una web general como la anterior, o a una p\u00e1gina concreta de una web, como por ejemplo:</p> <p><pre><code>&lt;a href=\"https://www.ejemlo.com/documents/docs.html\"&gt;Documetaci\u00f3n&lt;/a&gt;\n</code></pre> En este caso el enlace nos llevar\u00e1 a la p\u00e1gina de documentaci\u00f3n de la web de ejemplo, pero podr\u00eda ser un recurso como una imagen, un archivo PDF, etc.</p> <p>Im\u00e1genes</p> <p>En una p\u00e1gina web, las im\u00e1genes se insertan con la etiqueta <code>&lt;img&gt;</code>. El atributo <code>src</code> indica la URL de la imagen y el atributo <code>alt</code> proporciona una descripci\u00f3n alternativa para la imagen. Hoy en d\u00eda las im\u00e1genes son votales en una p\u00e1gina web, ya que aportan informaci\u00f3n visual y atraen la atenci\u00f3n del usuario. De momento vamos a ver solo como incluir de manera sencilla una imagen en nuestra p\u00e1gina web, en m\u00f3dulos posteriores veremos c\u00f3mo trabajar con ellas.</p> <pre><code>&lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n de la imagen\"&gt;\n</code></pre> <p>El atributo <code>src</code> indica la URL de la imagen, que puede ser una ruta relativa o absoluta. Seguiremos el mismo criterio que con los enlaces, si la ruta in interna utilizaremos una ruta relativa, si es externa una ruta absoluta. El atributo <code>alt</code> proporciona una descripci\u00f3n alternativa para la imagen, que se mostrar\u00e1 si la imagen no se puede cargar o si el usuario utiliza un lector de pantalla.</p> <p>Listas</p> <p>Listas no ordenadas <code>&lt;ul&gt;</code>: Elementos sin orden espec\u00edfico. Las listas no ordenadas se utilizan para agrupar elementos sin un orden espec\u00edfico. Se definen con la etiqueta <code>&lt;ul&gt;</code> y cada elemento de la lista se define con la etiqueta <code>&lt;li&gt;</code>. Un ejemplo de lista no ordenada ser\u00eda:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n    &lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Hay que tener presente que por defecto las listas no ordenadas se muestran con vi\u00f1etas y cada elemento en una l\u00ednea diferente. Para cambiar el estilo de las vi\u00f1etas utilizamos CSS que veremos en m\u00f3dulos posteriores.</p> <p>Listas ordenadas <code>&lt;ol&gt;</code>: Elementos con un orden espec\u00edfico. Las listas ordenadas se utilizan para agrupar elementos con un orden espec\u00edfico. Se definen con la etiqueta <code>&lt;ol&gt;</code> y cada elemento de la lista se define con la etiqueta <code>&lt;li&gt;</code>. Un ejemplo de lista ordenada ser\u00eda:</p> <pre><code>&lt;ol&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n    &lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>En este caso en vez de vi\u00f1etas, se muestran los elementos con n\u00fameros, y cada elemento en una l\u00ednea diferente. Lo mismo que en el caso de las listas no ordenadas, para cambiar el estilo de los n\u00fameros utilizamos CSS.</p> <p>Tablas</p> <p>Las tablas se utilizan para mostrar datos en forma de filas y columnas. Se definen con las etiquetas <code>&lt;table&gt;</code> para la tabla en s\u00ed, <code>&lt;tr&gt;</code> para las filas y <code>&lt;td&gt;</code> para las celdas. Tambi\u00e9n se pueden utilizar las etiquetas <code>&lt;th&gt;</code> para las celdas de cabecera. Un ejemplo de tabla ser\u00eda:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Nombre&lt;/th&gt;\n        &lt;th&gt;Edad&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Javier&lt;/td&gt;\n        &lt;td&gt;30&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Mar\u00eda&lt;/td&gt;\n        &lt;td&gt;25&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>En este caso tenemos una tabla con dos filas y dos columnas, la primera fila es la cabecera de la tabla, y las siguientes filas son los datos de la tabla. Las celdas de cabecera se definen con la etiqueta <code>&lt;th&gt;</code>, y las celdas de datos con la etiqueta <code>&lt;td&gt;</code>. Las tablas son muy \u00fatiles para mostrar datos de forma ordenada y estructurada. </p> <p>Divisi\u00f3n de contenido</p> <p><code>&lt;div&gt;</code> y <code>&lt;span&gt;</code>: Contenedores gen\u00e9ricos. Las etiquetas <code>&lt;div&gt;</code> y <code>&lt;span&gt;</code> se utilizan para agrupar elementos y aplicar estilos. <code>&lt;div&gt;</code> se utiliza para agrupar elementos en bloques, mientras que <code>&lt;span&gt;</code> se utiliza para agrupar elementos en l\u00ednea. Un ejemplo de uso ser\u00eda:</p> <pre><code>&lt;div&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo dentro de un div.&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;Hay un texto encerrado ... &lt;span&gt;Este es un texto en l\u00ednea.&lt;/span&gt; en esta l\u00ednea &lt;/p&gt;\n</code></pre> <p>EL primero me permite agrupar elementos en bloques, de esta manera y como veremos m\u00e1s adelante puedo aplicar estilos a todos los elementos que est\u00e9n dentro del div.</p> <p>El segundo me permite agrupar elementos en l\u00ednea, de esta manera puedo aplicar estilos a un texto o a un enlace, por ejemplo.</p> Ejemplo de etiquetas HTML Ejemplo de etiquetas<pre><code>&lt;h1&gt;T\u00edtulo Principal&lt;/h1&gt;\n&lt;p&gt;Este es un p\u00e1rrafo de texto.&lt;/p&gt;\n&lt;a href=\"https://www.google.com\"&gt;Ir a Google&lt;/a&gt;\n&lt;img src=\"https://www.w3.org/html/logo/downloads/HTML5_Logo_512.png\" alt=\"Logo HTML5\"&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-3-crear-una-pagina-con-etiquetas-basicas","title":"Ejercicio 3: Crear una p\u00e1gina con etiquetas b\u00e1sicas","text":"<p>Ejercicio</p> <ul> <li>Crea una estructura de carpetas para un sitio web.<ul> <li>web/<ul> <li>index.html</li> <li>about.html</li> <li>contact.html</li> <li>img/<ul> <li>logo.png</li> </ul> </li> </ul> </li> </ul> </li> <li>Crea un archivo <code>index.html</code> con:<ul> <li>Un t\u00edtulo y subt\u00edtulo.</li> <li>Un p\u00e1rrafo de texto.</li> <li>Un enlace a <code>about.html</code>.</li> <li>Una imagen de <code>logo.png</code>.</li> <li>Una tabla con art\u00edculos, con 3 columnas: ID, Nombre y Precio.</li> </ul> </li> <li>Crea un archivo <code>about.html</code> con:<ul> <li>Un t\u00edtulo </li> <li>Crea dos divs con un subt\u00edtulo y un p\u00e1rrafo de texto (de m\u00e1s de 200 palabras).</li> <li>Un enlace a <code>contact.html</code>.</li> </ul> </li> <li>Crea un archivo <code>contact.html</code> con:<ul> <li>Un t\u00edtulo y subt\u00edtulo.</li> <li>Un p\u00e1rrafo de texto.</li> <li>Un enlace a <code>index.html</code>.</li> </ul> </li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#414-atributos-en-html","title":"4.1.4 Atributos en HTML","text":"<p>Los atributos en HTML proporcionan informaci\u00f3n adicional a las etiquetas.</p> <p>Ejemplos de atributos comunes:</p> <ul> <li><code>id</code> \u2192 Identificador \u00fanico.</li> <li><code>class</code> \u2192 Agrupaci\u00f3n de elementos.</li> <li><code>style</code> \u2192 Estilos en l\u00ednea.</li> <li><code>alt</code> \u2192 Descripci\u00f3n de im\u00e1genes.</li> <li><code>href</code> \u2192 URL en enlaces.</li> </ul> <p>Ejemplo de atributos en HTML</p> Uso de atributos<pre><code>&lt;p id=\"intro\"&gt;Este es un p\u00e1rrafo con un id.&lt;/p&gt;\n&lt;a href=\"https://www.example.com\" title=\"Visita el sitio\"&gt;Ir al sitio&lt;/a&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n de la imagen\"&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-4-aplicar-atributos-en-html","title":"Ejercicio 4: Aplicar atributos en HTML","text":"<p>Ejercicio</p> <ul> <li>Agrega atributo <code>id</code> los <code>divs</code> y p\u00e1rrafos del ejercicio anterior .</li> <li>Usa <code>style=\"color:red;\"</code> en un div del ejercicio anterior.</li> <li>Inserta una imagen con <code>alt</code>.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#415-formularios-en-html","title":"4.1.5 Formularios en HTML","text":"<p>Los formularios permiten la interacci\u00f3n con el usuario. En este caso vamos a hacer una presentaci\u00f3n b\u00e1sica de los formularios en HTML, ya que en m\u00f3dulos posteriores veremos c\u00f3mo trabajar con ellos de manera m\u00e1s avanzada.</p> <p>Elementos fundamentales: - <code>&lt;form&gt;</code> \u2192 Contenedor del formulario. - <code>&lt;input&gt;</code> \u2192 Campos de entrada. - <code>&lt;label&gt;</code> \u2192 Etiquetas asociadas. - <code>&lt;button&gt;</code> \u2192 Bot\u00f3n de env\u00edo. - <code>&lt;select&gt;</code> \u2192 Listas desplegables.</p> <p>Ejemplo de formulario</p> Formulario HTML<pre><code>&lt;form action=\"/submit\" method=\"post\"&gt;\n    &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-5-crear-un-formulario-basico","title":"Ejercicio 5: Crear un formulario b\u00e1sico","text":"<p>Ejercicio</p> <ul> <li>Crea un formulario con nombre, email y bot\u00f3n de env\u00edo.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#etiquetas-estructurales-en-html5","title":"Etiquetas estructurales en HTML5","text":"<p>Aqu\u00ed tienes una lista de las etiquetas estructurales m\u00e1s comunes en HTML5 (recuerda que existen m\u00e1s etiquetas, pero estas son las m\u00e1s utilizadas) no es necesario usarlas todas en todas las p\u00e1ginas, pero es importante conocerlas y saber cu\u00e1ndo utilizarlas.:</p> <ul> <li><code>&lt;header&gt;</code> \u2192 Encabezado de la p\u00e1gina.</li> <li><code>&lt;nav&gt;</code> \u2192 Navegaci\u00f3n.</li> <li><code>&lt;main&gt;</code> \u2192 Contenido principal.</li> <li><code>&lt;section&gt;</code> \u2192 Secci\u00f3n de contenido.</li> <li><code>&lt;article&gt;</code> \u2192 Art\u00edculo independiente.</li> <li><code>&lt;aside&gt;</code> \u2192 Contenido relacionado.</li> <li><code>&lt;footer&gt;</code> \u2192 Pie de p\u00e1gina.</li> </ul> <p></p> <p>Estas etiquetas estructurales son importantes para la sem\u00e1ntica de la p\u00e1gina, ya que indican la estructura y jerarqu\u00eda del contenido. Son \u00fatiles para la accesibilidad y el SEO, ya que ayudan a los motores de b\u00fasqueda a entender la estructura de la p\u00e1gina. Antiguamente se utilizaban divs para todo, pero con HTML5 se introdujeron estas etiquetas para mejorar la estructura y la accesibilidad de la p\u00e1gina.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-6-crear-una-pagina-con-etiquetas-estructurales","title":"Ejercicio 6: Crear una p\u00e1gina con etiquetas estructurales","text":"<p>Ejercicio</p> <ul> <li>Crea una p\u00e1gina con las etiquetas estructurales de HTML5.</li> <li>Utiliza todas las etiquetas del listado.</li> <li>Agrega contenido a cada secci\u00f3n.</li> <li>Visauliza la p\u00e1gina en el navegador \u00bfQu\u00e9 ocurre? </li> <li>Modifica las etiquetas estructurales por <code>divs</code> \u00bfQu\u00e9 ocurre?, \u00bfSe visualiza igual?</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_41/#ejercicio-final-construccion-de-una-pagina-completa","title":"Ejercicio Final: Construcci\u00f3n de una P\u00e1gina Completa","text":"<p>Ejercicio Final</p> <ul> <li>Crea una p\u00e1gina HTML completa que incluya:</li> <li>Un t\u00edtulo (Nombre del colegio) y subt\u00edtulo (1DAW). </li> <li>Una imagen (Imagen o logo del centro).</li> <li>Una tabla con datos, como el horario de clases del grupo de estudiantes.         - Programaci\u00f3n 8h         - Bases de Datos 5h         - Lenguaje de Marcas 3h         - Sistemas Inform\u00e1ticos 6h         - Entornos de Desarrollo 5h         - Ingl\u00e9s 3h</li> <li>Un lista con los profesores de cada asignatura.</li> <li>Un formulario (para que los alumnos puedan escribir sugerencias) con campos Nombre, apellidos, tel\u00e9fono, un \u00e1rea de texto para escribir la sugerencia y un bot\u00f3n de env\u00edo.</li> <li>Usa atributos correctamente (pon <code>id</code> a los elementos estructurales que utilices).</li> </ul> <p>Este material proporciona una base en HTML antes de comenzar con JavaScript y el DOM. En el siguiente m\u00f3dulo trabajaremos la <code>programaci\u00f3n en la parte del cliente</code> y dedicaremos m\u00e1s tiempo a la interacci\u00f3n con el usuario y la manipulaci\u00f3n del contenido de la p\u00e1gina web.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/","title":"Unidad 4.2: Introducci\u00f3n al DOM (Document Object Model)","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_42/#421-el-objeto-window-en-javascript","title":"4.2.1 El Objeto <code>window</code> en JavaScript","text":"<p>El objeto <code>window</code> representa la ventana del navegador y es el objeto global en el que se ejecuta JavaScript en el cliente.</p> <p>\ud83d\udccc Propiedades principales:</p> <ul> <li><code>window.innerWidth</code>, <code>window.innerHeight</code>: Dimensiones de la ventana.</li> <li><code>window.location</code>: Informaci\u00f3n sobre la URL actual.</li> <li><code>window.history</code>: Acceso al historial de navegaci\u00f3n.</li> </ul> <p>\ud83d\udccc M\u00e9todos \u00fatiles:</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#alertmensaje","title":"<code>alert(mensaje)</code>","text":"<p>Muestra un cuadro de alerta con un mensaje. - Par\u00e1metros:   - <code>mensaje</code> (string): Texto a mostrar en la alerta. - Valor de retorno: <code>undefined</code> (no devuelve ning\u00fan valor).</p> <p>Ejemplo pr\u00e1ctico: alert()</p> Ejemplo de alert()<pre><code>alert(\"Bienvenido al sistema\");\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#promptmensaje-valorpordefecto","title":"<code>prompt(mensaje, valorPorDefecto)</code>","text":"<p>Solicita una entrada de texto al usuario.</p> <ul> <li>Par\u00e1metros:<ul> <li><code>mensaje</code> (string): Texto de la solicitud.</li> <li><code>valorPorDefecto</code> (string, opcional): Texto inicial en el campo de entrada.</li> </ul> </li> <li>Valor de retorno: La cadena ingresada por el usuario o <code>null</code> si se cancela.</li> </ul> <p>Ejemplo pr\u00e1ctico: prompt()</p> Ejemplo de prompt()<pre><code>let nombre = prompt(\"\u00bfCu\u00e1l es tu nombre?\", \"Usuario\");\nconsole.log(\"Nombre ingresado: \" + nombre);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#confirmmensaje","title":"<code>confirm(mensaje)</code>","text":"<p>Muestra un cuadro de di\u00e1logo con opciones \"Aceptar\" o \"Cancelar\".</p> <ul> <li>Par\u00e1metros:<ul> <li><code>mensaje</code> (string): Texto del cuadro de confirmaci\u00f3n.</li> </ul> </li> <li>Valor de retorno: <code>true</code> si el usuario presiona \"Aceptar\", <code>false</code> si presiona \"Cancelar\".</li> </ul> <p>Ejemplo pr\u00e1ctico: confirm()</p> Ejemplo de confirm()<pre><code>let continuar = confirm(\"\u00bfDeseas continuar?\");\nconsole.log(\"Confirmaci\u00f3n: \" + continuar);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#settimeoutfuncion-tiempo","title":"<code>setTimeout(funci\u00f3n, tiempo)</code>","text":"<p>Ejecuta una funci\u00f3n despu\u00e9s de un tiempo espec\u00edfico.</p> <ul> <li>Par\u00e1metros:<ul> <li><code>funci\u00f3n</code> (function): Funci\u00f3n a ejecutar despu\u00e9s del tiempo.</li> <li><code>tiempo</code> (n\u00famero): Tiempo en milisegundos.</li> </ul> </li> <li>Valor de retorno: Un identificador del temporizador que puede usarse con <code>clearTimeout()</code>.</li> </ul> <p>Ejemplo pr\u00e1ctico: setTimeout()</p> Ejemplo de setTimeout()<pre><code>setTimeout(() =&gt; {\n    console.log(\"Este mensaje aparece despu\u00e9s de 3 segundos\");\n}, 3000);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#setintervalfuncion-tiempo","title":"<code>setInterval(funci\u00f3n, tiempo)</code>","text":"<p>Ejecuta repetidamente una funci\u00f3n a intervalos regulares.</p> <ul> <li>Par\u00e1metros:<ul> <li><code>funci\u00f3n</code> (function): Funci\u00f3n a ejecutar.</li> <li><code>tiempo</code> (n\u00famero): Intervalo en milisegundos.</li> </ul> </li> <li>Valor de retorno: Un identificador del temporizador que puede usarse con <code>clearInterval()</code>.</li> </ul> <p>Ejemplo pr\u00e1ctico: setInterval()</p> Ejemplo de setInterval()<pre><code>let contador = 0;\nlet intervalo = setInterval(() =&gt; {\n    contador++;\n    console.log(\"Contador: \" + contador);\n    if (contador === 5) clearInterval(intervalo);\n}, 1000);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#423-como-accede-javascript-al-dom","title":"4.2.3 C\u00f3mo accede JavaScript al DOM","text":"<p>JavaScript puede acceder y modificar el contenido de una p\u00e1gina web mediante el Document Object Model (DOM). Para ello, es importante entender c\u00f3mo se integran los scripts en una p\u00e1gina HTML.</p> <p>\ud83d\udccc M\u00e9todos para incluir JavaScript en HTML:</p> <ul> <li> <p><code>&lt;script&gt;</code> en <code>&lt;head&gt;</code>: Se ejecuta antes de que se cargue el cuerpo del documento, lo que puede generar errores si intentamos acceder a elementos a\u00fan no cargados.</p> </li> <li> <p><code>&lt;script&gt;</code> antes del cierre de <code>&lt;body&gt;</code>: Se recomienda en la mayor\u00eda de los casos, ya que garantiza que el DOM est\u00e9 completamente cargado antes de ejecutar el script.</p> </li> <li> <p>Atributos <code>defer</code> y <code>async</code> en <code>&lt;script&gt;</code>:</p> <ul> <li><code>defer</code>: El script se descarga en segundo plano y se ejecuta cuando el documento HTML ha sido completamente analizado.</li> <li><code>async</code>: El script se descarga y ejecuta de inmediato, sin esperar a que termine de cargarse el HTML, lo que puede causar problemas de sincronizaci\u00f3n.</li> </ul> </li> </ul> <p>Ejemplo de inclusi\u00f3n de JavaScript</p> Ejemplo de script en HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejemplo de script&lt;/title&gt;\n    &lt;script defer src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hola, mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Ejercicio pr\u00e1ctico <ul> <li>Crea un documento HTML</li> <li>Pon un <code>alert()</code> en el <code>&lt;head&gt;</code>, otro al final del  <code>&lt;body&gt;</code> y otro en un fichero externo.</li> <li>Comprueba el orden en que se muestran los mensajes.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#424-ejemplo-base-de-html-para-manipulacion-del-dom","title":"4.2.4 Ejemplo base de HTML para manipulaci\u00f3n del DOM","text":"<p>A lo largo de esta unidad, trabajaremos con una p\u00e1gina de ejemplo que contendr\u00e1 informaci\u00f3n sobre un empleado. Usaremos esta estructura para practicar la manipulaci\u00f3n del DOM.</p> <p>C\u00f3digo base de HTML</p> P\u00e1gina de Empleado<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Informaci\u00f3n del Empleado&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Datos del Empleado&lt;/h1&gt;\n    &lt;p&gt;&lt;strong&gt;Nombre:&lt;/strong&gt; &lt;span id=\"nombre\"&gt;Carlos P\u00e9rez&lt;/span&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;Edad:&lt;/strong&gt; &lt;span id=\"edad\"&gt;35&lt;/span&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;Puesto:&lt;/strong&gt; &lt;span id=\"puesto\"&gt;Desarrollador Web&lt;/span&gt;&lt;/p&gt;\n    &lt;button id=\"cambiar-info\"&gt;Actualizar Informaci\u00f3n&lt;/button&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Este documento <code>HTML</code> servir\u00e1 como base para los ejemplos de los siguientes puntos. Nos permitir\u00e1 practicar c\u00f3mo localizar, modificar, agregar y eliminar contenido din\u00e1micamente, adem\u00e1s de manejar eventos en el DOM.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#425-modificacion-del-contenido-de-elementos","title":"4.2.5 Modificaci\u00f3n del contenido de elementos","text":"<p>Para modificar el contenido de los elementos en el DOM, JavaScript proporciona tres propiedades principales: <code>innerText</code>, <code>textContent</code> y <code>innerHTML</code>. A continuaci\u00f3n, se explica cada una y cu\u00e1ndo utilizarlas.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#innertext","title":"<code>innerText</code>","text":"<p>Devuelve o establece el texto visible dentro de un elemento. No incluye elementos HTML ni el contenido oculto con CSS (<code>display: none</code>).</p> <p>\ud83d\udccc Uso recomendado: Cuando solo queremos obtener o modificar el texto visible del usuario.</p> <p>Ejemplo de <code>innerText</code></p> Ejemplo de innerText<pre><code>let titulo = document.getElementById(\"nombre\");\nconsole.log(titulo.innerText); // Carlos P\u00e9rez\ntitulo.innerText = \"Ana L\u00f3pez\"; // Cambia el texto visible\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#textcontent","title":"<code>textContent</code>","text":"<p>Similar a <code>innerText</code>, pero devuelve todo el texto dentro del nodo, incluyendo texto oculto con CSS.</p> <p>\ud83d\udccc Uso recomendado: Cuando se necesita obtener el contenido completo, sin importar la visibilidad del elemento.</p> <p>Ejemplo de <code>textContent</code></p> Ejemplo de textContent<pre><code>let descripcion = document.getElementById(\"puesto\");\nconsole.log(descripcion.textContent); // Desarrollador Web\ndescripcion.textContent = \"Ingeniero de Software\"; // Modifica el texto sin afectar la estructura HTML\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#innerhtml","title":"<code>innerHTML</code>","text":"<p>Permite acceder o modificar el contenido HTML dentro de un elemento. A diferencia de <code>innerText</code> y <code>textContent</code>, interpreta y procesa etiquetas HTML.</p> <p>\ud83d\udccc Uso recomendado: Cuando es necesario agregar o modificar contenido con etiquetas HTML.</p> <p>Ejemplo de <code>innerHTML</code></p> Ejemplo de innerHTML<pre><code>let contenedor = document.getElementById(\"puesto\");\ncontenedor.innerHTML = \"&lt;strong&gt;Gerente de Proyecto&lt;/strong&gt;\"; // Inserta contenido con formato HTML\n</code></pre> <p>\ud83d\udce2 Precauci\u00f3n con <code>innerHTML</code>: Si el contenido proviene de fuentes externas o de usuarios, usar <code>innerHTML</code> sin validaci\u00f3n puede generar problemas de seguridad (inyecci\u00f3n de c\u00f3digo).</p> <p>4.2.6 Ejercicio: Modificar contenido con <code>innerText</code>, <code>textContent</code> e <code>innerHTML</code></p> <p>Ejercicio: Aplicar diferentes m\u00e9todos para modificar contenido</p> <ol> <li>Crea un documento HTML que contenga tres elementos:</li> <li>Un encabezado <code>&lt;h1&gt;</code> con el id <code>titulo</code>.</li> <li>Un p\u00e1rrafo <code>&lt;p&gt;</code> con el id <code>descripcion</code>.</li> <li>Un <code>div</code> con el id <code>contenido</code>.</li> <li>Usa los siguientes m\u00e9todos para modificar cada uno:</li> <li><code>innerText</code> para cambiar el t\u00edtulo a \"Bienvenido al curso de JavaScript\".</li> <li><code>textContent</code> para cambiar el texto del p\u00e1rrafo a \"Aprender\u00e1s a modificar el DOM con JavaScript\".</li> <li><code>innerHTML</code> para agregar contenido con etiquetas HTML dentro del <code>div</code>.</li> <li>Agrega un bot\u00f3n en el HTML que, al hacer clic, ejecute los cambios.</li> </ol> Soluci\u00f3n del ejercicio Modificar contenido din\u00e1micamente<pre><code>document.getElementById(\"modificar\").addEventListener(\"click\", function() {\n    document.getElementById(\"titulo\").innerText = \"Bienvenido al curso de JavaScript\";\n    document.getElementById(\"descripcion\").textContent = \"Aprender\u00e1s a modificar el DOM con JavaScript\";\n    document.getElementById(\"contenido\").innerHTML = \"&lt;strong&gt;Contenido modificado din\u00e1micamente&lt;/strong&gt;\";\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#427-modificacion-de-atributos-y-estilos","title":"4.2.7 Modificaci\u00f3n de atributos y estilos","text":"<p>JavaScript permite modificar los atributos y estilos de los elementos del DOM de diversas maneras.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#modificar-atributos","title":"Modificar atributos","text":"<p>Estos m\u00e9todos permiten cambiar o eliminar atributos de los elementos HTML.</p> <ul> <li><code>setAttribute(atributo, valor)</code>: Establece un atributo con el valor especificado.</li> <li><code>getAttribute(atributo)</code>: Obtiene el valor de un atributo.</li> <li><code>removeAttribute(atributo)</code>: Elimina un atributo de un elemento.</li> </ul> <p>Ejemplo de modificaci\u00f3n de atributos</p> Modificar atributos de un enlace<pre><code>let enlace = document.getElementById(\"miEnlace\");\nenlace.setAttribute(\"href\", \"https://www.google.com\"); // Modifica la URL\nconsole.log(enlace.getAttribute(\"href\")); // Obtiene la URL\nenlace.removeAttribute(\"target\"); // Elimina el atributo target\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#modificar-estilos-con-javascript","title":"Modificar estilos con JavaScript","text":"<p>Podemos cambiar los estilos de los elementos con dos m\u00e9todos:</p> <ul> <li><code>.style.property</code>: Modifica un estilo individual.</li> <li><code>.classList</code>: A\u00f1ade, quita o alterna clases CSS.</li> </ul> <p>Ejemplo de modificaci\u00f3n de estilos</p> Cambiar color de fondo<pre><code>document.body.style.backgroundColor = \"lightblue\";\n</code></pre> <p>Ejemplo de modificaci\u00f3n de clases</p> Agregar y quitar clases<pre><code>let boton = document.getElementById(\"miBoton\");\nboton.classList.add(\"resaltado\"); // Agrega una clase CSS\nboton.classList.remove(\"resaltado\"); // Elimina la clase\n</code></pre> <p>Hay un m\u00e9todo adicional, <code>classList.toggle()</code>, que agrega o quita una clase seg\u00fan su presencia en el elemento. Se utiliza para alternar estilos. Por ejemplo, si una clase <code>activo</code> cambia el color de fondo, <code>classList.toggle(\"activo\")</code> cambiar\u00e1 el color al hacer clic.</p> <p>Ejemplo de <code>classList.toggle()</code></p> Alternar una clase<pre><code>&lt;style&gt;\n.activo {\n    background-color: lightblue;\n}\n&lt;/style&gt;\nlet boton = document.getElementById(\"miBoton\");\nboton.classList.toggle(\"activo\"); // Alterna la clase activo\n</code></pre> <p>Ejercicio: Modificar atributos y estilos</p> <ul> <li>Cambia el <code>src</code> de una imagen.</li> <li>Modifica el color de un bot\u00f3n al hacer clic.</li> <li>Agrega y quita clases CSS din\u00e1micamente.</li> </ul>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#428-creacion-y-eliminacion-de-elementos-en-el-dom","title":"4.2.8 Creaci\u00f3n y eliminaci\u00f3n de elementos en el DOM","text":""},{"location":"content/MF_0966_3/UF2215/unidad04_42/#crear-elementos-dinamicamente","title":"Crear elementos din\u00e1micamente","text":"<ul> <li><code>document.createElement(etiqueta)</code>: Crea un nuevo elemento.</li> <li><code>appendChild(nodo)</code>: A\u00f1ade un elemento al final de otro.</li> <li><code>insertBefore(nuevoNodo, nodoExistente)</code>: Inserta un elemento antes de otro existente.</li> </ul> <p>Ejemplo pr\u00e1ctico</p> Crear elemento<pre><code>let nuevoParrafo = document.createElement(\"p\");\nnuevoParrafo.textContent = \"Este es un nuevo elemento a\u00f1adido din\u00e1micamente.\";\ndocument.body.appendChild(nuevoParrafo);\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#eliminar-elementos","title":"Eliminar elementos","text":"<ul> <li><code>removeChild(nodo)</code>: Elimina un nodo hijo de otro nodo padre.</li> <li><code>remove()</code>: Elimina un nodo directamente.</li> </ul> <p>Ejemplo de eliminaci\u00f3n de elementos</p> Eliminar un elemento<pre><code>let elemento = document.getElementById(\"elementoAEliminar\");\nelemento.remove(); // Elimina el elemento\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#ejercicio-crear-y-eliminar-elementos","title":"Ejercicio: Crear y eliminar elementos","text":"<p>Ejercicio: Crear y eliminar elementos</p> <ol> <li>Crea una p\u00e1gina con una lista de elementos (<code>&lt;ul&gt;</code>).</li> <li>Agrega un bot\u00f3n para a\u00f1adir nuevos elementos a la lista.</li> <li>Agrega otro bot\u00f3n para eliminar el \u00faltimo elemento de la lista.</li> <li>Usa <code>appendChild()</code> y <code>removeChild()</code>.</li> </ol> HTML Base<pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;Lista Din\u00e1mica&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Lista de Elementos&lt;/h1&gt;\n        &lt;ul id=\"lista\"&gt;\n            &lt;li&gt;Elemento 1&lt;/li&gt;\n            &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;button id=\"agregar\"&gt;Agregar Elemento&lt;/button&gt;\n        &lt;button id=\"eliminar\"&gt;Eliminar \u00daltimo&lt;/button&gt;\n        &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> Soluci\u00f3n en JavaScript script.js<pre><code>    document.getElementById(\"agregar\").addEventListener(\"click\", function() {\n    let lista = document.getElementById(\"lista\");\n    let nuevoElemento = document.createElement(\"li\");\n    nuevoElemento.textContent = \"Nuevo Elemento\";\n    lista.appendChild(nuevoElemento);\n});\n\n    document.getElementById(\"eliminar\").addEventListener(\"click\", function() {\n    let lista = document.getElementById(\"lista\");\n    if (lista.children.length &gt; 0) {\n        lista.removeChild(lista.lastElementChild);\n    }\n});\n</code></pre> <p>Este ejercicio permite practicar la creaci\u00f3n y eliminaci\u00f3n de elementos din\u00e1micos en el DOM.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#429-manejo-de-eventos-en-el-dom","title":"4.2.9 Manejo de eventos en el DOM","text":"<p>Los eventos permiten interactuar con los usuarios y reaccionar a acciones como clics o movimientos del rat\u00f3n, y del teclado. JavaScript proporciona una forma sencilla de asignar eventos a los elementos del DOM.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#formas-de-asignar-eventos","title":"Formas de asignar eventos","text":"<p>Existen varias maneras de asignar eventos en JavaScript. A continuaci\u00f3n, veremos dos m\u00e9todos principales: </p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#1-asignacion-de-eventos-en-el-html-metodo-clasico","title":"1\ufe0f\u20e3 Asignaci\u00f3n de eventos en el HTML (m\u00e9todo cl\u00e1sico)","text":"<p>Este m\u00e9todo define el evento directamente en el HTML, estableciendo la funci\u00f3n a ejecutar en el atributo correspondiente.</p> <p>Ejemplo de evento en el HTML</p> Ejemplo de evento en HTML<pre><code>&lt;button onclick=\"saludar()\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n    function saludar() {\n        alert(\"\u00a1Hola, bienvenido!\");\n    }\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udccc Desventajas: - Dif\u00edcil de mantener en proyectos grandes. - No permite asignar m\u00faltiples eventos al mismo elemento f\u00e1cilmente.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#2-uso-de-addeventlistener-metodo-recomendado","title":"2\ufe0f\u20e3 Uso de <code>addEventListener()</code> (m\u00e9todo recomendado)","text":"<p>Este m\u00e9todo permite asignar eventos directamente desde JavaScript, manteniendo el c\u00f3digo HTML m\u00e1s limpio y estructurado.</p> <p>Ejemplo de <code>addEventListener()</code></p> Ejemplo de addEventListener()<pre><code>&lt;button id=\"boton\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n    document.getElementById(\"boton\").addEventListener(\"click\", function() {\n        alert(\"\u00a1Hola, bienvenido!\");\n    });\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udccc Ventajas: - Permite asignar m\u00faltiples eventos al mismo elemento. - Separa la estructura HTML de la l\u00f3gica en JavaScript.</p> <p>Para eliminar un evento asignado con <code>addEventListener()</code>, se utiliza el m\u00e9todo <code>removeEventListener()</code>. Este m\u00e9todo requiere que la funci\u00f3n de evento sea nombrada, lo que puede ser un inconveniente en algunos casos. En el ejemplo anterior:</p> Eliminar evento con removeEventListener()<pre><code>let boton = document.getElementById(\"boton\");\nlet saludar = function() {\n    alert(\"\u00a1Hola, bienvenido!\");\n};\nboton.addEventListener(\"click\", saludar);\nboton.removeEventListener(\"click\", saludar);\n</code></pre> <p>Esta funci\u00f3n devuelve <code>true</code> si se elimin\u00f3 correctamente, y <code>false</code> si el evento no estaba asignado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#eventos-mas-utilizados","title":"Eventos m\u00e1s utilizados","text":"Evento Elemento t\u00edpico Descripci\u00f3n <code>click</code> Botones, enlaces Se dispara cuando se hace clic en un elemento. <code>mouseover</code> Im\u00e1genes, enlaces Se activa cuando el rat\u00f3n pasa sobre un elemento. <code>change</code> Formularios Se activa cuando cambia el valor de un campo de entrada. <code>load</code> <code>body</code>, im\u00e1genes Se ejecuta cuando la p\u00e1gina o un recurso ha cargado completamente. <code>KeyDown</code> <code>document</code> Se activa cuando se presiona una tecla en cualquier parte del documento. <code>KeyUp</code> <code>document</code> Se dispara cuando se suelta una tecla en cualquier parte del documento. <code>keyPress</code> <code>document</code> Se activa cuando se presiona una tecla que produce un car\u00e1cter. <code>focus</code> Campos de entrada Se activa cuando un elemento recibe el foco. <code>blur</code> Campos de entrada Se dispara cuando un elemento pierde el foco. <code>submit</code> Formularios Se activa cuando se env\u00eda un formulario. <p>Podemos encontrar m\u00e1s informaci\u00f3n sobre eventos en W3Schools.</p> <p>Ahora explicamos algunos eventos comunes y su uso en JavaScript, sobre el resto profundizaremos en el siguiente m\u00f3dulo.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#el-evento-onload-y-su-uso-en-javascript","title":"El evento <code>onload</code> y su uso en JavaScript","text":"<p>El evento <code>onload</code> se ejecuta cuando el documento HTML ha sido completamente cargado. Se usa com\u00fanmente para inicializar scripts y asegurarse de que todos los elementos del DOM est\u00e1n disponibles antes de interactuar con ellos.</p> <p>Ejemplo de <code>onload</code></p> Ejemplo de onload<pre><code>&lt;body onload=\"inicializar()\"&gt;\n    &lt;h1&gt;P\u00e1gina cargada&lt;/h1&gt;\n    &lt;script&gt;\n        function inicializar() {\n            alert(\"La p\u00e1gina ha cargado correctamente.\");\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#uso-recomendado-de-domcontentloaded-en-lugar-de-onload","title":"Uso recomendado de <code>DOMContentLoaded</code> en lugar de <code>onload</code>","text":"<p>El evento <code>DOMContentLoaded</code> se dispara cuando el navegador ha terminado de analizar completamente el documento HTML, antes de que se carguen im\u00e1genes y otros recursos externos.</p> <p>\ud83d\udccc \u00bfPor qu\u00e9 es mejor <code>DOMContentLoaded</code>? - <code>onload</code> espera a que todos los recursos de la p\u00e1gina (im\u00e1genes, scripts, estilos) se hayan cargado. - <code>DOMContentLoaded</code> se activa antes, justo despu\u00e9s de que el HTML est\u00e9 listo, lo que mejora el tiempo de respuesta de los scripts. - En aplicaciones din\u00e1micas, muchas veces no es necesario esperar a la carga de im\u00e1genes o estilos para ejecutar c\u00f3digo JavaScript.</p> <p>\ud83d\udccc Recomendaci\u00f3n: En lugar de usar <code>onload</code> en el HTML, es mejor utilizar <code>DOMContentLoaded</code> en JavaScript:</p> <p>Ejemplo de <code>DOMContentLoaded</code></p> DOMContentLoaded<pre><code>document.addEventListener(\"DOMContentLoaded\", function() {\n    alert(\"El DOM est\u00e1 completamente cargado y listo para su manipulaci\u00f3n\");\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#ejercicio-manejo-de-eventos","title":"Ejercicio: Manejo de eventos","text":"<p>Ejercicio: Manejo de eventos</p> <ol> <li>Crea una p\u00e1gina con un campo de entrada de texto y un bot\u00f3n.</li> <li>Al presionar el bot\u00f3n, muestra en un <code>div</code> el contenido del campo de entrada.</li> <li>Implementa un evento <code>mouseover</code> en un <code>div</code> para cambiar su color al pasar el cursor.</li> <li>Agrega un evento <code>keydown</code> para detectar cuando el usuario escribe.</li> </ol> <p>\ud83d\udccc C\u00f3digo base HTML:</p> <p>HTML Base para el ejercicio</p> HTML Base<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Eventos en el DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Interacci\u00f3n con Eventos&lt;/h1&gt;\n    &lt;input type=\"text\" id=\"entrada\" placeholder=\"Escribe algo...\"&gt;\n    &lt;button id=\"mostrar\"&gt;Mostrar&lt;/button&gt;\n    &lt;div id=\"resultado\" style=\"margin-top: 20px; padding: 10px; border: 1px solid black;\"&gt;Aqu\u00ed aparecer\u00e1 el texto&lt;/div&gt;\n    &lt;div id=\"caja\" style=\"width: 100px; height: 100px; background-color: lightblue; margin-top: 20px;\"&gt;&lt;/div&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Soluci\u00f3n en JavaScript script.js<pre><code>document.getElementById(\"mostrar\").addEventListener(\"click\", function() {\n    let texto = document.getElementById(\"entrada\").value;\n    document.getElementById(\"resultado\").textContent = texto;\n});\n\ndocument.getElementById(\"caja\").addEventListener(\"mouseover\", function() {\n    this.style.backgroundColor = \"yellow\";\n});\n\ndocument.getElementById(\"caja\").addEventListener(\"mouseout\", function() {\n    this.style.backgroundColor = \"lightblue\";\n});\n\ndocument.getElementById(\"entrada\").addEventListener(\"keydown\", function(event) {\n    console.log(\"Tecla presionada: \" + event.key);\n});\n</code></pre> Soluci\u00f3n cl\u00e1sica sin <code>addEventListener()</code> Soluci\u00f3n sin addEventListener<pre><code>window.onload = function() {\n    let boton = document.getElementById(\"mostrar\");\n    boton.onclick = function() {\n        let texto = document.getElementById(\"entrada\").value;\n        document.getElementById(\"resultado\").textContent = texto;\n    };\n\n    let caja = document.getElementById(\"caja\");\n    caja.onmouseover = function() {\n        caja.style.backgroundColor = \"yellow\";\n    };\n    caja.onmouseout = function() {\n        caja.style.backgroundColor = \"lightblue\";\n    };\n\n    document.getElementById(\"entrada\").onkeydown = function(event) {\n        console.log(\"Tecla presionada: \" + event.key);\n    };\n};\n</code></pre> <p>Este ejercicio permite practicar la interacci\u00f3n con eventos en el DOM, incluyendo clics, movimiento del rat\u00f3n y pulsaciones de teclado.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#4211-ejercicio-guiado-seleccion-de-comunidad-y-ciudad","title":"4.2.11 Ejercicio guiado: Selecci\u00f3n de Comunidad y Ciudad","text":"<p>En este ejercicio, construiremos un formulario din\u00e1mico en el que los usuarios seleccionar\u00e1n una Comunidad Aut\u00f3noma y, en funci\u00f3n de su selecci\u00f3n, podr\u00e1n elegir una ciudad dentro de esa comunidad. Adem\u00e1s, el bot\u00f3n de env\u00edo solo estar\u00e1 habilitado cuando ambas selecciones sean v\u00e1lidas.</p> <p>\ud83d\udccc Objetivos del ejercicio</p> <ol> <li>Al cargar la p\u00e1gina, los selectores estar\u00e1n vac\u00edos con la opci\u00f3n <code>Seleccione una comunidad</code> y <code>Seleccione una ciudad</code>.</li> <li>El selector de ciudad estar\u00e1 deshabilitado hasta que el usuario seleccione una comunidad.</li> <li>Al elegir una comunidad, el selector de ciudad se llenar\u00e1 con las capitales de provincia correspondientes.</li> <li>Si se cambia la comunidad seleccionada, la lista de ciudades se actualizar\u00e1 y se deseleccionar\u00e1 la opci\u00f3n anterior.</li> <li>El bot\u00f3n \"Enviar\" solo se activar\u00e1 cuando haya una comunidad y ciudad seleccionada.</li> <li>Al presionar el bot\u00f3n \"Enviar\", se mostrar\u00e1 un mensaje con la comunidad y la ciudad seleccionada y el formulario se reiniciar\u00e1.</li> </ol> <p>C\u00f3digo base del HTML</p> <p>HTML Base para el ejercicio</p> HTML Base<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Selecci\u00f3n de Comunidad y Ciudad&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Formulario de Selecci\u00f3n&lt;/h1&gt;\n    &lt;label for=\"comunidad\"&gt;Comunidad Aut\u00f3noma:&lt;/label&gt;\n    &lt;select id=\"comunidad\"&gt;\n        &lt;option value=\"\"&gt;Seleccione una comunidad&lt;/option&gt;\n    &lt;/select&gt; \n    &lt;label for=\"ciudad\"&gt;Ciudad:&lt;/label&gt;\n    &lt;select id=\"ciudad\" disabled&gt;\n        &lt;option value=\"\"&gt;Seleccione una ciudad&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;button id=\"enviar\" disabled&gt;Enviar&lt;/button&gt;\n    &lt;script src=\"formulario.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>C\u00f3digo en JavaScript (formulario.js)</p> Soluci\u00f3n en JavaScript formulario.js<pre><code>document.addEventListener(\"DOMContentLoaded\", function() {\n    // JSON con las comunidades y sus capitales\n    const comunidades = {\n        \"Valenciana\": [\"Alicante\", \"Castell\u00f3n\", \"Valencia\"],\n        \"Catalana\": [\"Barcelona\", \"Gerona\", \"L\u00e9rida\", \"Tarragona\"],\n        \"Madrile\u00f1a\": [\"Madrid\"],\n        \"Andaluza\": [\"Almer\u00eda\", \"C\u00e1diz\", \"C\u00f3rdoba\", \"Granada\", \"Huelva\", \"Ja\u00e9n\", \"M\u00e1laga\", \"Sevilla\"]\n    };\n\n    let comunidadSelect = document.getElementById(\"comunidad\");\n    let ciudadSelect = document.getElementById(\"ciudad\");\n    let enviarBtn = document.getElementById(\"enviar\");\n\n    // Llenar el selector de comunidades\n    for (let comunidad in comunidades) {\n        let option = document.createElement(\"option\");\n        option.value = comunidad;\n        option.textContent = comunidad;\n        comunidadSelect.appendChild(option);\n    }\n\n    // Evento para actualizar ciudades al seleccionar comunidad\n    comunidadSelect.addEventListener(\"change\", function() {\n        ciudadSelect.innerHTML = \"&lt;option value=''&gt;Seleccione una ciudad&lt;/option&gt;\";\n        ciudadSelect.disabled = true;\n        enviarBtn.disabled = true;\n\n        let comunidadSeleccionada = comunidadSelect.value;\n        if (comunidadSeleccionada) {\n            ciudadSelect.disabled = false;\n            comunidades[comunidadSeleccionada].forEach(ciudad =&gt; {\n                let option = document.createElement(\"option\");\n                option.value = ciudad;\n                option.textContent = ciudad;\n                ciudadSelect.appendChild(option);\n            });\n        }\n    });\n\n    // Evento para activar el bot\u00f3n cuando se seleccione una ciudad\n    ciudadSelect.addEventListener(\"change\", function() {\n        enviarBtn.disabled = !ciudadSelect.value;\n    });\n\n    // Evento para mostrar alerta y reiniciar formulario al enviar\n    enviarBtn.addEventListener(\"click\", function() {\n        alert(`Comunidad: ${comunidadSelect.value}\\nCiudad: ${ciudadSelect.value}`);\n        comunidadSelect.value = \"\";\n        ciudadSelect.innerHTML = \"&lt;option value=''&gt;Seleccione una ciudad&lt;/option&gt;\";\n        ciudadSelect.disabled = true;\n        enviarBtn.disabled = true;\n    });\n});\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#ejercicio-adicional","title":"\ud83d\udccc Ejercicio adicional","text":"<p>Ejercicio adicional: Agregar y eliminar ciudades</p> <ul> <li>Ampliaci\u00f3n del ejercicio:<ul> <li>A\u00f1adir un formulario donde el usuario pueda agregar nuevas ciudades a una comunidad existente.</li> <li>Implementar un bot\u00f3n \"Eliminar\" que permita quitar una ciudad seleccionada.</li> <li>Al eliminar una ciudad, actualizar la lista de manera din\u00e1mica.</li> </ul> </li> </ul> <p>Con este ejercicio, los alumnos practicar\u00e1n el uso de eventos, manipulaci\u00f3n din\u00e1mica del DOM, deshabilitaci\u00f3n de elementos y gesti\u00f3n de selectores en JavaScript. </p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#4211-integracion-con-el-servicio-rest-de-ciudades","title":"4.2.11 Integraci\u00f3n con el servicio REST de ciudades","text":"<p>En la Unidad 3.4 creamos un peque\u00f1o servicio REST que permit\u00eda recuperar una lista de ciudades o los datos de una ciudad en particular. Ahora vamos a integrarlo en una p\u00e1gina web utilizando JavaScript y el DOM.</p> <p>\ud83d\udccc Objetivo del ejercicio: 1. Crear una p\u00e1gina web que cargue la lista de ciudades desde el servicio REST y la muestre en una tabla. 2. Cada ciudad tendr\u00e1 un bot\u00f3n en su c\u00f3digo que, al hacer clic, mostrar\u00e1 los detalles de la ciudad en una ventana emergente (<code>prompt</code>). 3. Como mejora opcional, el alumno deber\u00e1 permitir a\u00f1adir y eliminar ciudades mediante un formulario din\u00e1mico.</p> <p>\ud83d\udccc C\u00f3digo base HTML:</p> <p>HTML Base para el ejercicio</p> HTML Base<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Lista de Ciudades&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ciudades Disponibles&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;C\u00f3digo&lt;/th&gt;\n                &lt;th&gt;Nombre&lt;/th&gt;\n                &lt;th&gt;Poblaci\u00f3n&lt;/th&gt;\n                &lt;th&gt;Acciones&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody id=\"ciudades-lista\"&gt;\n            &lt;!-- Aqu\u00ed se cargar\u00e1n las ciudades din\u00e1micamente --&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;script src=\"ciudades.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83d\udccc Soluci\u00f3n en JavaScript:</p> Soluci\u00f3n en JavaScript ciudades.js<pre><code>document.addEventListener(\"DOMContentLoaded\", function() {\n    fetch(\"http://localhost:3000/ciudades\") // URL del servicio REST\n        .then(response =&gt; response.json())\n        .then(ciudades =&gt; {\n            let tabla = document.getElementById(\"ciudades-lista\");\n            ciudades.forEach(ciudad =&gt; {\n                let fila = document.createElement(\"tr\");\n                fila.innerHTML = `\n                    &lt;td&gt;${ciudad.codigo}&lt;/td&gt;\n                    &lt;td&gt;${ciudad.nombre}&lt;/td&gt;\n                    &lt;td&gt;${ciudad.poblacion}&lt;/td&gt;\n                    &lt;td&gt;&lt;button onclick=\"verCiudad(${ciudad.codigo})\"&gt;Ver&lt;/button&gt;&lt;/td&gt;\n                `;\n                tabla.appendChild(fila);\n            });\n        })\n        .catch(error =&gt; console.error(\"Error al cargar ciudades:\", error));\n});\n\nfunction verCiudad(codigo) {\n    fetch(`http://localhost:3000/ciudades/${codigo}`)\n        .then(response =&gt; response.json())\n        .then(ciudad =&gt; {\n            alert(`C\u00f3digo: ${ciudad.codigo}\\nNombre: ${ciudad.nombre}\\nPoblaci\u00f3n: ${ciudad.poblacion}`);\n        })\n        .catch(error =&gt; console.error(\"Error al obtener datos de la ciudad:\", error));\n}\n</code></pre> <p>Ejercicio propuesto:</p> <p>Ejercicio: A\u00f1adir y eliminar ciudades</p> <ul> <li>A\u00f1adir ciudad: Modifica el c\u00f3digo para incluir un formulario con <code>input</code> para ingresar una nueva ciudad y un bot\u00f3n \"Agregar\".</li> <li>Eliminar ciudad: Agrega un bot\u00f3n \"Eliminar\" en cada fila de la tabla, que permita eliminar una ciudad de la lista y de la base de datos utilizando <code>fetch()</code> con <code>DELETE</code>.</li> </ul> <p>Con este ejercicio, los alumnos aprender\u00e1n a cargar datos desde una API REST, modificar din\u00e1micamente el DOM, y agregar funcionalidades interactivas a una p\u00e1gina web. \ud83d\ude80</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#4212-ejercicios-practicos","title":"4.2.12 Ejercicios pr\u00e1cticos","text":"<p>A continuaci\u00f3n, se presentan una serie de ejercicios para reforzar los conocimientos adquiridos sobre HTML, manipulaci\u00f3n del DOM y eventos.</p>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#ejercicios-de-html","title":"Ejercicios de HTML","text":"<p>Ejercicio 1: Crear una lista ordenada</p> <ul> <li>Crea un documento HTML con una lista ordenada de 5 elementos.</li> <li>Agrega una etiqueta <code>&lt;h2&gt;</code> con un t\u00edtulo descriptivo.</li> </ul> Soluci\u00f3n Lista ordenada<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;&lt;title&gt;Lista Ordenada&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Lista de Compras&lt;/h2&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Manzanas&lt;/li&gt;\n        &lt;li&gt;Pl\u00e1tanos&lt;/li&gt;\n        &lt;li&gt;Leche&lt;/li&gt;\n        &lt;li&gt;Pan&lt;/li&gt;\n        &lt;li&gt;Huevos&lt;/li&gt;\n    &lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ejercicio 2: Crear una tabla b\u00e1sica</p> <ul> <li>Construye una tabla HTML con 3 columnas (<code>Nombre</code>, <code>Edad</code>, <code>Ciudad</code>) y 4 filas.</li> <li>A\u00f1ade un encabezado (<code>&lt;thead&gt;</code>) y un cuerpo (<code>&lt;tbody&gt;</code>).</li> </ul> Soluci\u00f3n Tabla b\u00e1sica<pre><code>&lt;table border=\"1\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Nombre&lt;/th&gt;\n            &lt;th&gt;Edad&lt;/th&gt;\n            &lt;th&gt;Ciudad&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Ana&lt;/td&gt;\n            &lt;td&gt;30&lt;/td&gt;\n            &lt;td&gt;Madrid&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Pedro&lt;/td&gt;\n            &lt;td&gt;25&lt;/td&gt;\n            &lt;td&gt;Barcelona&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Mar\u00eda&lt;/td&gt;\n            &lt;td&gt;35&lt;/td&gt;\n            &lt;td&gt;Sevilla&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Ejercicio 3: Crear un formulario de contacto</p> <ul> <li>Dise\u00f1a un formulario HTML con los siguientes campos:</li> <li>Nombre (campo de texto)</li> <li>Correo electr\u00f3nico (campo de email)</li> <li>Mensaje (\u00e1rea de texto)</li> <li>Bot\u00f3n de env\u00edo</li> <li>Usa etiquetas <code>&lt;label&gt;</code> para cada campo.</li> </ul> Soluci\u00f3n Formulario de contacto<pre><code>&lt;form&gt;\n    &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"email\"&gt;Correo electr\u00f3nico:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;\n    &lt;textarea id=\"mensaje\" name=\"mensaje\"&gt;&lt;/textarea&gt;\n    &lt;br&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Ejercicio 4: Crear un formulario de registro</p> <ul> <li>Crea un formulario con:</li> <li>Nombre de usuario (campo de texto)</li> <li>Contrase\u00f1a (campo de password)</li> <li>Selector de pa\u00eds (<code>&lt;select&gt;</code>) con al menos 5 opciones</li> <li>Bot\u00f3n de registro</li> </ul> Soluci\u00f3n <p>```html linenums=\"1\" title=\"Formulario de registro\"  Usuario: Contrase\u00f1a: Pa\u00eds: Espa\u00f1a Argentina M\u00e9xico Chile Colombia Registrar </p> <p>```</p> <p>Ejercicio 5: Crear un formulario con radio buttons y checkboxes</p> <ul> <li>Dise\u00f1a un formulario con:</li> <li>Selecci\u00f3n de g\u00e9nero (<code>Masculino</code>, <code>Femenino</code>, <code>Otro</code>) usando radio buttons.</li> <li>Una lista de intereses con checkboxes (<code>M\u00fasica</code>, <code>Deportes</code>, <code>Cine</code>).</li> <li>Un bot\u00f3n de env\u00edo.</li> </ul> Soluci\u00f3n Formulario con radio buttons y checkboxes<pre><code>&lt;form&gt;\n    &lt;label&gt;G\u00e9nero:&lt;/label&gt;\n    &lt;input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\"&gt;\n    &lt;label for=\"masculino\"&gt;Masculino&lt;/label&gt;\n    &lt;input type=\"radio\" id=\"femenino\" name=\"genero\" value=\"femenino\"&gt;\n    &lt;label for=\"femenino\"&gt;Femenino&lt;/label&gt;\n    &lt;input type=\"radio\" id=\"otro\" name=\"genero\" value=\"otro\"&gt;\n    &lt;label for=\"otro\"&gt;Otro&lt;/label&gt;\n    &lt;br&gt;\n    &lt;label&gt;Intereses:&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"musica\" name=\"intereses\" value=\"musica\"&gt;\n    &lt;label for=\"musica\"&gt;M\u00fasica&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"deportes\" name=\"intereses\" value=\"deportes\"&gt;\n    &lt;label for=\"deportes\"&gt;Deportes&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"cine\" name=\"intereses\" value=\"cine\"&gt;\n    &lt;label for=\"cine\"&gt;Cine&lt;/label&gt;\n    &lt;br&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"content/MF_0966_3/UF2215/unidad04_42/#ejercicios-con-javascript-y-dom","title":"Ejercicios con JavaScript y DOM","text":"<p>Ejercicio 6: A\u00f1adir elementos din\u00e1micamente a una lista</p> <ul> <li>Modifica el Ejercicio 1 agregando un campo de entrada y un bot\u00f3n.</li> <li>Al hacer clic en el bot\u00f3n, el nuevo elemento se a\u00f1adir\u00e1 a la lista.</li> </ul> Soluci\u00f3n A\u00f1adir elementos din\u00e1micamente<pre><code>document.getElementById(\"agregar\").addEventListener(\"click\", function() {\n    let lista = document.getElementById(\"miLista\");\n    let nuevoElemento = document.createElement(\"li\");\n    nuevoElemento.textContent = document.getElementById(\"nuevoItem\").value;\n    lista.appendChild(nuevoElemento);\n});\n</code></pre> <p>Ejercicio 7: Modificar din\u00e1micamente una tabla</p> <ul> <li>Basado en el Ejercicio 2, crea un formulario con los mismos campos.</li> <li>Al completar el formulario y presionar el bot\u00f3n \"Agregar\", se a\u00f1adir\u00e1 una nueva fila a la tabla.</li> </ul> Soluci\u00f3n Modificar tabla din\u00e1micamente<pre><code>document.getElementById(\"agregar\").addEventListener(\"click\", function() {\n    let tabla = document.getElementById(\"miTabla\");\n    let nuevaFila = tabla.insertRow(-1);\n    let celda1 = nuevaFila.insertCell(0);\n    let celda2 = nuevaFila.insertCell(1);\n    let celda3 = nuevaFila.insertCell(2);\n    celda1.textContent = document.getElementById(\"nombre\").value;\n    celda2.textContent = document.getElementById(\"edad\").value;\n    celda3.textContent = document.getElementById(\"ciudad\").value;\n});\n</code></pre> <p>Ejercicio 8: Validaci\u00f3n de un formulario</p> <ul> <li>Modifica el Ejercicio 3 para validar que:<ul> <li>El campo de nombre no est\u00e9 vac\u00edo.</li> <li>El correo sea v\u00e1lido.</li> <li>El mensaje tenga al menos 10 caracteres.</li> </ul> </li> <li>Si hay errores, mostrar un mensaje en pantalla.</li> </ul> Soluci\u00f3n Validaci\u00f3n de formulario<pre><code>document.getElementById(\"enviar\").addEventListener(\"click\", function(event) {\n    let nombre = document.getElementById(\"nombre\").value;\n    let email = document.getElementById(\"email\").value;\n    let mensaje = document.getElementById(\"mensaje\").value;\n    if (nombre === \"\" || email === \"\" || mensaje.length &lt; 10) {\n        alert(\"Por favor, complete todos los campos correctamente.\");\n        event.preventDefault();\n    }\n});\n</code></pre> <p>Ejercicio 9: Manejo de eventos del teclado y rat\u00f3n</p> <ul> <li>Modifica el Ejercicio 4:</li> <li>Cuando el usuario presione una tecla en el campo de contrase\u00f1a, se mostrar\u00e1 la cantidad de caracteres ingresados.</li> <li>Al pasar el rat\u00f3n sobre el bot\u00f3n de registro, cambiar\u00e1 de color.</li> </ul> Soluci\u00f3n Eventos de teclado y rat\u00f3n<pre><code>document.getElementById(\"password\").addEventListener(\"keydown\", function() {\n    let longitud = document.getElementById(\"password\").value.length;\n    alert(`Caracteres ingresados: ${longitud}`);\n});\n\ndocument.getElementById(\"registrar\").addEventListener(\"mouseover\", function() {\n    this.style.backgroundColor = \"lightblue\";\n});\n</code></pre> <p>Ejercicio 10: Modificaci\u00f3n de atributos y clases din\u00e1micamente</p> <ul> <li>Agrega estilos CSS al formulario del Ejercicio 5.</li> <li>Crea un bot\u00f3n \"Activar Modo Oscuro\" que, al hacer clic, cambie la apariencia de la p\u00e1gina usando <code>classList.toggle()</code>.</li> </ul> Soluci\u00f3n Modificaci\u00f3n de atributos y clases<pre><code>document.getElementById(\"modoOscuro\").addEventListener(\"click\", function() {\n    document.body.classList.toggle(\"dark-mode\");\n});\n</code></pre> <p>Estos ejercicios ayudar\u00e1n a los alumnos a practicar la estructura HTML, la manipulaci\u00f3n del DOM y el uso de eventos en JavaScript. </p>"},{"location":"content/MF_0967_3/","title":"\u00cdndice del M\u00f3dulo MF0967_3: Desarrollo de Aplicaciones Web","text":"<p>Este m\u00f3dulo est\u00e1 dividido en tres unidades formativas, enfocadas en la programaci\u00f3n del cliente, el desarrollo del backend y el dise\u00f1o de interfaces web.</p>"},{"location":"content/MF_0967_3/#uf2216-desarrollo-de-aplicaciones-en-el-entorno-cliente-50h","title":"\ud83d\udccc UF2216 - Desarrollo de Aplicaciones en el Entorno Cliente (50h)","text":""},{"location":"content/MF_0967_3/#subtemas","title":"\ud83d\udccd Subtemas","text":"<ol> <li>Fundamentos avanzados de JavaScript </li> <li>Diferencias entre <code>var</code>, <code>let</code> y <code>const</code>.</li> <li>Funciones de flecha, destructuraci\u00f3n y spread/rest.</li> <li>Modularizaci\u00f3n con <code>import/export</code>.</li> <li> <p>Uso del <code>this</code> y scope en funciones.</p> </li> <li> <p>Manipulaci\u00f3n avanzada del DOM </p> </li> <li>Delegaci\u00f3n de eventos.</li> <li><code>MutationObserver</code>: Detecci\u00f3n de cambios en el DOM.</li> <li> <p>Uso de plantillas HTML din\u00e1micas.</p> </li> <li> <p>Trabajo con APIs y datos externos </p> </li> <li>Introducci\u00f3n a <code>fetch()</code> y consumo de APIs REST.</li> <li>Uso de JSON y promesas en el frontend.</li> <li> <p>Manejo de errores y respuestas de APIs.</p> </li> <li> <p>Almacenamiento de datos en el cliente </p> </li> <li><code>localStorage</code> y <code>sessionStorage</code>.</li> <li> <p>Uso de IndexedDB para almacenamiento avanzado.</p> </li> <li> <p>Manejo de formularios y validaciones en el cliente </p> </li> <li>Validaciones con JavaScript y RegExp.</li> <li> <p>Manejo de eventos en formularios (<code>change</code>, <code>blur</code>, <code>submit</code>).</p> </li> <li> <p>Gesti\u00f3n de estado en el cliente </p> </li> <li>Uso de <code>event-driven programming</code> en el frontend.</li> <li> <p>Flujo de datos entre distintos componentes.</p> </li> <li> <p>Integraci\u00f3n con Bootstrap y UI din\u00e1mica </p> </li> <li>Uso de modales, pop-ups y alertas din\u00e1micas.</li> <li>Componentes avanzados en Bootstrap (carouseles, tooltips).</li> </ol>"},{"location":"content/MF_0967_3/#uf2217-desarrollo-de-aplicaciones-en-el-entorno-servidor-80h","title":"\ud83d\udccc UF2217 - Desarrollo de Aplicaciones en el Entorno Servidor (80h)","text":""},{"location":"content/MF_0967_3/#subtemas_1","title":"\ud83d\udccd Subtemas","text":"<ol> <li>Introducci\u00f3n a PHP </li> <li>Sintaxis b\u00e1sica y buenas pr\u00e1cticas.</li> <li>Manejo de datos y funciones.</li> <li> <p>Manejo de sesiones y cookies en PHP.</p> </li> <li> <p>Bases de datos y conexi\u00f3n con MySQL </p> </li> <li>Uso de PDO y MySQLi.</li> <li> <p>Operaciones CRUD en la base de datos.</p> </li> <li> <p>Introducci\u00f3n a Laravel </p> </li> <li>Instalaci\u00f3n y configuraci\u00f3n del entorno.</li> <li> <p>Estructura del framework (MVC).</p> </li> <li> <p>Definici\u00f3n de rutas y controladores en Laravel </p> </li> <li>Creaci\u00f3n de rutas y vistas con Blade.</li> <li> <p>Middleware y seguridad en Laravel.</p> </li> <li> <p>Manejo de bases de datos con Eloquent ORM </p> </li> <li>Migraciones y modelos en Laravel.</li> <li> <p>Relaciones entre tablas (uno a muchos, muchos a muchos).</p> </li> <li> <p>Autenticaci\u00f3n y gesti\u00f3n de usuarios en Laravel </p> </li> <li>Registro y login con el sistema de autenticaci\u00f3n integrado.</li> <li> <p>Roles y permisos en Laravel.</p> </li> <li> <p>Creaci\u00f3n de API REST en Laravel </p> </li> <li>Endpoints para CRUD de empleados.</li> <li>Protecci\u00f3n de rutas con autenticaci\u00f3n JWT.</li> </ol>"},{"location":"content/MF_0967_3/#uf2218-diseno-de-interfaces-web-40h","title":"\ud83d\udccc UF2218 - Dise\u00f1o de Interfaces Web (40h)","text":""},{"location":"content/MF_0967_3/#subtemas_2","title":"\ud83d\udccd Subtemas","text":"<ol> <li>Fundamentos de CSS3 </li> <li>Uso de Flexbox y Grid.</li> <li> <p>Media queries y dise\u00f1o responsivo.</p> </li> <li> <p>Frameworks de dise\u00f1o: Bootstrap </p> </li> <li>Uso de la rejilla de Bootstrap.</li> <li> <p>Componentes b\u00e1sicos y avanzados.</p> </li> <li> <p>Personalizaci\u00f3n del dise\u00f1o con SASS </p> </li> <li> <p>Creaci\u00f3n de variables, mixins y anidamiento.</p> </li> <li> <p>Dise\u00f1o UI/UX </p> </li> <li>Principios de dise\u00f1o accesible.</li> <li> <p>Uso de iconos y fuentes personalizadas.</p> </li> <li> <p>Optimizaci\u00f3n y buenas pr\u00e1cticas en dise\u00f1o </p> </li> <li>T\u00e9cnicas de carga r\u00e1pida.</li> <li>SEO y buenas pr\u00e1cticas en HTML.</li> </ol>"},{"location":"content/MF_0967_3/#organizacion-de-archivos-del-modulo","title":"\ud83d\udccc Organizaci\u00f3n de archivos del m\u00f3dulo","text":"<p>Para organizar el contenido en archivos <code>.md</code>, se propone la siguiente estructura:</p> <pre><code>\ud83d\udcc1 mf0967_3/\n\u2502\u2500\u2500 \ud83d\udcc1 uf2216_cliente/\n\u2502     \u251c\u2500\u2500 01_fundamentos_js.md\n\u2502     \u251c\u2500\u2500 02_manipulacion_dom.md\n\u2502     \u251c\u2500\u2500 03_trabajo_apis.md\n\u2502     \u251c\u2500\u2500 04_almacenamiento_cliente.md\n\u2502     \u251c\u2500\u2500 05_validaciones.md\n\u2502\u2500\u2500 \ud83d\udcc1 uf2217_servidor/\n\u2502     \u251c\u2500\u2500 01_introduccion_php.md\n\u2502     \u251c\u2500\u2500 02_bases_datos_php.md\n\u2502     \u251c\u2500\u2500 03_laravel_basico.md\n\u2502     \u251c\u2500\u2500 04_autenticacion.md\n\u2502\u2500\u2500 \ud83d\udcc1 uf2218_interfaces/\n\u2502     \u251c\u2500\u2500 01_css_fundamentos.md\n\u2502     \u251c\u2500\u2500 02_bootstrap.md\n\u2502     \u251c\u2500\u2500 03_dise\u00f1o_ui_ux.md\n\u2502\u2500\u2500 index.md  (Resumen del m\u00f3dulo)\n</code></pre>"},{"location":"content/MF_0967_3/#proyecto-final-web-empresarial-completa","title":"\ud83d\udccc Proyecto Final: Web Empresarial Completa","text":"<p>\ud83d\udccc Objetivo: Integrar todo lo aprendido en un proyecto realista. - Creaci\u00f3n de un sistema login/register con Laravel. - Dise\u00f1o de una interfaz web moderna con Bootstrap. - Gesti\u00f3n de usuarios y empleados con CRUD en frontend y backend. - Validaciones en frontend y backend.</p> <p>Esta estructura garantiza una ense\u00f1anza progresiva y enfocada en el desarrollo de una aplicaci\u00f3n web completa. \ud83d\ude80</p>"},{"location":"content/MF_0967_3/UF2216/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0967_3/UF2217/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0967_3/UF2218/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0967_3/UF2218/unidad01/","title":"Introducci\u00f3n al Dise\u00f1o Web","text":"<p>Antes de sumergirnos en el mundo de CSS, es fundamental que los alumnos comprendan los principios b\u00e1sicos que rigen el dise\u00f1o web y c\u00f3mo estos principios impactan la experiencia del usuario. En esta secci\u00f3n abordaremos los aspectos generales del dise\u00f1o, la psicolog\u00eda del color, la tipograf\u00eda, y c\u00f3mo estructuramos las p\u00e1ginas web de forma efectiva.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#1-como-percibe-el-usuario-el-diseno-web","title":"1. \u00bfC\u00f3mo percibe el usuario el dise\u00f1o web?","text":"<p>El dise\u00f1o de una p\u00e1gina web no es solo est\u00e9ticamente atractivo, sino que tambi\u00e9n juega un papel crucial en la experiencia del usuario. Los usuarios suelen tomar decisiones r\u00e1pidas sobre la usabilidad de un sitio web en los primeros segundos de interacci\u00f3n.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#11-principios-de-la-psicologia-de-la-gestalt-aplicados-al-diseno-web","title":"1.1 Principios de la psicolog\u00eda de la Gestalt aplicados al dise\u00f1o web","text":"<p>La psicolog\u00eda de la Gestalt estudia c\u00f3mo los humanos organizan visualmente los elementos que perciben. Los principios b\u00e1sicos de esta teor\u00eda aplicados al dise\u00f1o web son:</p> <ul> <li>Proximidad: Elementos cercanos entre s\u00ed se perciben como relacionados.</li> <li>Similitud: Elementos con caracter\u00edsticas similares (color, forma, tama\u00f1o) se agrupan.</li> <li>Cierre: Tendemos a completar formas incompletas visualmente (por ejemplo, c\u00edrculos o cuadrados).</li> <li>Figura y fondo: La forma principal es percibida como figura, mientras que el fondo es secundario.</li> </ul> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#12-la-importancia-de-la-estructura-visual","title":"1.2 La importancia de la estructura visual","text":"<p>El dise\u00f1o de la interfaz no solo depende de lo que se ve, sino tambi\u00e9n de c\u00f3mo se organiza. Una correcta estructura facilita que los usuarios encuentren lo que necesitan. Principales componentes de la interfaz:  </p> <ul> <li>Cabecera: Contiene informaci\u00f3n de navegaci\u00f3n esencial (logo, men\u00fa, etc.).  </li> <li>Men\u00fa de navegaci\u00f3n: Un componente crucial para orientar al usuario dentro del sitio.  </li> <li>Cuerpo de la p\u00e1gina: La parte donde se muestra la informaci\u00f3n principal.  </li> <li>Pie de p\u00e1gina: Contiene informaci\u00f3n adicional o enlaces \u00fatiles (pol\u00edtica de privacidad, contacto, etc.).</li> </ul> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#13-elementos-conceptuales-del-diseno-web","title":"1.3 Elementos conceptuales del dise\u00f1o web","text":"<p>Los elementos conceptuales del dise\u00f1o web son los principios que gu\u00edan la creaci\u00f3n de interfaces efectivas. No son visibles, no est\u00e1n de hecho, sino que parecen estar presentes.  </p> <p></p> <p>Algunos de los elementos m\u00e1s importantes son:</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#131-el-punto","title":"1.3.1 El punto","text":"<p>El punto es el elemento m\u00e1s simple del dise\u00f1o. Puede ser peque\u00f1o o grande, de color o neutro. Los puntos pueden usarse para llamar la atenci\u00f3n, crear patrones o indicar direcciones. Se define como el lugar donde se cruzan dos l\u00edneas.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#132-la-linea","title":"1.3.2 La l\u00ednea","text":"<p>Las l\u00edneas son uno de los elementos m\u00e1s b\u00e1sicos del dise\u00f1o. Pueden ser horizontales, verticales, diagonales o curvas. Las l\u00edneas pueden usarse para dividir espacios, crear patrones o guiar la mirada del usuario. Se define como una sucesi\u00f3n de puntos. Forma el borde un un plano.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#133-el-plano","title":"1.3.3 El plano","text":"<p>El plano es una superficie bidimensional que puede ser rectangular, circular o irregular. Los planos pueden usarse para organizar informaci\u00f3n, crear jerarqu\u00edas visuales o separar secciones. Se define como una superficie plana que se extiende en dos dimensiones. Define los l\u00edmites externos de un volumen.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#134-el-volumen","title":"1.3.4 El volumen","text":"<p>El volumen es un espacio tridimensional que puede ser s\u00f3lido, vac\u00edo o con textura. Los vol\u00famenes pueden usarse para crear profundidad, realismo o sensaci\u00f3n de espacio. Se define como un espacio tridimensional que tiene longitud, anchura y altura.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#14-elementos-visuales","title":"1.4 Elementos visuales","text":""},{"location":"content/MF_0967_3/UF2218/unidad01/#141-forma","title":"1.4.1 Forma","text":"<p>La forma es un elemento visual que puede ser geom\u00e9trica o org\u00e1nica. Las formas pueden usarse para crear patrones, estructurar informaci\u00f3n o destacar elementos. Se define como la apariencia externa de un objeto.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#142-medida","title":"1.4.2 medida","text":"<p>La medida es un elemento visual que se refiere al tama\u00f1o de los elementos en relaci\u00f3n con otros elementos. La medida puede usarse para crear jerarqu\u00edas visuales, equilibrar el dise\u00f1o o destacar elementos. Se define como la dimensi\u00f3n de un objeto en relaci\u00f3n con otra dimensi\u00f3n.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#143-textura","title":"1.4.3 Textura","text":"<p>La textura es un elemento visual que se refiere a la apariencia superficial de un objeto. La textura puede ser lisa, rugosa, brillante o mate. Se define como la apariencia superficial de un objeto.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#144-color","title":"1.4.4 Color","text":"<p>El color es un elemento visual que se refiere a la propiedad de los objetos de reflejar la luz. El color puede usarse para crear contraste, establecer jerarqu\u00edas visuales o transmitir emociones. Se define como la propiedad de los objetos de reflejar la luz en diferentes longitudes de onda.</p> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#15-elementos-de-relacion","title":"1.5 Elementos de relaci\u00f3n","text":"<p>Los elementos de relaci\u00f3n son los principios que gu\u00edan la interacci\u00f3n entre los elementos de un dise\u00f1o. Estos elementos se utilizan para crear cohesi\u00f3n, equilibrio y flujo visual en una interfaz.</p> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#151-espacio","title":"1.5.1 Espacio","text":"<p>El espacio es un elemento de relaci\u00f3n que se refiere a la distancia entre los elementos. El espacio puede usarse para crear equilibrio, agrupar elementos o guiar la mirada del usuario. Se define como la distancia entre los elementos en un dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#152-direccion","title":"1.5.2 Direcci\u00f3n","text":"<p>La direcci\u00f3n es un elemento de relaci\u00f3n que se refiere a la orientaci\u00f3n de los elementos. La direcci\u00f3n puede usarse para crear flujo visual, establecer jerarqu\u00edas visuales o guiar la mirada del usuario. Se define como la orientaci\u00f3n de los elementos en un dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#153-movimiento","title":"1.5.3 Movimiento","text":"<p>El movimiento es un elemento de relaci\u00f3n que se refiere al cambio de posici\u00f3n de los elementos. El movimiento puede usarse para crear inter\u00e9s, destacar elementos o guiar la mirada del usuario. Se define como el cambio de posici\u00f3n de los elementos en un dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#154-proporcion","title":"1.5.4 Proporci\u00f3n","text":"<p>La proporci\u00f3n es un elemento de relaci\u00f3n que se refiere a la relaci\u00f3n entre los elementos. La proporci\u00f3n puede usarse para crear armon\u00eda, equilibrio o jerarqu\u00edas visuales. Se define como la relaci\u00f3n entre los elementos en un dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#155-gravedad","title":"1.5.5 Gravedad","text":"<p>La gravedad es un elemento de relaci\u00f3n que se refiere a la sensaci\u00f3n de peso de los elementos. La gravedad puede usarse para crear realismo, establecer jerarqu\u00edas visuales o guiar la mirada del usuario. Se define como la sensaci\u00f3n de peso de los elementos en un dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#2-principios-basicos-del-diseno-de-interfaces-web","title":"2. Principios b\u00e1sicos del dise\u00f1o de interfaces web","text":""},{"location":"content/MF_0967_3/UF2218/unidad01/#21-mapa-de-navegacion-y-prototipos","title":"2.1 Mapa de navegaci\u00f3n y prototipos","text":"<p>Antes de comenzar a trabajar en el dise\u00f1o visual, es importante crear un mapa de navegaci\u00f3n para estructurar c\u00f3mo el usuario se mover\u00e1 por el sitio web. Los prototipos son representaciones visuales del sitio que muestran la jerarqu\u00eda de los elementos.</p> <p>En la imagen tenemos un ejemplo de c\u00f3mo se organiza la informaci\u00f3n del sitio web y los pasos a seguir para realizar un proceso de compra. El mapa de navegaci\u00f3n es una herramienta visual que muestra la estructura de un sitio web y c\u00f3mo los usuarios pueden navegar por \u00e9l.</p> <p></p> <p>En este otro ejemplo vemos de una p\u00e1gina web principal de un sitio las opciones de navegaci\u00f3n que se ofrecen al usuario.</p> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#22-interaccion-persona-computadora","title":"2.2 Interacci\u00f3n persona-computadora","text":"<p>La interacci\u00f3n persona-computadora es el estudio de c\u00f3mo los usuarios interact\u00faan con las interfaces digitales. Algunos principios b\u00e1sicos de interacci\u00f3n incluyen:</p> <ul> <li>Retroalimentaci\u00f3n: Proporcionar informaci\u00f3n clara sobre las acciones del usuario.</li> <li>Consistencia: Mantener la interfaz coherente en todo el sitio.</li> <li>Facilidad de uso: Hacer que las tareas sean f\u00e1ciles de realizar.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#23-como-organizar-la-informacion","title":"2.3 C\u00f3mo organizar la informaci\u00f3n","text":"<p>Una interfaz debe ser organizada de manera jer\u00e1rquica. Esto implica presentar la informaci\u00f3n de forma que los elementos m\u00e1s importantes se destaquen y los secundarios se ubiquen de manera coherente para evitar sobrecargar al usuario.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#24-componentes-de-una-interfaz-web","title":"2.4 Componentes de una interfaz web","text":"<p>Algunos de los componentes m\u00e1s comunes de una interfaz web son:</p> <ul> <li>Elementos de indentificaci\u00f3n: Logo, nombre de la empresa.</li> <li>Elementos de navegaci\u00f3n: Para acceder a las diferentes secciones del sitio.</li> <li>Elementos de contenido: Texto, im\u00e1genes, videos.</li> <li>Elementos de interacci\u00f3n: Botones, formularios, enlaces.</li> </ul> <p></p> <p>Los elementos de identificaci\u00f3n y navegaci\u00f3n suelen ubicarse en la cabecera de la p\u00e1gina, mientras que el contenido principal se encuentra en el cuerpo. El pie de p\u00e1gina suele contener informaci\u00f3n adicional y enlaces \u00fatiles.</p> <p>Los elementos de navegaci\u00f3n deben ser claros y f\u00e1ciles de usar. Se recom ienda utilizar men\u00fas desplegables o hamburguesas para sitios con muchas secciones.</p> <p>Los elementos de contenido deben estar bien estructurados y f\u00e1cilmente accesibles. Se recomienda utilizar t\u00edtulos y subt\u00edtulos para organizar la informaci\u00f3n y im\u00e1genes y videos para hacerla m\u00e1s atractiva.</p> <p>Los elementos de interacci\u00f3n deben ser intuitivos y f\u00e1ciles de usar. Se recomienda utilizar botones llamativos y formularios sencillos para facilitar la interacci\u00f3n del usuario.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#241-zona-de-navegacion","title":"2.4.1 Zona de navegaci\u00f3n","text":"<p>La zona de navegaci\u00f3n es una parte crucial de la interfaz web, ya que permite a los usuarios moverse por el sitio de manera eficiente. Algunos elementos comunes de la zona de navegaci\u00f3n son:</p> <ul> <li>Men\u00fa de navegaci\u00f3n: Contiene enlaces a las diferentes secciones del sitio.</li> <li>Breadcrumbs: Muestra la ubicaci\u00f3n actual del usuario en el sitio.</li> <li>Botones de acci\u00f3n: Permiten a los usuarios realizar acciones espec\u00edficas.</li> </ul> <p></p> <p>Todas las p\u00e1ginas deben constar al menos de:</p> <ul> <li>Elemento de regreso a la p\u00e1gina principal.</li> <li>Men\u00fa de secciones.</li> <li>Informaci\u00f3n sobre la ubicaci\u00f3n actual dentro de la estructura de la web.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#242-zona-de-contenido-de-interaccion","title":"2.4.2 Zona de contenido de interacci\u00f3n","text":"<p>La zona de contenido de interacci\u00f3n es donde los usuarios interact\u00faan con el sitio web. Algunos elementos comunes de la zona de contenido de interacci\u00f3n son:</p> <ul> <li>Formularios: Permiten a los usuarios enviar informaci\u00f3n al sitio.</li> <li>Botones de acci\u00f3n: Permiten a los usuarios realizar acciones espec\u00edficas.</li> <li>Enlaces: Permiten a los usuarios navegar a otras p\u00e1ginas o secciones del sitio.</li> </ul> <p>Es importante que los elementos de la zona de contenido de interacci\u00f3n sean f\u00e1ciles de usar y llamativos para que los usuarios puedan interactuar con ellos de manera eficiente.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#25-maquetacion-web","title":"2.5 Maquetaci\u00f3n web","text":"<p>La maquetaci\u00f3n web es el proceso de crear la estructura visual de una p\u00e1gina web. Algunos principios b\u00e1sicos de maquetaci\u00f3n incluyen:</p> <ul> <li>Grids: Utilizar rejillas para organizar los elementos de la p\u00e1gina.</li> <li>Espaciado: Dejar espacios en blanco entre los elementos para mejorar la legibilidad.</li> <li>Consistencia: Mantener la coherencia visual en todo el sitio.</li> </ul> <p>Para dise\u00f1ar un sitio web, debemos comenzar por hacer una distribuci\u00f3n de los grandes bloques de elementos de informaci\u00f3n. Una muestra de c\u00f3mo suelen estar distribuidos estos grandes bloques se muestra en la imagen, aunque no todos los sitios web colocan estos bloques de la misma manera. Todo depender\u00e1 de la complejidad del sitio. Lo que s\u00ed es importante tener en cuenta, es que se debe ser consistente en el dise\u00f1o de todas las p\u00e1ginas del sitio. Todas ellas deben mantener una misma estructura. Este tema lo volveremos a tocar en el \u00faltimo apartado de la unidad que habla sobre las plantillas de dise\u00f1o.</p> <p></p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#251-elementos-de-ordenacion","title":"2.5.1 Elementos de ordenaci\u00f3n","text":"<p>El bloque de Encabezado est\u00e1 situado siempre en la parte superior de cualquier p\u00e1gina. Suele contener adem\u00e1s de los elementos identificativos del sitio Web: el logotipo, el nombre de la empresa, elementos de acci\u00f3n que permiten cambiar el idioma de lectura, realizar b\u00fasquedas, e incluso, si el sitio es muy grande, puede contener elementos de navegaci\u00f3n que permanecen a la vista en todas las p\u00e1ginas del sitio.</p> <p>Nota</p> <p>El bloque de Encabezado se repite en todas las p\u00e1ginas de un sitio Web y debe permanecer visible en todas ellas siempre que sea posible y la complejidad del sitio nos lo permita.</p> <p>El bloque de Navegaci\u00f3n es donde se coloca el sistema de navegaci\u00f3n del que ya hemos hablado en el apartado Zonas de navegaci\u00f3n, contenido, interacci\u00f3n.</p> <p>El bloque de Contenido es aquel en el que se muestran los contenidos. Los contenidos representan la meta del usuario y la raz\u00f3n por la que visita nuestro sitio Web por lo que debemos prestar mucha atenci\u00f3n al dise\u00f1o de este bloque. Debemos reservar una zona lo suficientemente grande para que el usuario pueda leer los contenidos c\u00f3modamente, sin necesidad de realizar grandes desplazamientos. Es important\u00edsimo evitar que el usuario tenga que realizar desplazamientos horizontales para leer el final de cada l\u00ednea.</p> <p>El bloque de Pie de p\u00e1gina est\u00e1 situado al final de la p\u00e1gina y, al igual que el encabezado, se repite en todas las p\u00e1ginas del sitio. Normalmente se emplea el pie como zona de navegaci\u00f3n complementaria a la zona superior situada en el encabezado. En ellas se repiten algunos enlaces que se suelen colocar en el encabezado como el enlace al Mapa del sitio (que veremos en el pr\u00f3ximo apartado) o, el enlace a la informaci\u00f3n de contacto y, adem\u00e1s, se colocan algunos enlaces nuevos como los enlaces a la informaci\u00f3n relativa a los derechos de autor, privacidad e informaci\u00f3n legal.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#26-mapa-de-navegacion","title":"2.6 Mapa de navegaci\u00f3n","text":"<p>Cuando un sitio Web es muy grande y complejo, como el sitio del Ministerio de Educaci\u00f3n y Ciencia, es conveniente tener un mapa del sitio que ayude a los usuarios a encontrar lo que buscan. En nuestro ejemplo, la p\u00e1gina de portada permite consultar el Mapa del sitio tanto en el encabezado como en el pie de la p\u00e1gina. Una vez pulsado el enlace del Mapa del sitio ver\u00e1s la imagen mostrada.</p> <p>Las elipses sombreadas muestran la ubicaci\u00f3n de los enlaces al Mapa del sitio tanto en la p\u00e1gina de portada como en la propia p\u00e1gina del mapa. Tambi\u00e9n se ha sombreado el t\u00edtulo Mapa Web que es lo que identifica el lugar en el que se encuentra el usuario.</p> <p>Nota</p> <p>El mapa del sitio proporciona a los visitantes un lugar donde buscar de forma sencilla los contenidos que le interesan si es que no los ha encontrado ya en la p\u00e1gina principal.</p> <p>La obligaci\u00f3n de crear un mapa del sitio es directamente proporcional a la complejidad y extensi\u00f3n de nuestro sitio. As\u00ed, si nuestro sitio consta de una \u00fanica p\u00e1gina donde s\u00f3lo hay enlaces a p\u00e1ginas ajenas al sitio, no tendremos que poner un enlace al Mapa del sitio. Si por el contrario, nuestro sitio consta de una p\u00e1gina principal de portada con enlaces a secciones, que a su vez est\u00e1n divididas en subsecciones, s\u00ed ser\u00eda conveniente crear el Mapa del sitio y poner un enlace a \u00e9l en la portada.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#27-el-color","title":"2.7 El color","text":"<p>Nota</p> <p>El color es un elemento muy importante en el dise\u00f1o de una p\u00e1gina Web. El color puede ser utilizado para atraer la atenci\u00f3n del usuario, para transmitir sensaciones, para organizar la informaci\u00f3n, para destacar elementos, etc.</p> <p>Clasificaciones de los colores:</p> <ul> <li>Colores primarios, secundarios y terciarios.</li> </ul> <p>Los colores primarios son el rojo, el azul y el amarillo. Los colores secundarios son el naranja, el verde y el violeta. Los colores terciarios son los que se obtienen mezclando un color primario con uno secundario.</p> <ul> <li> <p>Colores c\u00e1lidos y fr\u00edos.</p> <p>Los colores c\u00e1lidos son los que se asocian con el fuego y el sol, como el rojo, el naranja y el amarillo. Los colores fr\u00edos son los que se asocian con el agua y el hielo, como el azul, el verde y el violeta.</p> </li> <li> <p>Colores complementarios, an\u00e1logos y monocrom\u00e1ticos.</p> <p>Los colores complementarios son los que se encuentran en lados opuestos del c\u00edrculo crom\u00e1tico, como el rojo y el verde. Los colores an\u00e1logos son los que se encuentran cerca en el c\u00edrculo crom\u00e1tico, como el azul y el violeta. Los colores monocrom\u00e1ticos son diferentes tonos de un mismo color, como el azul claro y el azul oscuro.</p> </li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#271-sistema-rgb","title":"2.7.1 Sistema RGB","text":"<p>El sistema RGB (Red, Green, Blue) es un sistema de colores aditivos que se utiliza en pantallas digitales. En este sistema, los colores se crean mezclando diferentes cantidades de rojo, verde y azul. Por ejemplo, el color blanco se crea mezclando cantidades iguales de rojo, verde y azul.</p> <p>Los ordenadores emplean estos tres colores para representar cualquier color de la escala crom\u00e1tica. Pero \u00bfc\u00f3mo lo hace? El ordenador utiliza 8 bits de informaci\u00f3n para representar cada color. La escala monocrom\u00e1tica de un color viene dada por todas las posibles combinaciones de estos 8 bits, en total 256. Si tenemos en cuenta que tenemos una escala de 0 a 255 para representar cada color, es decir, 256 grados de cada color y, que el resto de los colores se consiguen mezclando estos tres \u00bfcu\u00e1ntos colores tenemos en total? Para saberlo tenemos que calcular todas las combinaciones que existen multiplicando tres veces el n\u00famero de grados de cada color: 256 x 256 x 256, lo que nos da 16.777.216 colores.</p> <p>P\u00e1gina para obtener c\u00f3digos de colores</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#272-colores-seguros","title":"2.7.2 Colores seguros","text":"<p>Los colores seguros son aquellos que se muestran correctamente en la mayor\u00eda de los navegadores y sistemas operativos. Algunos colores seguros son el blanco, el rojo, el azul y el verde. Es importante utilizar colores seguros para garantizar que la p\u00e1gina se vea correctamente en todos los dispositivos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#3-uso-del-color-y-tipografia-en-diseno-web","title":"3. Uso del color y tipograf\u00eda en dise\u00f1o web","text":""},{"location":"content/MF_0967_3/UF2218/unidad01/#31-psicologia-del-color","title":"3.1 Psicolog\u00eda del color","text":"<p>El color tiene un gran impacto en c\u00f3mo los usuarios perciben una p\u00e1gina web. La elecci\u00f3n de los colores debe basarse en la psicolog\u00eda del color:  </p> <ul> <li>Rojo: Estimula la acci\u00f3n, energ\u00eda, pasi\u00f3n.  </li> <li>Azul: Confianza, serenidad, profesionalismo.  </li> <li>Verde: Crecimiento, calma, naturaleza.  </li> <li>Amarillo: Optimismo, alerta, creatividad.  </li> <li>Negro y blanco: Profesionalismo, simplicidad.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#32-buenas-practicas-con-la-tipografia","title":"3.2 Buenas pr\u00e1cticas con la tipograf\u00eda","text":"<p>La tipograf\u00eda adecuada puede marcar la diferencia entre un dise\u00f1o efectivo y uno dif\u00edcil de leer. Para sitios web, se recomienda usar fuentes legibles y consistentes. Algunas fuentes m\u00e1s comunes en la web son Roboto, Arial y Helvetica. Adem\u00e1s, se debe asegurar que el tama\u00f1o de la fuente sea adecuado y que haya un buen contraste entre el texto y el fondo.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#33-fotos-y-logos","title":"3.3 Fotos y logos","text":"<p>Los recursos gr\u00e1ficos se emplean mucho en la Web. Si se utilizan adecuadamente, pueden mejorar el aprendizaje del usuario y a\u00f1adir valor a nuestro sitio. Ahora bien, si se utilizan inadecuadamente, producen el efecto contrario. A la hora de emplear im\u00e1genes en la Web, debemos tener en cuenta que las im\u00e1genes son archivos que tienen un tama\u00f1o y que para poder visualizarse correctamente deben descargarse previamente. Por esta raz\u00f3n, s\u00f3lo usaremos aquellas im\u00e1genes que complementen nuestro sitio Web y trataremos de evitar aquellas cuya \u00fanica finalidad sea adornar nuestro sitio.</p> <p>Lo que nos importa ahora es la informaci\u00f3n que se debe reflejar en una gu\u00eda de estilo respecto a los recursos gr\u00e1ficos de este tipo. Una gu\u00eda debe indicar al equipo de desarrollo de la interfaz los siguientes puntos:</p> <ul> <li>Formato. El tipo de formato en el que deber\u00e1n estar almacenadas la im\u00e1genes o logotipos empleados.</li> <li>Tama\u00f1o. El tama\u00f1o de la imagen o logotipo que se establece dando las medidas de ancho y alto en p\u00edxeles.</li> </ul> <p>Hay que tener en cuenta adem\u00e1s, que se deben incluir todos los tama\u00f1os posibles que pueden tener las im\u00e1genes o logotipos seg\u00fan su funcionalidad o el lugar de la p\u00e1gina donde ir\u00e1n situados, ya que no es lo mismo una imagen que vaya en la zona de contenidos que una imagen que se utilice en la cabecera de las p\u00e1ginas del sitio como distintivo de la organizaci\u00f3n, ni tampoco es lo mismo si la imagen se emplea en el sistema de navegaci\u00f3n o en el pie de la p\u00e1gina.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#4-que-es-la-accesibilidad-en-diseno-web","title":"4. \u00bfQu\u00e9 es la accesibilidad en dise\u00f1o web?","text":"<p>El dise\u00f1o accesible asegura que todos los usuarios, incluyendo aquellos con discapacidad visual, auditiva o motora, puedan interactuar con la p\u00e1gina web sin barreras. Algunos principios b\u00e1sicos de accesibilidad incluyen:</p> <ul> <li>Contraste adecuado entre texto y fondo.</li> <li>Navegaci\u00f3n por teclado: Asegurarse de que los usuarios puedan navegar por el sitio solo con el teclado.</li> <li>Etiquetas descriptivas para im\u00e1genes, botones y enlaces.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#5-diseno-responsivo-y-flexibilidad","title":"5. Dise\u00f1o Responsivo y Flexibilidad","text":"<p>Aqu\u00ed tienes el contenido completo del punto 5.1 Media Queries para que puedas copiarlo directamente:</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#diseno-responsivo-con-media-queries","title":"Dise\u00f1o Responsivo con Media Queries","text":"<p>El dise\u00f1o responsivo es un enfoque de dise\u00f1o web que permite crear p\u00e1ginas capaces de adaptarse a diferentes tama\u00f1os de pantalla y tipos de dispositivos. En lugar de crear una versi\u00f3n diferente de un sitio web para cada dispositivo (m\u00f3vil, tablet, desktop), el dise\u00f1o responsivo permite que el mismo c\u00f3digo se ajuste din\u00e1micamente a las caracter\u00edsticas del dispositivo del usuario, como el ancho de la pantalla, resoluci\u00f3n y orientaci\u00f3n.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#51-que-son-las-media-queries","title":"5.1 \u00bfQu\u00e9 son las Media Queries?","text":"<p>Las media queries son reglas en CSS que permiten aplicar estilos condicionados a ciertos factores del dispositivo. Por ejemplo, podemos cambiar el dise\u00f1o de un sitio web si se visualiza en una pantalla peque\u00f1a de tel\u00e9fono m\u00f3vil o en una pantalla grande de escritorio.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#sintaxis-basica-de-las-media-queries","title":"Sintaxis b\u00e1sica de las Media Queries","text":"<p>La sintaxis de una media query es simple, utilizando la palabra clave <code>@media</code> seguida de una condici\u00f3n. Un ejemplo b\u00e1sico ser\u00eda:</p> <pre><code>@media only screen and (max-width: 600px) {\n    body {\n        background-color: lightgray;\n    }\n}\n</code></pre> <p>En este caso, <code>@media</code> indica que estamos definiendo una regla especial de estilo dependiendo de las condiciones del dispositivo. La condici\u00f3n en este caso es que la pantalla tenga un ancho m\u00e1ximo de 600px. Si el dispositivo cumple con esta condici\u00f3n, los estilos dentro de la media query se aplicar\u00e1n (en este caso, se cambia el color de fondo del <code>body</code> a gris claro).</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#condiciones-comunes-en-las-media-queries","title":"Condiciones comunes en las Media Queries","text":"<p>Existen varias condiciones que podemos usar para determinar el estilo que debe aplicarse a un dispositivo, las m\u00e1s comunes son:</p> <ul> <li><code>max-width</code>: Define el ancho m\u00e1ximo de la pantalla. Se usa para dispositivos con pantallas m\u00e1s peque\u00f1as.</li> <li><code>min-width</code>: Define el ancho m\u00ednimo de la pantalla. Usado para dispositivos con pantallas m\u00e1s grandes.</li> <li><code>max-height</code> y <code>min-height</code>: Se aplican seg\u00fan la altura de la pantalla.</li> <li><code>orientation</code>: Permite aplicar estilos dependiendo de la orientaci\u00f3n del dispositivo (horizontal o vertical).</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad01/#ejemplos-practicos-de-media-queries","title":"Ejemplos pr\u00e1cticos de Media Queries","text":""},{"location":"content/MF_0967_3/UF2218/unidad01/#1-cambiar-el-diseno-en-funcion-del-ancho-de-la-pantalla","title":"1. Cambiar el dise\u00f1o en funci\u00f3n del ancho de la pantalla","text":"<p>Imaginemos que queremos que nuestra p\u00e1gina se vea diferente en dispositivos m\u00f3viles y en ordenadores de escritorio. Podemos utilizar <code>min-width</code> y <code>max-width</code> para hacerlo:</p> <pre><code>/* Para pantallas peque\u00f1as (m\u00f3viles) con un ancho m\u00e1ximo de 600px */\n@media only screen and (max-width: 600px) {\n    body {\n        background-color: lightgray;\n    }\n    .header {\n        font-size: 14px;\n    }\n}\n\n/* Para pantallas grandes (escritorio) con un ancho m\u00ednimo de 600px */\n@media only screen and (min-width: 601px) {\n    body {\n        background-color: white;\n    }\n    .header {\n        font-size: 24px;\n    }\n}\n</code></pre> <p>En este ejemplo, los estilos se ajustan en funci\u00f3n del ancho de la pantalla. Si el ancho es menor a 600px (pantallas m\u00f3viles), se aplica un fondo gris claro y un tama\u00f1o de fuente peque\u00f1o. Si el ancho es mayor a 600px (pantallas de escritorio), se aplican otros estilos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#2-cambiar-el-diseno-segun-la-orientacion-del-dispositivo","title":"2. Cambiar el dise\u00f1o seg\u00fan la orientaci\u00f3n del dispositivo","text":"<p>Las media queries tambi\u00e9n permiten cambiar el dise\u00f1o seg\u00fan la orientaci\u00f3n del dispositivo (vertical u horizontal). Aqu\u00ed un ejemplo para cambiar el dise\u00f1o de un men\u00fa dependiendo de si el dispositivo est\u00e1 en modo retrato o paisaje:</p> <pre><code>/* Para dispositivos en orientaci\u00f3n vertical (portrait) */\n@media only screen and (orientation: portrait) {\n    .menu {\n        display: block;\n    }\n}\n\n/* Para dispositivos en orientaci\u00f3n horizontal (landscape) */\n@media only screen and (orientation: landscape) {\n    .menu {\n        display: flex;\n    }\n}\n</code></pre> <p>Este ejemplo muestra c\u00f3mo aplicar estilos diferentes en funci\u00f3n de la orientaci\u00f3n del dispositivo. En modo vertical, el men\u00fa se muestra como un bloque, mientras que en modo horizontal el men\u00fa se organiza en un layout flexible.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#3-mejorar-la-visualizacion-en-pantallas-de-alta-resolucion","title":"3. Mejorar la visualizaci\u00f3n en pantallas de alta resoluci\u00f3n","text":"<p>Las pantallas con alta resoluci\u00f3n como los dispositivos Retina tienen una densidad de p\u00edxeles mucho mayor. Para mejorar la visualizaci\u00f3n de im\u00e1genes, podemos utilizar una media query que apunte a dispositivos con alta densidad de p\u00edxeles:</p> <pre><code>@media only screen and (min-resolution: 192dpi) {\n    img {\n        width: 100%;\n        height: auto;\n    }\n}\n</code></pre> <p>Con esta media query, si el dispositivo tiene una resoluci\u00f3n de 192dpi o mayor, las im\u00e1genes se ajustar\u00e1n para ofrecer una mejor calidad en dispositivos de alta definici\u00f3n.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#cuando-usar-las-media-queries","title":"\u00bfCu\u00e1ndo usar las Media Queries?","text":"<p>El uso de media queries es fundamental para crear dise\u00f1os web responsivos. Al utilizar estas reglas, podemos asegurarnos de que el sitio web se adapte adecuadamente a dispositivos de pantallas peque\u00f1as como m\u00f3viles, tablets y pantallas grandes como monitores de escritorio. </p> <p>Recomendaci\u00f3n: El dise\u00f1o responsivo mejora la experiencia del usuario y ayuda a incrementar la accesibilidad. No olvides probar tu sitio en diferentes dispositivos para asegurar que el dise\u00f1o sea correcto en todas las resoluciones.</p>"},{"location":"content/MF_0967_3/UF2218/unidad01/#ejercicio-practico-diseno-responsivo-con-media-queries","title":"Ejercicio pr\u00e1ctico: Dise\u00f1o responsivo con Media Queries","text":"<p>Ejercicio: Crear una p\u00e1gina web responsiva</p> <ul> <li>Crea una p\u00e1gina web con una estructura b\u00e1sica que incluya un encabezado, un cuerpo y un pie de p\u00e1gina.</li> <li>Aplica media queries para que la p\u00e1gina sea responsiva. Aseg\u00farate de que se vea bien en pantallas peque\u00f1as y grandes.</li> <li>Tip: Usa <code>max-width</code> para adaptar los estilos a pantallas peque\u00f1as y <code>min-width</code> para pantallas grandes.</li> </ul> Soluci\u00f3n HTML Base para ejercicio<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Dise\u00f1o Responsivo&lt;/title&gt;\n    &lt;style&gt;\n        /* Estilos base */\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n        }\n\n        header {\n            background-color: #4CAF50;\n            padding: 10px;\n            text-align: center;\n            color: white;\n        }\n\n        footer {\n            background-color: #4CAF50;\n            padding: 10px;\n            text-align: center;\n            color: white;\n            position: fixed;\n            width: 100%;\n            bottom: 0;\n        }\n\n        /* Media Queries */\n        @media only screen and (max-width: 600px) {\n            body {\n                background-color: lightgray;\n            }\n            header {\n                font-size: 14px;\n            }\n            footer {\n                font-size: 12px;\n            }\n        }\n\n        @media only screen and (min-width: 601px) {\n            body {\n                background-color: white;\n            }\n            header {\n                font-size: 24px;\n            }\n            footer {\n                font-size: 18px;\n            }\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;Bienvenido a la p\u00e1gina responsiva&lt;/h1&gt;\n    &lt;/header&gt;\n\n    &lt;main&gt;\n        &lt;p&gt;Este es un ejemplo de una p\u00e1gina web responsiva utilizando media queries.&lt;/p&gt;\n    &lt;/main&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;\u00a9 2025 Dise\u00f1o Responsivo&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad01/#6ejercicios-practicos","title":"6.Ejercicios pr\u00e1cticos:","text":"<p>Ejercicio: Analizar un sitio web y aplicar principios de dise\u00f1o</p> <ul> <li>Elige una p\u00e1gina web conocida (como una tienda online o una p\u00e1gina corporativa).</li> <li>Realiza un an\u00e1lisis sobre los principios de dise\u00f1o aplicados:</li> <li>\u00bfC\u00f3mo organizan la informaci\u00f3n?</li> <li>\u00bfEs la tipograf\u00eda adecuada?</li> <li>\u00bfEl contraste de colores es adecuado?</li> <li>\u00bfEs la p\u00e1gina accesible?</li> <li>Escribe un breve informe con tus observaciones y sugerencias de mejora.</li> </ul> <p>Ejercicio: Crear un prototipo de p\u00e1gina web con WIX o Canva</p> <ul> <li>Utiliza una herramienta de dise\u00f1o web como WIX o Canva.</li> <li>Vamos a crear una web para vender ropa de segunda mano.</li> <li>Crea un prototipo de una p\u00e1gina web con los elementos b\u00e1sicos (cabecera, men\u00fa, contenido, pie de p\u00e1gina).</li> <li>Aplica los principios de dise\u00f1o aprendidos en este m\u00f3dulo.</li> <li>Comparte tu prototipo con tus compa\u00f1eros y pide feedback.</li> </ul> <p>Conclusi\u00f3n El dise\u00f1o web no se trata solo de hacer una p\u00e1gina visualmente atractiva, sino de crear una experiencia de usuario fluida y accesible. Aprender los principios de dise\u00f1o es crucial para lograr interfaces que no solo se vean bien, sino que tambi\u00e9n sean funcionales y agradables de usar.</p> <p>Ahora que entendemos los fundamentos de CSS y los principios de dise\u00f1o, podemos comenzar a aplicar estos conceptos para crear interfaces web efectivas utilizando CSS3.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/","title":"Introducci\u00f3n a CSS (Cascading Style Sheets)","text":"<p>CSS es un lenguaje de estilos que se usa para definir la presentaci\u00f3n de un documento HTML o XML. Con CSS podemos darle formato a las p\u00e1ginas web, definiendo aspectos visuales como colores, tipograf\u00edas, espaciado, disposici\u00f3n de los elementos y muchos m\u00e1s. En este primer contacto con CSS, nos enfocaremos en los aspectos b\u00e1sicos que los alumnos deben conocer para comenzar a aplicar estilos en una p\u00e1gina web.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#1-anadir-estilos-a-un-documento-con-css","title":"1. A\u00f1adir Estilos a un Documento con CSS","text":"<p>Existen varias formas de agregar estilos CSS a una p\u00e1gina web:</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#11-estilos-en-linea-inline-css","title":"1.1 Estilos en l\u00ednea (Inline CSS)","text":"<p>Los estilos en l\u00ednea se aplican directamente en el atributo <code>style</code> de los elementos HTML.</p> <pre><code>&lt;p style=\"color: red; font-size: 16px;\"&gt;\n  Este es un texto con estilo en l\u00ednea.\n&lt;/p&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#12-estilos-internos-internal-css","title":"1.2 Estilos internos (Internal CSS)","text":"<p>Los estilos internos se colocan dentro de una etiqueta <code>&lt;style&gt;</code> en la secci\u00f3n <code>&lt;head&gt;</code> del documento HTML.</p> <pre><code>&lt;head&gt;\n  &lt;style&gt;\n    p {\n      color: blue;\n      font-size: 18px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Este es un texto con estilo interno.&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#13-estilos-externos-external-css","title":"1.3 Estilos externos (External CSS)","text":"<p>Los estilos externos se definen en un archivo separado con extensi\u00f3n <code>.css</code>, y se vinculan al documento HTML mediante el atributo <code>link</code>.</p> <pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Este es un texto con estilo externo&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>p {\n  color: blue;\n  font-size: 18px;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#2-conceptos-clave-de-css","title":"2. Conceptos Clave de CSS","text":""},{"location":"content/MF_0967_3/UF2218/unidad02/#21-estructura-y-herencia-en-css","title":"2.1 Estructura y Herencia en CSS","text":"<p>CSS es un lenguaje basado en reglas de estilo. Cada regla consta de un selector (elemento al que se aplica) y una declaraci\u00f3n (propiedad y valor). Adem\u00e1s, los elementos en CSS pueden heredar propiedades de sus elementos padres.</p> <p>Sintaxis:</p> <pre><code>    selector {\n        prop1: valor1;\n        prop2: valor2;\n        ...\n        ...\n        propn:valorn;\n    }\n</code></pre> <p>En el ejemplo siguiente los elementos <code>&lt;p&gt;</code>ser\u00e1n hijos de <code>&lt;body&gt;</code>y por tanto heredar\u00e1n sus reglas.</p> <pre><code>/* Ejemplo de herencia en CSS */\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      body {\n        font-family: Arial, sans-serif;\n      }\n      p {\n        font-size: 16px; /* Los p\u00e1rrafos heredar\u00e1n esta fuente */\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Herencia&lt;/h1&gt;\n    &lt;p&gt;Este p\u00e1rrafo tiene las propiedades CSS de body y de p&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#22-reglas-de-estilo-en-conflicto-especificidad","title":"2.2 Reglas de Estilo en Conflicto (Especificidad)","text":"<p>La especificidad en CSS es un sistema que determina qu\u00e9 reglas se aplican a un elemento cuando hay varias reglas que podr\u00edan coincidir con el mismo. Este concepto es fundamental para resolver conflictos entre reglas CSS. En otras palabras, si hay dos o m\u00e1s reglas que podr\u00edan aplicarse al mismo elemento, el navegador utiliza un sistema de especificidad para decidir cu\u00e1l aplicar.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#como-se-calcula-la-especificidad","title":"\u00bfC\u00f3mo se calcula la especificidad?","text":"<p>La especificidad de una regla se calcula tomando en cuenta los tipos de selectores que la componen. La regla de especificidad se mide con un puntaje basado en diferentes categor\u00edas de selectores. Cuanto mayor sea el puntaje, m\u00e1s espec\u00edfica ser\u00e1 la regla y, por tanto, tendr\u00e1 mayor prioridad.</p> <p>La especificidad se calcula de la siguiente manera:</p> <ol> <li>Selectores de ID: Cada selector de ID (<code>#id</code>) tiene un valor de 100.</li> <li>Selectores de clase, atributos y pseudoclases: Cada selector de clase (<code>.clase</code>), atributos (<code>[attr=value]</code>) o pseudoclase (<code>:hover</code>) tiene un valor de 10.</li> <li>Selectores de elementos y pseudoelementos: Cada selector de tipo de elemento (<code>div</code>, <code>p</code>, <code>a</code>) o pseudoelemento (<code>::before</code>, <code>::after</code>) tiene un valor de 1.</li> <li>Selectores universales (<code>*</code>) y combinadores como <code>+</code> o <code>&gt;</code> tienen 0 de especificidad.</li> </ol> <p>El puntaje final de una regla de CSS es una combinaci\u00f3n de estos valores, representada en formato (a, b, c, d), donde:</p> <ul> <li>a es el n\u00famero de ID.</li> <li>b es el n\u00famero de clases, pseudoclases y atributos.</li> <li>c es el n\u00famero de elementos y pseudoelementos.</li> <li>d es el valor de selectores universales o combinadores, que siempre es 0.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplos-de-especificidad","title":"Ejemplos de especificidad","text":"<ol> <li>Selector de tipo de elemento</li> </ol> <pre><code>p {\n  color: red;\n}\n</code></pre> <p>La especificidad es (0, 0, 1, 0) porque es un selector de tipo de elemento (el <code>&lt;p&gt;</code>).</p> <ol> <li>Selector de clase</li> </ol> <pre><code>.mi-clase {\n  color: blue;\n}\n</code></pre> <p>La especificidad es (0, 1, 0, 0) porque es un selector de clase (<code>.mi-clase</code>).</p> <ol> <li>Selector de ID</li> </ol> <pre><code>#mi-id {\n  color: green;\n}\n</code></pre> <p>La especificidad es (1, 0, 0, 0) porque es un selector de ID (<code>#mi-id</code>).</p> <ol> <li>Combinaci\u00f3n de selectores</li> </ol> <pre><code>div.mi-clase p {\n  color: yellow;\n}\n</code></pre> <p>La especificidad es (0, 1, 1, 0) porque hay un selector de clase (<code>.mi-clase</code>) y un selector de tipo de elemento (<code>div</code>, <code>p</code>).</p> <ol> <li>Uso de <code>!important</code>    Aunque <code>!important</code> no afecta la especificidad num\u00e9rica, aumenta la prioridad de la regla sin tener en cuenta la especificidad.</li> </ol> <pre><code>#mi-id {\n  color: purple !important;\n}\n</code></pre> <p>La especificidad es (1, 0, 0, 0), pero como tiene <code>!important</code>, esta regla tiene la m\u00e1xima prioridad, incluso si hay otras reglas m\u00e1s espec\u00edficas.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#que-pasa-cuando-las-reglas-tienen-la-misma-especificidad","title":"\u00bfQu\u00e9 pasa cuando las reglas tienen la misma especificidad?","text":"<p>Cuando dos reglas tienen la misma especificidad, la \u00faltima regla en el archivo CSS o en la hoja de estilos ser\u00e1 la que se aplique. Esto es lo que se conoce como el orden de aparici\u00f3n.</p> <pre><code>p {\n  color: green;\n}\n\np {\n  color: red;\n}\n</code></pre> <p>En este caso, el color de los p\u00e1rrafos ser\u00e1 rojo, porque la segunda regla se encuentra despu\u00e9s de la primera, a pesar de que ambas tienen la misma especificidad.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-como-se-calcula-la-especificidad","title":"Ejemplo de c\u00f3mo se calcula la especificidad","text":""},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-1","title":"Ejemplo 1:","text":"<pre><code>#menu a {\n  color: green;\n}\n\n.menu a {\n  color: red;\n}\n</code></pre> <ul> <li><code>#menu a</code> tiene una especificidad de (1, 0, 1, 0).</li> <li><code>.menu a</code> tiene una especificidad de (0, 1, 1, 0).</li> </ul> <p>En este caso, <code>#menu a</code> es m\u00e1s espec\u00edfico, as\u00ed que la regla de color ser\u00e1 verde.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-2","title":"Ejemplo 2:","text":"<pre><code>div p {\n  color: blue;\n}\n\ndiv p.highlight {\n  color: yellow;\n}\n</code></pre> <ul> <li><code>div p</code> tiene una especificidad de (0, 0, 2, 0).</li> <li><code>div p.highlight</code> tiene una especificidad de (0, 1, 2, 0).</li> </ul> <p>La regla <code>div p.highlight</code> ser\u00e1 la que prevalezca, aplicando color amarillo.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen","title":"Resumen","text":"<p>La especificidad es un concepto clave en CSS para resolver conflictos entre reglas de estilo. El navegador siempre aplica la regla con mayor especificidad. Si dos reglas tienen la misma especificidad, la \u00faltima definida es la que se aplica. Adem\u00e1s, el uso de <code>!important</code> puede sobrescribir cualquier regla, independientemente de su especificidad.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#23-selectores-en-css","title":"2.3 Selectores en CSS","text":"<p>Los selectores en CSS permiten elegir qu\u00e9 elementos HTML queremos estilizar. Los tipos m\u00e1s comunes son:</p> <ul> <li>Selectores de Elemento: Selecciona todos los elementos de un tipo espec\u00edfico.</li> </ul> <pre><code>p {\n  color: green;\n}\n</code></pre> <ul> <li>Selectores Contextuales: Seleccionan un elemento solo si est\u00e1 dentro de otro.</li> </ul> <pre><code>article p {\n  color: purple;\n}\n</code></pre> <ul> <li>Selectores de Clase e ID: Seleccionan los elementos con una clase o ID espec\u00edfica.</li> </ul> <pre><code>/* Selector de clase */\n.miClase {\n  color: orange;\n}\n/* Selector de ID */\n#miId {\n  color: red;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#231-pseudoselectores-en-css","title":"2.3.1 Pseudoselectores en CSS","text":"<p>Los pseudoselectores son selectores especiales que permiten seleccionar un estado espec\u00edfico de un elemento o elementos que cumplen con ciertos criterios, sin tener que agregar clases adicionales. Son muy \u00fatiles para aplicar estilos de manera m\u00e1s eficiente y din\u00e1mica, y se utilizan en varias situaciones comunes.</p> <p>1. Tipos de Pseudoselectores en CSS</p> <p>1.1 <code>:hover</code></p> <p>El pseudoselector <code>:hover</code> se utiliza cuando el usuario pasa el rat\u00f3n sobre un elemento, permitiendo cambiar su estilo. Es muy utilizado para botones, enlaces y im\u00e1genes.</p> <p>Ejemplo: Cambiar el color de un enlace al pasar el rat\u00f3n por encima.</p> <pre><code>/* Cambiar el color de los enlaces al pasar el rat\u00f3n */\na:hover {\n  color: red;\n}\n</code></pre> <p>1.2 <code>:active</code></p> <p>El pseudoselector <code>:active</code> se aplica cuando un elemento est\u00e1 siendo activado por el usuario, generalmente durante la interacci\u00f3n, como cuando un bot\u00f3n es presionado.</p> <p>Ejemplo: Cambiar el color de un bot\u00f3n cuando se hace clic en \u00e9l.</p> <pre><code>/* Cambiar el color de un bot\u00f3n al ser presionado */\nbutton:active {\n  background-color: green;\n}\n</code></pre> <p>1.3 <code>:focus</code></p> <p>El pseudoselector <code>:focus</code> se aplica a un elemento cuando recibe el foco de entrada. Es muy \u00fatil para estilizar elementos interactivos como campos de formulario y botones de b\u00fasqueda.</p> <p>Ejemplo: Cambiar el borde de un campo de texto cuando est\u00e1 enfocado.</p> <pre><code>/* Cambiar el borde de un campo de texto cuando tiene el foco */\ninput:focus {\n  border-color: blue;\n  outline: none;\n}\n</code></pre> <p>1.4 <code>:nth-child()</code></p> <p>El pseudoselector <code>:nth-child()</code> selecciona elementos en funci\u00f3n de su posici\u00f3n dentro de su padre. Puedes usarlo para seleccionar un elemento en una posici\u00f3n espec\u00edfica o crear patrones con los elementos.</p> <p>Ejemplo: Seleccionar el primer p\u00e1rrafo dentro de un contenedor y darle un estilo diferente.</p> <pre><code>/* Estilizar el primer p\u00e1rrafo dentro de un contenedor */\ndiv p:nth-child(1) {\n  color: orange;\n}\n</code></pre> <p>Puedes usar valores como <code>odd</code> (impares) o <code>even</code> (pares), o incluso expresar una f\u00f3rmula como <code>2n+1</code> para seleccionar elementos espec\u00edficos en una secuencia.</p> <p>1.5 <code>:first-child</code></p> <p>El pseudoselector <code>:first-child</code> selecciona el primer hijo de un elemento padre. Es \u00fatil cuando quieres aplicar un estilo solo al primer elemento dentro de un contenedor.</p> <p>Ejemplo: Seleccionar el primer elemento de una lista y darle un estilo diferente.</p> <pre><code>/* Estilizar el primer \u00edtem de una lista */\nul li:first-child {\n  font-weight: bold;\n}\n</code></pre> <p>1.6 <code>:last-child</code></p> <p>El pseudoselector <code>:last-child</code> selecciona el \u00faltimo hijo de un elemento padre.</p> <p>Ejemplo: Cambiar el estilo del \u00faltimo p\u00e1rrafo de un contenedor.</p> <pre><code>/* Estilizar el \u00faltimo p\u00e1rrafo dentro de un contenedor */\ndiv p:last-child {\n  font-style: italic;\n}\n</code></pre> <p>1.7 <code>:nth-of-type()</code></p> <p>El pseudoselector <code>:nth-of-type()</code> es similar a <code>:nth-child()</code>, pero solo selecciona elementos de un tipo espec\u00edfico (por ejemplo, <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, etc.), ignorando otros tipos de elementos dentro del mismo contenedor.</p> <p>Ejemplo: Seleccionar el segundo p\u00e1rrafo de un contenedor que solo tiene p\u00e1rrafos.</p> <pre><code>/* Seleccionar el segundo p\u00e1rrafo en un contenedor */\ndiv p:nth-of-type(2) {\n  color: blue;\n}\n</code></pre> <p>1.8 <code>:not()</code></p> <p>El pseudoselector <code>:not()</code> permite excluir ciertos elementos de un conjunto de selecciones. Es \u00fatil para aplicar estilos a todos los elementos, excepto a los que coinciden con un determinado selector.</p> <p>Ejemplo: Seleccionar todos los p\u00e1rrafos excepto los de clase <code>.excluir</code>.</p> <pre><code>/* Aplicar estilos a todos los p\u00e1rrafos, excepto los de clase `.excluir` */\np:not(.excluir) {\n  color: green;\n}\n</code></pre> <p></p> Tabla maquetada con pseudoselectores tabla maquetada<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Tabla de Alumnos&lt;/title&gt;\n    &lt;style&gt;\n      table {\n        width: 100%;\n        border-collapse: collapse;\n      }\n      th,\n      td {\n        padding: 8px;\n        text-align: center;\n        border: 1px solid #ddd;\n      }\n      th {\n        background-color: #4caf50;\n        color: white;\n      }\n      tr:nth-child(even) {\n        background-color: #f2f2f2;\n      }\n      tr:nth-child(odd) {\n        background-color: #ffffff;\n      }\n      tr:last-child {\n        background-color: #f4e1c1;\n        font-weight: bold;\n      }\n      tr:last-child td {\n        background-color: #f4e1c1;\n      }\n      tr:last-child td:first-child::before {\n        content: \"Subtotal: \";\n        font-weight: normal;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;ID&lt;/th&gt;\n          &lt;th&gt;Nombre&lt;/th&gt;\n          &lt;th&gt;CSS&lt;/th&gt;\n          &lt;th&gt;HTML&lt;/th&gt;\n          &lt;th&gt;JS&lt;/th&gt;\n          &lt;th&gt;Media&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;1&lt;/td&gt;\n          &lt;td&gt;Ana Garc\u00eda&lt;/td&gt;\n          &lt;td&gt;8&lt;/td&gt;\n          &lt;td&gt;7&lt;/td&gt;\n          &lt;td&gt;9&lt;/td&gt;\n          &lt;td&gt;8&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;2&lt;/td&gt;\n          &lt;td&gt;Jos\u00e9 Mart\u00ednez&lt;/td&gt;\n          &lt;td&gt;6&lt;/td&gt;\n          &lt;td&gt;7&lt;/td&gt;\n          &lt;td&gt;6&lt;/td&gt;\n          &lt;td&gt;6.33&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;3&lt;/td&gt;\n          &lt;td&gt;Pedro Fern\u00e1ndez&lt;/td&gt;\n          &lt;td&gt;9&lt;/td&gt;\n          &lt;td&gt;8&lt;/td&gt;\n          &lt;td&gt;9&lt;/td&gt;\n          &lt;td&gt;8.67&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;4&lt;/td&gt;\n          &lt;td&gt;Laura Rodr\u00edguez&lt;/td&gt;\n          &lt;td&gt;7&lt;/td&gt;\n          &lt;td&gt;6&lt;/td&gt;\n          &lt;td&gt;8&lt;/td&gt;\n          &lt;td&gt;7&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;5&lt;/td&gt;\n          &lt;td&gt;Carlos L\u00f3pez&lt;/td&gt;\n          &lt;td&gt;6&lt;/td&gt;\n          &lt;td&gt;6&lt;/td&gt;\n          &lt;td&gt;7&lt;/td&gt;\n          &lt;td&gt;6.33&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;/td&gt;\n          &lt;td&gt;&lt;b&gt;Total&lt;/b&gt;&lt;/td&gt;\n          &lt;td&gt;36&lt;/td&gt;\n          &lt;td&gt;34&lt;/td&gt;\n          &lt;td&gt;39&lt;/td&gt;\n          &lt;td&gt;7.47&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-practico-cambiar-el-color-de-un-elemento-al-pasar-el-raton-por-encima","title":"Ejemplo Pr\u00e1ctico: Cambiar el color de un elemento al pasar el rat\u00f3n por encima**","text":"<p>HTML Base </p> <pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\" /&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n      &lt;title&gt;Ejemplo de Pseudoselectores&lt;/title&gt;\n      &lt;style&gt;\n        /* Cambiar color de los elementos al pasar el rat\u00f3n por encima */\n        .miElemento:hover {\n          color: red;\n        }\n      &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1&gt;Prueba de Pseudoselectores&lt;/h1&gt;\n      &lt;p class=\"miElemento\"&gt;\n        Pasa el rat\u00f3n sobre este texto para cambiar su color.\n      &lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>En este ejemplo, se usa el pseudoselector <code>:hover</code> para cambiar el color del texto a rojo cuando el usuario pasa el rat\u00f3n sobre el elemento con la clase <code>.miElemento</code>.</p> <p>Explicaci\u00f3n:</p> <ul> <li><code>p.miElemento:hover</code>: Aqu\u00ed, el pseudoselector <code>:hover</code> aplica el estilo cuando el rat\u00f3n pasa sobre el p\u00e1rrafo con la clase <code>miElemento</code>.</li> <li><code>color: red;</code>: Cambia el color del texto a rojo.</li> </ul> <p>Este ejemplo es simple y directo, permitiendo a los alumnos ver c\u00f3mo los pseudoselectores pueden ser usados para crear interactividad en una p\u00e1gina web de manera f\u00e1cil y eficiente.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen_1","title":"Resumen","text":"<p>Los pseudoselectores en CSS son herramientas poderosas para aplicar estilos espec\u00edficos a los elementos seg\u00fan su estado o posici\u00f3n en el DOM. Al comprender c\u00f3mo utilizar <code>:hover</code>, <code>:focus</code>, <code>:nth-child()</code>, y otros, los alumnos podr\u00e1n crear interfaces web m\u00e1s din\u00e1micas e interactivas, mejorando la experiencia del usuario.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#24-la-palabra-clave-important","title":"2.4 La palabra clave <code>!important</code>","text":"<p>La palabra clave <code>!important</code> fuerza la aplicaci\u00f3n de una regla, incluso si existe una regla m\u00e1s espec\u00edfica.</p> <pre><code>p {\n  color: black !important;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#3-el-modelo-de-cajas-de-css","title":"3. El Modelo de Cajas de CSS","text":"<p>El modelo de cajas es un concepto esencial en CSS. Cada elemento en una p\u00e1gina web se representa como una caja rectangular que consta de varias partes:</p> <p></p> <p>En CSS, cada elemento en la p\u00e1gina web se representa como una caja rectangular. Cada caja se compone de varias \u00e1reas que controlan su tama\u00f1o, espaciado y posici\u00f3n. En este punto ampliamos la explicaci\u00f3n de las propiedades m\u00e1s importantes que definen c\u00f3mo se organizan estos espacios, adem\u00e1s de c\u00f3mo se utilizan las propiedades top, right, bottom y left para controlar la ubicaci\u00f3n de los elementos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#31-area-de-contenido-y-relleno-padding","title":"3.1 \u00c1rea de Contenido y Relleno (Padding)","text":"<p>El contenido es la parte principal del elemento (por ejemplo, el texto o la imagen), y el relleno (padding) es el espacio entre el contenido y el borde del elemento. Esto permite que el contenido no est\u00e9 directamente contra el borde del contenedor, d\u00e1ndole un respiro visual.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-padding","title":"Propiedad <code>padding</code>","text":"<p>La propiedad <code>padding</code> puede tener uno o m\u00e1s valores. Si solo se define un valor, este se aplica de manera uniforme a los cuatro lados del elemento.</p> <pre><code>div {\n  padding: 10px;\n  border: 1px solid black;\n  width: 200px;\n  height: 100px;\n}\n</code></pre> <p>Este c\u00f3digo aplica 10px de relleno alrededor del contenido, y un borde de 1px de color negro. La propiedad <code>width</code> y <code>height</code> definen las dimensiones del contenedor.</p> <p>Si se desea aplicar diferentes valores de relleno a cada lado del elemento, podemos usar la siguiente sintaxis:</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-padding-con-valores-separados","title":"Propiedad <code>padding</code> con valores separados","text":"<pre><code>div {\n  padding: 10px 20px 30px 40px;\n}\n</code></pre> <p>En este caso, el orden de los valores es:</p> <ul> <li>top: 10px</li> <li>right: 20px</li> <li>bottom: 30px</li> <li>left: 40px</li> </ul> <p>De esta manera, puedes ajustar el relleno en cada lado del contenedor.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#32-bordes-border","title":"3.2 Bordes (Border)","text":"<p>El borde rodea el contenido y el relleno de un elemento. Se puede personalizar su grosor, estilo y color. El borde est\u00e1 por fuera del padding, lo que lo convierte en una zona visual importante para separar elementos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-border","title":"Propiedad <code>border</code>","text":"<pre><code>div {\n  border: 2px solid blue;\n}\n</code></pre> <p>Este c\u00f3digo aplica un borde de 2px de grosor y color azul. Los valores de la propiedad <code>border</code> son:</p> <ul> <li>Grosor: <code>2px</code></li> <li>Estilo: <code>solid</code> (puede ser <code>dotted</code>, <code>dashed</code>, <code>double</code>, etc.)</li> <li>Color: <code>blue</code></li> </ul> <p>Si deseas aplicar cada propiedad por separado, puedes usar las siguientes propiedades: <code>border-width</code>, <code>border-style</code>, <code>border-color</code>.</p> <pre><code>div {\n  border-width: 2px;\n  border-style: solid;\n  border-color: blue;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedades-para-bordes-de-cada-lado","title":"Propiedades para bordes de cada lado","text":"<p>Al igual que con el padding, podemos aplicar bordes individuales a cada lado del elemento. Esto se hace con las propiedades <code>border-top</code>, <code>border-right</code>, <code>border-bottom</code>, y <code>border-left</code>.</p> <pre><code>div {\n  border-top: 2px solid red;\n  border-right: 1px dashed green;\n  border-bottom: 3px dotted blue;\n  border-left: 5px double black;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#33-margenes-margin","title":"3.3 M\u00e1rgenes (Margin)","text":"<p>El margen es el espacio exterior de la caja, separando el elemento de otros elementos. Al igual que el padding, se puede aplicar de manera uniforme o con valores diferentes para cada lado.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-margin","title":"Propiedad <code>margin</code>","text":"<pre><code>div {\n  margin: 20px;\n}\n</code></pre> <p>Este c\u00f3digo aplica 20px de margen alrededor de un elemento, separ\u00e1ndolo de los elementos cercanos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-margin-con-valores-separados","title":"Propiedad <code>margin</code> con valores separados","text":"<pre><code>div {\n  margin: 10px 20px 30px 40px;\n}\n</code></pre> <p>Aqu\u00ed el orden de los valores es el mismo que para padding:</p> <ul> <li>top: 10px</li> <li>right: 20px</li> <li>bottom: 30px</li> <li>left: 40px</li> </ul> <p></p> CSS Box CSS Box<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n      #container {\n        border: 1px solid red;\n        background-color: aliceblue;\n      }\n      #content {\n        background-color: antiquewhite;\n        border: 5px solid red;\n        padding: 5px 10px;\n        margin: 10px 20px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n      &lt;div id=\"content\"&gt;Hello World!&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#34-propiedades-de-posicionamiento-top-right-bottom-left","title":"3.4 Propiedades de Posicionamiento: top, right, bottom, left","text":"<p>Las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code> se utilizan en el contexto de elementos posicionados con la propiedad <code>position</code>. Estas propiedades mueven un elemento dentro de su contenedor en funci\u00f3n de su tipo de posici\u00f3n. </p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#341-propiedades-de-posicionamiento","title":"3.4.1 Propiedades de Posicionamiento","text":"<p>Las propiedades de posici\u00f3n como <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code> definen la ubicaci\u00f3n de los elementos respecto a su contenedor o a otros elementos en la p\u00e1gina. Estas propiedades solo se aplican si el elemento tiene una propiedad <code>position</code> distinta a <code>static</code> (por defecto). Las opciones m\u00e1s comunes son <code>relative</code>, <code>absolute</code>, y <code>fixed</code>. </p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#top-y-left-con-position-absolute","title":"<code>top</code> y <code>left</code> con <code>position: absolute</code>","text":"<p>Cuando un elemento tiene la propiedad <code>position: absolute</code>, sus valores de <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code> se utilizan para mover el elemento respecto a su contenedor m\u00e1s cercano con <code>position: relative</code>.</p> <pre><code>  div { position: absolute; top: 50px; left: 100px; }\n````\n\nEn este ejemplo, el **elemento `div`** ser\u00e1 posicionado **50px** desde la parte superior y **100px** desde la parte izquierda de su contenedor m\u00e1s cercano con `position: relative`.\n\n#### **`top` y `left` con `position: relative`**\n\nCuando un elemento tiene la propiedad `position: relative`, se mueve respecto a su **ubicaci\u00f3n original**.\n\n```css\ndiv {\n  position: relative;\n  top: 20px;\n  left: 30px;\n}\n</code></pre> <p>Aqu\u00ed, el elemento <code>div</code> se mover\u00e1 20px hacia abajo y 30px hacia la derecha desde su posici\u00f3n inicial en el flujo de la p\u00e1gina.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#342-orden-de-las-propiedades","title":"3.4.2 Orden de las Propiedades","text":"<p>En CSS, podemos definir varias propiedades en una sola l\u00ednea. Esto ayuda a escribir c\u00f3digo m\u00e1s limpio y eficiente. Cuando se combinan propiedades de m\u00e1rgenes, relleno y bordes, los valores siguen un orden est\u00e1ndar:</p> <ol> <li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>: Si definimos estas propiedades por separado, lo hacemos en este orden, de arriba a abajo.</li> <li><code>margin</code> y <code>padding</code>: Si se definen las propiedades por separado, el orden es: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>.</li> </ol>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-sintaxis-combinada","title":"Ejemplo de sintaxis combinada","text":"<pre><code>div {\n  margin: 20px 30px 40px 50px; /* top right bottom left */\n  padding: 10px 15px; /* top-bottom left-right */\n  border: 2px solid red;\n}\n</code></pre> <p>Aqu\u00ed, <code>margin</code> y <code>padding</code> se definen con valores en sentido horario (comenzando desde la parte superior) y las dimensiones del borde son independientes de este orden.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen_2","title":"Resumen","text":"<p>En CSS, podemos utilizar las propiedades padding, border y margin para controlar el espaciado y el borde de los elementos. Las propiedades top, right, bottom y left permiten ubicar los elementos en el contenedor, mientras que se pueden definir de manera individual o conjunta, dependiendo de las necesidades del dise\u00f1o.</p> <p>Puedes ampliar contenido en w3Schools</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#35-unidades-de-medida-en-css","title":"3.5 Unidades de Medida en CSS","text":"<p>En CSS, las unidades de medida son esenciales para definir tama\u00f1os de elementos, m\u00e1rgenes, rellenos y otros estilos. Existen diferentes tipos de unidades que se pueden utilizar, y la elecci\u00f3n de la unidad adecuada depende de la situaci\u00f3n y el dise\u00f1o que queremos implementar.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#351-unidades-absolutas","title":"3.5.1 Unidades Absolutas","text":"<p>Las unidades absolutas est\u00e1n basadas en un valor fijo y no cambian en funci\u00f3n del dispositivo o de la resoluci\u00f3n de la pantalla.</p> <ul> <li>px (p\u00edxeles): Es la unidad m\u00e1s com\u00fan y se utiliza para establecer tama\u00f1os de elementos fijos. Un p\u00edxel es la unidad de medida b\u00e1sica para las pantallas, pero su tama\u00f1o puede variar ligeramente en dispositivos con pantallas de alta resoluci\u00f3n (como los dispositivos Retina).</li> </ul> <pre><code>div {\n  width: 300px;\n}\n</code></pre> <ul> <li>cm, mm (cent\u00edmetros, mil\u00edmetros): Estas unidades est\u00e1n basadas en el tama\u00f1o f\u00edsico y se utilizan muy poco en la web.</li> </ul> <pre><code>div {\n  width: 10cm;\n}\n</code></pre> <ul> <li>in (pulgadas): Similar a cm y mm, se utiliza poco en la web, pero puede ser \u00fatil cuando trabajamos con medios f\u00edsicos como impresi\u00f3n.</li> </ul> <pre><code>div {\n  width: 2in;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#352-unidades-relativas","title":"3.5.2 Unidades Relativas","text":"<p>Las unidades relativas son m\u00e1s flexibles y se ajustan a factores como el tama\u00f1o de la pantalla, el tama\u00f1o de fuente o el contenedor del elemento.</p> <ul> <li>% (porcentaje): El porcentaje se utiliza en relaci\u00f3n con el elemento contenedor. Por ejemplo, si un contenedor tiene un ancho del 100%, un elemento con <code>width: 50%</code> tendr\u00e1 la mitad del ancho del contenedor.</li> </ul> <pre><code>div {\n  width: 50%;\n}\n</code></pre> <ul> <li>em: Esta unidad est\u00e1 relacionada con el tama\u00f1o de la fuente del elemento. <code>1em</code> es igual al tama\u00f1o de la fuente del elemento en el que se utiliza. Si el tama\u00f1o de la fuente es de 16px, entonces <code>1em</code> equivale a 16px.</li> </ul> <pre><code>p {\n  font-size: 2em; /* 32px si la fuente base es 16px */\n}\n</code></pre> <ul> <li>rem (root em): Similar a <code>em</code>, pero en lugar de basarse en el tama\u00f1o de la fuente del elemento, <code>rem</code> se basa en el tama\u00f1o de la fuente ra\u00edz (<code>&lt;html&gt;</code>). Esto lo hace m\u00e1s predecible y f\u00e1cil de usar en toda la p\u00e1gina.</li> </ul> <pre><code>div {\n  width: 10rem; /* 160px si la fuente ra\u00edz es 16px */\n}\n</code></pre> <ul> <li>vw y vh (viewport width y height): Estas unidades est\u00e1n basadas en el tama\u00f1o de la ventana del navegador. <code>1vw</code> es el 1% del ancho de la ventana y <code>1vh</code> es el 1% de la altura de la ventana.</li> </ul> <pre><code>div {\n  width: 50vw; /* 50% del ancho de la ventana del navegador */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#36-propiedades-de-tamano-width-height-left-y-right","title":"3.6 Propiedades de Tama\u00f1o: width, height, left y right","text":"<p>En CSS, <code>width</code>, <code>height</code>, <code>left</code> y <code>right</code> son propiedades fundamentales que permiten definir las dimensiones de los elementos y su ubicaci\u00f3n en el dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#361-definir-width-y-height","title":"3.6.1 Definir width y height","text":"<ul> <li><code>width</code>: Especifica el ancho de un elemento.</li> </ul> <pre><code>div {\n  width: 200px;\n}\n</code></pre> <ul> <li><code>height</code>: Especifica la altura de un elemento.</li> </ul> <pre><code>div {\n  height: 100px;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#362-unidades-para-width-y-height","title":"3.6.2 Unidades para width y height","text":"<p>Puedes usar cualquier unidad de medida que hemos visto (px, %, em, etc.) para estas propiedades.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-usando-diferentes-unidades-para-width-y-height","title":"Ejemplo: Usando diferentes unidades para <code>width</code> y <code>height</code>:","text":"<pre><code>div {\n  width: 50%; /* 50% del contenedor */\n  height: 10em; /* 10 veces el tama\u00f1o de la fuente */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#363-definir-left-y-right","title":"3.6.3 Definir left y right","text":"<p>Las propiedades <code>left</code> y <code>right</code> se utilizan para posicionar un elemento en relaci\u00f3n con su contenedor (usualmente con position: absolute o position: relative).</p> <ul> <li><code>left</code>: Define la distancia entre el borde izquierdo de un elemento y el borde izquierdo de su contenedor.</li> <li><code>right</code>: Define la distancia entre el borde derecho de un elemento y el borde derecho de su contenedor.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-usando-left-y-right-para-posicionar-un-elemento","title":"Ejemplo: Usando <code>left</code> y <code>right</code> para posicionar un elemento:","text":"<pre><code>div {\n  position: absolute;\n  left: 20px; /* 20px desde el borde izquierdo del contenedor */\n  right: 20px; /* 20px desde el borde derecho del contenedor */\n  top: 50px;\n  height: 100px;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#364-definir-dimensiones-de-manera-separada","title":"3.6.4 Definir dimensiones de manera separada","text":"<p>En algunas situaciones, podemos querer definir solo algunas de las dimensiones de un elemento, sin tener que especificar todas.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#1-definir-solo-width-y-height","title":"1. Definir solo <code>width</code> y <code>height</code>","text":"<p>Puedes definir \u00fanicamente <code>width</code> o <code>height</code>, y el otro valor tomar\u00e1 el valor por defecto. Por ejemplo, si solo defines el ancho de un elemento y no defines la altura, el navegador ajustar\u00e1 la altura autom\u00e1ticamente seg\u00fan el contenido.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo","title":"Ejemplo:","text":"<pre><code>div {\n  width: 200px;\n  /* La altura ser\u00e1 autom\u00e1tica seg\u00fan el contenido */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#2-definir-top-left-right-o-bottom","title":"2. Definir <code>top</code>, <code>left</code>, <code>right</code> o <code>bottom</code>","text":"<p>Cuando un elemento est\u00e1 posicionado de manera absoluta o relativa, solo necesitas definir las propiedades de ubicaci\u00f3n (<code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code>) que quieras usar. Las otras propiedades no se necesitar\u00e1n.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo_1","title":"Ejemplo:","text":"<pre><code>div {\n  position: absolute;\n  top: 10px; /* 10px desde el borde superior */\n  left: 20px; /* 20px desde el borde izquierdo */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen_3","title":"Resumen","text":"<p>En CSS, podemos utilizar diferentes unidades de medida para adaptar los estilos a diferentes dispositivos y situaciones. Es importante entender c\u00f3mo utilizar unidades relativas como <code>em</code>, <code>rem</code>, <code>%</code> y unidades absolutas como <code>px</code>, <code>cm</code> para lograr un dise\u00f1o flexible. Adem\u00e1s, el uso de las propiedades <code>width</code>, <code>height</code>, <code>left</code>, y <code>right</code> junto con diferentes unidades nos permite crear dise\u00f1os din\u00e1micos y adaptables a cualquier pantalla.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#41-propiedades-de-fuente","title":"4.1 Propiedades de Fuente","text":"<p>Las propiedades de fuente controlan la tipograf\u00eda del texto. Son esenciales para definir la apariencia del texto y hacerlo m\u00e1s legible y atractivo. A continuaci\u00f3n, veremos c\u00f3mo se configuran estas propiedades y qu\u00e9 valores pueden tomar.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#font-family","title":"<code>font-family</code>","text":"<p>La propiedad <code>font-family</code> se utiliza para definir la familia tipogr\u00e1fica del texto. Puedes especificar una lista de fuentes como alternativas, de modo que si la primera fuente no est\u00e1 disponible, el navegador utilizar\u00e1 la siguiente de la lista.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-font-family","title":"Valores de <code>font-family</code>","text":"<ul> <li>Nombres de fuentes: Se especifican como cadenas de texto. Ejemplo: <code>'Arial'</code>, <code>'Times New Roman'</code>, etc.</li> <li>Fuentes gen\u00e9ricas: Si no se encuentra la fuente exacta, se puede recurrir a fuentes gen\u00e9ricas como <code>serif</code>, <code>sans-serif</code>, <code>monospace</code>, etc.</li> </ul> <pre><code>p {\n  font-family: \"Arial\", sans-serif;\n}\n</code></pre> <p>En este ejemplo, si Arial no est\u00e1 disponible, se utilizar\u00e1 una fuente sans-serif como alternativa.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#font-size","title":"<code>font-size</code>","text":"<p>La propiedad <code>font-size</code> define el tama\u00f1o de la fuente del texto. Los valores pueden ser especificados en varias unidades de medida.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-font-size","title":"Valores de <code>font-size</code>","text":"<ul> <li>px (p\u00edxeles): Una unidad absoluta, muy com\u00fan en CSS.</li> <li>em: Relativo al tama\u00f1o de la fuente del elemento padre.</li> <li>rem: Relativo al tama\u00f1o de la fuente ra\u00edz (<code>&lt;html&gt;</code>).</li> <li>%: Relativo al tama\u00f1o de la fuente del elemento contenedor.</li> <li>vw/vh: Relativo al tama\u00f1o de la ventana del navegador.</li> </ul> <pre><code>h1 {\n  font-size: 24px;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#font-weight","title":"<code>font-weight</code>","text":"<p>La propiedad <code>font-weight</code> controla el grosor de la fuente. Los valores que puede tomar son:</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-font-weight","title":"Valores de <code>font-weight</code>","text":"<ul> <li>normal: El grosor predeterminado de la fuente.</li> <li>bold: Fuente en negrita.</li> <li>lighter: Fuente m\u00e1s delgada que el valor <code>normal</code>.</li> <li>bolder: Fuente m\u00e1s gruesa que <code>normal</code>.</li> <li>N\u00fameros: Se puede usar un valor num\u00e9rico entre 100 y 900, donde <code>100</code> es la m\u00e1s delgada y <code>900</code> es la m\u00e1s gruesa.</li> </ul> <pre><code>p {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#42-propiedades-de-texto","title":"4.2 Propiedades de Texto","text":"<p>Estas propiedades afectan el comportamiento y la apariencia del texto, permitiendo modificar alineaci\u00f3n, espaciado entre l\u00edneas y transformaci\u00f3n de texto.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#text-align","title":"<code>text-align</code>","text":"<p>La propiedad <code>text-align</code> se utiliza para alinear el texto dentro de su contenedor. Los valores disponibles son:</p> Valor Descripci\u00f3n <code>left</code> Alinea el texto a la izquierda (valor predeterminado). <code>right</code> Alinea el texto a la derecha. <code>center</code> Alinea el texto al centro. <code>justify</code> Alinea el texto de manera justificada (se distribuye a lo largo de todo el contenedor)."},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-text-align","title":"Ejemplo de <code>text-align</code>","text":"<pre><code>h1 {\n  text-align: center;\n}\n</code></pre> <p>Este ejemplo centra el texto del encabezado <code>h1</code>. Si el contenido del <code>h1</code> fuera un p\u00e1rrafo largo, se alinear\u00eda de manera centrada en su contenedor.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#line-height","title":"<code>line-height</code>","text":"<p>La propiedad <code>line-height</code> controla la altura de las l\u00edneas de texto. Es muy \u00fatil para mejorar la legibilidad de un bloque de texto, especialmente en p\u00e1rrafos con mucho contenido.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-line-height","title":"Valores de <code>line-height</code>","text":"<ul> <li>N\u00famero: El valor de <code>line-height</code> ser\u00e1 multiplicado por el tama\u00f1o de la fuente.</li> <li>Unidad: Puede ser un valor en px, em, rem, etc.</li> <li>Porcentaje: Se calcula como un porcentaje del tama\u00f1o de la fuente.</li> </ul> <pre><code>p {\n  line-height: 1.5; /* 1.5 veces el tama\u00f1o de la fuente */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#text-transform","title":"<code>text-transform</code>","text":"<p>La propiedad <code>text-transform</code> permite modificar la transformaci\u00f3n del texto (may\u00fasculas, min\u00fasculas, etc.).</p> Valor Descripci\u00f3n <code>uppercase</code> Convierte todo el texto a may\u00fasculas. <code>lowercase</code> Convierte todo el texto a min\u00fasculas. <code>capitalize</code> Convierte la primera letra de cada palabra a may\u00fascula."},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-text-transform","title":"Ejemplo de <code>text-transform</code>","text":"<pre><code>h1 {\n  text-transform: uppercase;\n}\n</code></pre> <p>Este ejemplo convierte todo el texto dentro del <code>h1</code> a may\u00fasculas.</p> <p></p> Texto Texto<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Estilos de Texto&lt;/title&gt;\n    &lt;style&gt;\n      p:nth-child(1) {\n        font-size: 18px;\n        font-family: \"Arial\", sans-serif;\n        font-weight: bold;\n        color: #4caf50;\n      }\n\n      p:nth-child(2) {\n        font-size: 16px;\n        font-family: \"Times New Roman\", serif;\n        font-style: italic;\n        color: #ff6347;\n      }\n\n      p:nth-child(3) {\n        font-size: 14px;\n        font-family: \"Courier New\", monospace;\n        text-decoration: underline;\n        color: #1e90ff;\n      }\n\n      p:nth-child(4) {\n        font-size: 20px;\n        font-family: \"Verdana\", sans-serif;\n        text-transform: uppercase;\n        color: #8a2be2;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Este es el primer p\u00e1rrafo, con un tama\u00f1o de fuente de 18px, en **negrita**\n      y de color verde.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      Este es el segundo p\u00e1rrafo, con un tama\u00f1o de fuente de 16px, en\n      **cursiva** y de color tomate.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      Este es el tercer p\u00e1rrafo, con un tama\u00f1o de fuente de 14px, en\n      **monoespaciado** y con subrayado, de color azul.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      Este es el cuarto p\u00e1rrafo, con un tama\u00f1o de fuente de 20px, en\n      **may\u00fasculas** y de color morado.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen_4","title":"Resumen","text":"<ul> <li><code>font-family</code> se usa para seleccionar la tipograf\u00eda que se aplicar\u00e1 al texto. </li> <li><code>font-size</code> define el tama\u00f1o de la  fuente, pudiendo utilizarse en diferentes unidades. </li> <li><code>font-weight</code> controla el grosor de la fuente, y puede tomar valores como <code>bold</code>, <code>normal</code> o valores num\u00e9ricos. </li> <li><code>text-align</code> se usa para alinear el texto dentro de su contenedor, con valores como <code>left</code>, <code>right</code>, <code>center</code>, y <code>justify</code>. </li> <li><code>line-height</code> es \u00fatil para definir el espaciado entre las l\u00edneas de texto. </li> <li><code>text-transform</code> permite transformar el texto a may\u00fasculas, min\u00fasculas o apitalizar cada palabra. </li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#5-propiedades-de-colores-y-fondos","title":"5. Propiedades de Colores y Fondos","text":"<p>En estepunto, abordamos c\u00f3mo aplicar colores y fondos a los elementos de una p\u00e1gina web. Estas propiedades son fundamentales para darle estilo a los elementos, asegurando que se vean atractivos y sean f\u00e1cilmente legibles. Vamos a profundizar en c\u00f3mo se manejan los colores, las im\u00e1genes de fondo, y sus propiedades asociadas para crear una web atractiva. </p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#51-colores-en-css","title":"5.1 Colores en CSS","text":"<p>En CSS, los colores pueden ser definidos de diferentes maneras. Algunas de las m\u00e1s comunes son: nombres, valores hexadecimales, rgb y rgba. </p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#metodos-para-definir-colores","title":"M\u00e9todos para definir colores","text":"<ol> <li> <p>Nombres de colores: CSS permite utilizar nombres predefinidos para los colores. Algunos ejemplos son <code>red</code>, <code>blue</code>, <code>green</code>, entre otros.  <pre><code>  h1 { color: red; }\n````\n\n2. **Valores hexadecimales**: Esta forma de definir colores utiliza el sistema hexadecimal. El formato es **# RRGGBB**, donde **RR**, **GG**, y **BB** son valores hexadecimales para el rojo, verde y azul.\n\n```css\nh2 {\n  color: #3498db; /* Azul claro */\n}\n</code></pre></p> </li> <li> <p>rgb(): El formato rgb() define el color utilizando valores enteros para los tres componentes de color: rojo, verde y azul. Los valores van de 0 a 255.</p> </li> </ol> <pre><code>h3 {\n  color: rgb(52, 152, 219); /* Azul claro en RGB */\n}\n</code></pre> <ol> <li>rgba(): El formato rgba() es similar a rgb(), pero agrega un cuarto par\u00e1metro de opacidad, lo que permite crear colores semitransparentes. Este valor va de 0 (completamente transparente) a 1 (completamente opaco).</li> </ol> <pre><code>h4 {\n  color: rgba(52, 152, 219, 0.5); /* Azul claro con 50% de opacidad */\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#colores-con-nombre-mas-comunes","title":"Colores con nombre m\u00e1s comunes","text":"<p>Algunos colores con nombre m\u00e1s comunes en CSS incluyen:</p> Color C\u00f3digo de color <code>red</code> #FF0000 <code>green</code> #008000 <code>blue</code> #0000FF <code>white</code> #FFFFFF <code>black</code> #000000 <code>gray</code> #808080 <code>yellow</code> #FFFF00 <code>orange</code> #FFA500 <code>pink</code> #FFC0CB <code>purple</code> #800080 <code>brown</code> #A52A2A <code>cyan</code> #00FFFF"},{"location":"content/MF_0967_3/UF2218/unidad02/#52-fondos-en-css","title":"5.2 Fondos en CSS","text":"<p>El fondo de un elemento se puede definir utilizando las propiedades <code>background-color</code>, <code>background-image</code>, entre otras. A continuaci\u00f3n, veremos c\u00f3mo podemos controlar estos fondos y qu\u00e9 opciones tenemos disponibles.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-background-color","title":"Propiedad <code>background-color</code>","text":"<p>La propiedad <code>background-color</code> establece el color de fondo de un elemento.</p> <pre><code>body {\n  background-color: lightblue;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-background-image","title":"Propiedad <code>background-image</code>","text":"<p>La propiedad <code>background-image</code> se utiliza para establecer una imagen de fondo. Puedes definir la imagen usando una URL que apunte a una imagen, ya sea en l\u00ednea o alojada en tu servidor.</p> <pre><code>body {\n  background-image: url(\"background.jpg\");\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedades-adicionales-de-fondo","title":"Propiedades adicionales de fondo","text":"<p>Adem\u00e1s de <code>background-color</code> y <code>background-image</code>, hay varias otras propiedades que nos permiten controlar el comportamiento del fondo.</p> <ul> <li><code>background-position</code>: Define la posici\u00f3n de la imagen de fondo. Se pueden usar valores en px, %, o palabras clave como <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, o <code>center</code>.</li> </ul> <pre><code>body {\n  background-image: url(\"background.jpg\");\n  background-position: center center;\n}\n</code></pre> <ul> <li><code>background-size</code>: Controla el tama\u00f1o de la imagen de fondo. Los valores m\u00e1s comunes son <code>cover</code> (cubre todo el contenedor) y <code>contain</code> (ajusta la imagen al tama\u00f1o del contenedor).</li> </ul> <pre><code>body {\n  background-image: url(\"background.jpg\");\n  background-size: cover;\n}\n</code></pre> <ul> <li><code>background-attachment</code>: Define si la imagen de fondo se mueve con el contenido al hacer scroll o si permanece fija. Los valores son <code>scroll</code> (predeterminado) o <code>fixed</code> (fija).</li> </ul> <pre><code>body {\n  background-image: url(\"background.jpg\");\n  background-attachment: fixed;\n  background-size: cover;\n}\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#53-repeticion-de-la-imagen-de-fondo","title":"5.3 Repetici\u00f3n de la Imagen de Fondo","text":"<p>En muchos casos, las im\u00e1genes de fondo se repiten para llenar el \u00e1rea disponible. Sin embargo, tambi\u00e9n puedes detener la repetici\u00f3n y ajustar la imagen de fondo de acuerdo a las necesidades del dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-background-repeat","title":"Propiedad <code>background-repeat</code>","text":"<p>La propiedad <code>background-repeat</code> controla si la imagen de fondo se repite en las direcciones horizontal o vertical, o si no se repite en absoluto.</p> Valor Descripci\u00f3n <code>repeat</code> La imagen de fondo se repite tanto horizontal como verticalmente. <code>no-repeat</code> La imagen de fondo no se repite. <code>repeat-x</code> La imagen se repite solo horizontalmente. <code>repeat-y</code> La imagen se repite solo verticalmente. <pre><code>body {\n  background-image: url(\"background.jpg\");\n  background-repeat: no-repeat;\n  background-position: center;\n}\n</code></pre> <p>Este ejemplo muestra una imagen de fondo centrada que no se repite.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#54-fondo-fijo","title":"5.4 Fondo Fijo","text":"<p>En algunos casos, querr\u00e1s que la imagen de fondo se mantenga fija mientras se desplaza el contenido. Esto se puede lograr utilizando la propiedad <code>background-attachment</code>.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-background-attachment","title":"Propiedad <code>background-attachment</code>","text":"Valor Descripci\u00f3n <code>scroll</code> La imagen de fondo se desplaza con el contenido. <code>fixed</code> La imagen de fondo permanece fija mientras se hace scroll. <pre><code>body {\n  background-image: url(\"background.jpg\");\n  background-attachment: fixed;\n  background-size: cover;\n}\n</code></pre> <p>En este ejemplo, la imagen de fondo permanecer\u00e1 fija incluso cuando el usuario haga scroll en la p\u00e1gina.</p> <p>Ahora os dejo deos ejemplos y el c\u00f3digo para que pod\u00e1is practicar:</p> <p>fondo que ocupa ajustandose todo el ancho de la ventana</p> <p></p> fondo cover fondo cover<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n      &lt;title&gt;Document&lt;/title&gt;\n      &lt;style&gt;\n          body {\n              background-image: url(../img/fondo.jpg);\n              background-size: cover;\n          }\n          div {\n              background-color: lightgray;\n              opacity: 0.60;\n          }\n          p {\n              color:black;\n              font-weight: bold;\n          }\n      &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;div&gt;\n      &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates beatae modi, recusandae voluptatem et dolorem ad sit explicabo quas, saepe assumenda. Soluta ullam, magnam, adipisci expedita minus aliquid, quibusdam quidem esse labore quaerat praesentium perspiciatis ex obcaecati. Velit a dolor architecto tempore nam quam esse tenetur ab repellat. Maxime neque quas error quae dicta fuga soluta natus exercitationem atque asperiores ducimus incidunt officiis ullam eaque enim suscipit temporibus reiciendis perferendis quisquam, obcaecati repudiandae impedit! Possimus praesentium dolorum natus facere quo mollitia, illo quas dolores modi veritatis debitis nisi totam excepturi et necessitatibus a nam non ducimus repellendus? Facilis libero voluptatum \n      &lt;/p&gt;\n      &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates beatae modi, recusandae voluptatem et dolorem ad sit explicabo quas, saepe assumenda. Soluta ullam, magnam, adipisci expedita minus aliquid, quibusdam quidem esse labore quaerat praesentium perspiciatis ex obcaecati. Velit a dolor architecto tempore nam quam esse tenetur ab repellat. Maxime neque quas error quae dicta fuga soluta natus exercitationem atque asperiores ducimus incidunt officiis ullam eaque enim suscipit temporibus reiciendis perferendis quisquam, obcaecati repudiandae impedit! Possimus praesentium dolorum natus facere quo mollitia, illo quas dolores modi veritatis debitis \n      &lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>fondo fijo en la parte lateral izquierda y arriba</p> <p></p> fondo fondo<pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n      &lt;title&gt;Document&lt;/title&gt;\n      &lt;style&gt;\n          body {\n              background-image: url(../img/fondo.jpg);\n              background-repeat: no-repeat;\n              background-attachment: fixed;\n              background-position: top right;\n          }\n          div {\n              background-color: lightgray;\n              opacity: 0.60;\n          }\n          p {\n              color:black;\n              font-weight: bold;\n          }\n      &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;div&gt;\n      &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates beatae modi, recusandae voluptatem et dolorem ad sit explicabo quas, saepe assumenda. Soluta ullam, magnam, adipisci expedita minus aliquid, quibusdam quidem esse labore quaerat praesentium perspiciatis ex obcaecati. Velit a dolor architecto tempore nam quam esse tenetur ab repellat. Maxime neque quas error quae dicta fuga soluta natus exercitationem atque asperiores ducimus incidunt officiis ullam eaque enim suscipit temporibus reiciendis perferendis quisquam, obcaecati repudiandae impedit! Possimus praesentium dolorum natus facere quo mollitia, illo quas dolores modi veritatis debitis nisi totam excepturi et necessitatibus a nam non ducimus repellendus? Facilis libero voluptatum \n      &lt;/p&gt;\n      &lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates beatae modi, recusandae voluptatem et dolorem ad sit explicabo quas, saepe assumenda. Soluta ullam, magnam, adipisci expedita minus aliquid, quibusdam quidem esse labore quaerat praesentium perspiciatis ex obcaecati. Velit a dolor architecto tempore nam quam esse tenetur ab repellat. Maxime neque quas error quae dicta fuga soluta natus exercitationem atque asperiores ducimus incidunt officiis ullam eaque enim suscipit temporibus reiciendis perferendis quisquam, obcaecati repudiandae impedit! Possimus praesentium dolorum natus facere quo mollitia, illo quas dolores modi veritatis debitis \n      &lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#resumen_5","title":"Resumen","text":"<ul> <li>Colores: Puedes definir colores usando nombres, hexadecimales, rgb o rgba, lo que te permite flexibilidad en el dise\u00f1o. Adem\u00e1s, <code>rgba()</code> permite incluir opacidad en los colores.</li> <li>Fondos: CSS permite trabajar con colores de fondo, im\u00e1genes de fondo, y controlar su posici\u00f3n, tama\u00f1o y repetici\u00f3n.</li> <li>Repetici\u00f3n de Fondo: Controla c\u00f3mo la imagen de fondo se repite usando la propiedad <code>background-repeat</code>.</li> <li>Fondo Fijo: Utiliza la propiedad <code>background-attachment</code> para fijar la imagen de fondo durante el desplazamiento de la p\u00e1gina.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#6-opacidades","title":"6. Opacidades","text":"<p>La propiedad <code>opacity</code> permite definir la opacidad de un elemento (desde 0.0, completamente transparente, hasta 1.0, completamente opaco).</p> <pre><code>div {\n  opacity: 0.5;\n}\n</code></pre> <p>Parece que la herramienta se ha desactivado, pero aqu\u00ed tienes el contenido ampliado sobre Posicionamiento en CSS y el ejemplo completo para que puedas copiarlo directamente.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#7-posicionamiento","title":"7. Posicionamiento","text":"<p>En este punto, vamos a profundizar en las principales propiedades de posicionamiento en CSS, las cuales nos permiten ubicarnos de manera precisa dentro del dise\u00f1o de una p\u00e1gina web. Tambi\u00e9n veremos c\u00f3mo ubicar elementos dentro de un contenedor para crear dise\u00f1os m\u00e1s flexibles, como por ejemplo un layout de im\u00e1genes que se ajusta din\u00e1micamente al tama\u00f1o de la pantalla.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#71-flotar-float-y-clear","title":"7.1 Flotar (float y clear)","text":"<p>La propiedad <code>float</code> permite que un elemento se desplace a la izquierda o derecha dentro de su contenedor, permitiendo que otros elementos fluyan alrededor de \u00e9l. Esto es \u00fatil para crear dise\u00f1os como galer\u00edas de im\u00e1genes o textos que rodean una imagen.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-float","title":"Propiedad <code>float</code>","text":"<p>La propiedad <code>float</code> se usa com\u00fanmente para colocar im\u00e1genes o elementos en una fila dentro de su contenedor, y los elementos que vienen despu\u00e9s fluyen a su alrededor.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-float","title":"Valores de <code>float</code>:","text":"<ul> <li><code>left</code>: El elemento se coloca a la izquierda del contenedor.</li> <li><code>right</code>: El elemento se coloca a la derecha del contenedor.</li> <li><code>none</code>: El elemento no flota (valor predeterminado).</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-float-usar-float-para-alinear-imagenes","title":"Ejemplo de <code>float</code>: Usar <code>float</code> para alinear im\u00e1genes","text":"<pre><code>img {\n  float: left;\n  margin-right: 10px;\n  width: 150px;\n  height: 150px;\n  border: 1px solid red;\n}\n</code></pre> <pre><code>&lt;div&gt;\n  &lt;img src=\"imagen1.jpg\" alt=\"Imagen 1\" /&gt;\n  &lt;img src=\"imagen2.jpg\" alt=\"Imagen 2\" /&gt;\n  &lt;img src=\"imagen3.jpg\" alt=\"Imagen 3\" /&gt;\n&lt;/div&gt;\n</code></pre> <p>Aqu\u00ed, las im\u00e1genes se alinear\u00e1n a la izquierda y quedar\u00e1n juntas, fluyendo a la izquierda dentro de su contenedor. La propiedad <code>margin-right</code> separa las im\u00e1genes.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#propiedad-clear","title":"Propiedad <code>clear</code>","text":"<p>La propiedad <code>clear</code> se utiliza para evitar que otros elementos floten alrededor de un determinado elemento. Por lo general, se usa para \"limpiar\" el flujo de los elementos flotantes y garantizar que un contenedor no se solape con los elementos flotantes anteriores.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-clear","title":"Valores de <code>clear</code>:","text":"<ul> <li><code>both</code>: El elemento no puede estar a la izquierda o derecha de ning\u00fan otro elemento flotante.</li> <li><code>left</code>: El elemento no puede estar a la izquierda de ning\u00fan elemento flotante.</li> <li><code>right</code>: El elemento no puede estar a la derecha de ning\u00fan elemento flotante.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-clear-usar-clear-para-evitar-que-los-elementos-floten-alrededor-de-un-contenedor","title":"Ejemplo de <code>clear</code>: Usar <code>clear</code> para evitar que los elementos floten alrededor de un contenedor.","text":"<pre><code>.clearfix {\n  clear: both;\n}\n</code></pre> <pre><code>&lt;div class=\"clearfix\"&gt;\n  &lt;p&gt;Este p\u00e1rrafo no flotar\u00e1 alrededor de los elementos flotantes.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#72-display","title":"7.2 Display","text":"<p>La propiedad <code>display</code> controla c\u00f3mo se muestra un elemento en el flujo de la p\u00e1gina. Dependiendo de su valor, se determina si el elemento ocupa una l\u00ednea completa, se coloca de manera inline (en l\u00ednea) o se organiza de otra manera.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-display","title":"Valores de <code>display</code>:","text":"Valor Descripci\u00f3n <code>block</code> El elemento ocupa todo el ancho disponible, y comienza en una nueva l\u00ednea. <code>inline</code> El elemento se muestra en l\u00ednea, es decir, no genera un salto de l\u00ednea. <code>inline-block</code> El elemento se muestra en l\u00ednea, pero permite definir dimensiones (ancho y alto). <code>none</code> El elemento no se muestra en absoluto (no ocupa espacio en el dise\u00f1o)."},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-display-usar-inline-para-colocar-imagenes-en-linea","title":"Ejemplo de <code>display</code>: Usar <code>inline</code> para colocar im\u00e1genes en l\u00ednea","text":"<pre><code>img {\n  display: inline;\n  width: 150px;\n  height: 150px;\n}\n</code></pre> <p>Aqu\u00ed las im\u00e1genes se mostrar\u00e1n en l\u00ednea una al lado de la otra, sin generar saltos de l\u00ednea.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#73-position","title":"7.3 Position","text":"<p>La propiedad <code>position</code> es crucial para controlar la ubicaci\u00f3n de los elementos en una p\u00e1gina. Dependiendo de su valor, un elemento se puede ubicar de manera relativa, absoluta, fija o en su posici\u00f3n predeterminada.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-position","title":"Valores de <code>position</code>:","text":"<ul> <li><code>static</code>: Es la posici\u00f3n predeterminada para todos los elementos. Los elementos se colocan en el flujo normal del documento.</li> <li><code>relative</code>: El elemento se coloca en su ubicaci\u00f3n original, pero se puede mover relativamente a su posici\u00f3n mediante las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> o <code>left</code>.</li> <li><code>absolute</code>: El elemento se coloca en relaci\u00f3n con el contenedor m\u00e1s cercano que tiene <code>position: relative</code> o <code>position: absolute</code>. Se puede mover utilizando <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>.</li> <li><code>fixed</code>: El elemento se coloca en relaci\u00f3n con la ventana del navegador. Permanece fijo incluso cuando el usuario hace scroll.</li> <li><code>sticky</code>: El elemento se comporta como <code>relative</code> hasta que se desplaza fuera de su contenedor, momento en el que se comporta como <code>fixed</code>.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-position-posicionar-un-elemento-de-manera-absoluta","title":"Ejemplo de <code>position</code>: Posicionar un elemento de manera absoluta","text":"<pre><code>div {\n  position: absolute;\n  top: 50px;\n  left: 50px;\n}\n</code></pre> <p>Aqu\u00ed, el elemento <code>div</code> se colocar\u00e1 50px desde la parte superior y 100px desde la izquierda de su contenedor m\u00e1s cercano con <code>position: relative</code>.</p> <p></p> propiedad <code>position:sticky</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      div.sticky {\n        position: sticky;\n        top: 0;\n        padding: 5px;\n        background-color: #cae8ca;\n        border: 2px solid #4caf50;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Try to &lt;b&gt;scroll&lt;/b&gt; inside this frame to understand how sticky\n      positioning works.\n    &lt;/p&gt;\n\n    &lt;div class=\"sticky\"&gt;I am sticky!&lt;/div&gt;\n\n    &lt;div style=\"padding-bottom:2000px\"&gt;\n      &lt;p&gt;\n        In this example, the sticky element sticks to the top of the page (top:\n        0), when you reach its scroll position.\n      &lt;/p&gt;\n      &lt;p&gt;Scroll back up to remove the stickyness.&lt;/p&gt;\n      &lt;p&gt;\n        Some text to enable scrolling.. Lorem ipsum dolor sit amet, illum\n        definitiones no quo, maluisset concludaturque et eum, altera fabulas ut\n        quo. Atqui causae gloriatur ius te, id agam omnis evertitur eum. Affert\n        laboramus repudiandae nec et. Inciderint efficiantur his ad. Eum no\n        molestiae voluptatibus.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Some text to enable scrolling.. Lorem ipsum dolor sit amet, illum\n        definitiones no quo, maluisset concludaturque et eum, altera fabulas ut\n        quo. Atqui causae gloriatur ius te, id agam omnis evertitur eum. Affert\n        laboramus repudiandae nec et. Inciderint efficiantur his ad. Eum no\n        molestiae voluptatibus.\n      &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#74-visibility","title":"7.4 Visibility","text":"<p>La propiedad <code>visibility</code> permite ocultar un elemento sin eliminarlo del flujo del documento, lo que significa que el espacio del elemento sigue estando reservado en la p\u00e1gina, aunque el contenido no se vea.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-visibility","title":"Valores de <code>visibility</code>:","text":"Valor Descripci\u00f3n <code>visible</code> El elemento es visible (valor predeterminado). <code>hidden</code> El elemento est\u00e1 oculto, pero sigue ocupando espacio en el dise\u00f1o. <code>collapse</code> Similar a <code>hidden</code>, pero en el caso de las tablas, tambi\u00e9n elimina el espacio reservado para el elemento. <pre><code>p {\n  visibility: hidden;\n}\n</code></pre> <p>En este caso, el p\u00e1rrafo estar\u00e1 oculto, pero seguir\u00e1 ocupando espacio en el dise\u00f1o de la p\u00e1gina.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#75-z-index","title":"7.5 Z-index","text":"<p>El <code>z-index</code> se usa para controlar el apilamiento de los elementos. Es \u00fatil cuando los elementos est\u00e1n posicionados de manera absoluta o relativa, y queremos que un elemento est\u00e9 por encima de otro.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#valores-de-z-index","title":"Valores de <code>z-index</code>:","text":"<ul> <li>El valor de <code>z-index</code> puede ser cualquier n\u00famero entero. Los elementos con valores m\u00e1s altos estar\u00e1n apilados por encima de los elementos con valores m\u00e1s bajos.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-z-index","title":"Ejemplo de <code>z-index</code>:","text":"<pre><code>div {\n  position: relative;\n  z-index: 10;\n}\n</code></pre> <p>Aqu\u00ed, el elemento <code>div</code> se apilar\u00e1 encima de otros elementos con un <code>z-index</code> m\u00e1s bajo (o sin <code>z-index</code>).</p> <p>Veamos un ejemplo:</p> <p></p> Divs superpuestos <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Ejemplo de Superposici\u00f3n con z-index&lt;/title&gt;\n    &lt;style&gt;\n      .div1,\n      .div2,\n      .div3 {\n        position: absolute;\n        width: 200px;\n        height: 200px;\n      }\n\n      .div1 {\n        background-color: red;\n        top: 50px;\n        left: 50px;\n        z-index: 1; /* El div rojo est\u00e1 en el fondo */\n      }\n\n      .div2 {\n        background-color: green;\n        top: 100px;\n        left: 100px;\n        z-index: 2; /* El div verde est\u00e1 encima del rojo */\n      }\n\n      .div3 {\n        background-color: blue;\n        top: 150px;\n        left: 150px;\n        z-index: 3; /* El div azul est\u00e1 encima de los otros dos */\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"div1\"&gt;&lt;/div&gt;\n    &lt;div class=\"div2\"&gt;&lt;/div&gt;\n    &lt;div class=\"div3\"&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-practico-diseno-de-una-pagina-con-imagenes-en-linea","title":"Ejemplo pr\u00e1ctico: Dise\u00f1o de una p\u00e1gina con im\u00e1genes en l\u00ednea","text":"<p>Vamos a crear un ejemplo con un layout simple que tenga una serie de im\u00e1genes dentro de un contenedor. Las im\u00e1genes se alinear\u00e1n en l\u00ednea mientras haya espacio, y cuando no quepan, pasar\u00e1n a la siguiente l\u00ednea.</p> <p></p> Imagenes en linea <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Ejemplo de Dise\u00f1o Web&lt;/title&gt;\n    &lt;style&gt;\n      body {\n        font-family: Arial, sans-serif;\n      }\n\n      header,\n      footer {\n        background-color: #4caf50;\n        color: white;\n        text-align: center;\n        padding: 10px;\n      }\n\n      nav {\n        background-color: #333;\n        overflow: hidden;\n      }\n\n      nav a {\n        color: white;\n        padding: 14px 20px;\n        text-decoration: none;\n        float: left;\n      }\n\n      nav a:hover {\n        background-color: #ddd;\n        color: black;\n      }\n\n      .imagenes-container {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: 10px;\n        margin-top: 20px;\n      }\n\n      .imagenes-container div {\n        width: 200px;\n        height: 200px;\n        border: 2px solid #ddd;\n        box-sizing: border-box;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;Bienvenido a la P\u00e1gina de Ejemplo&lt;/h1&gt;\n    &lt;/header&gt;\n\n    &lt;nav&gt;\n      &lt;a href=\"#\"&gt;Inicio&lt;/a&gt;\n      &lt;a href=\"#\"&gt;Productos&lt;/a&gt;\n      &lt;a href=\"#\"&gt;Servicios&lt;/a&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"imagenes-container\"&gt;\n      &lt;div&gt;&lt;img src=\"imagen1.jpg\" alt=\"Imagen 1\" /&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;img src=\"imagen2.jpg\" alt=\"Imagen 2\" /&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;img src=\"imagen3.jpg\" alt=\"Imagen 3\" /&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;img src=\"imagen4.jpg\" alt=\"Imagen 4\" /&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;img src=\"imagen5.jpg\" alt=\"Imagen 5\" /&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;footer&gt;\n      &lt;p&gt;\u00a9 2025 Ejemplo de Dise\u00f1o Web&lt;/p&gt;\n    &lt;/footer&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, hemos usado flexbox para hacer que las im\u00e1genes se alineen en una fila cuando haya espacio suficiente y, cuando no quepan, se mover\u00e1n a la siguiente l\u00ednea. Tambi\u00e9n hemos usado un men\u00fa de navegaci\u00f3n y un pie de p\u00e1gina para completar el dise\u00f1o.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#8-css-grid","title":"8 CSS Grid","text":"<p>El CSS Grid Layout es un sistema de dise\u00f1o bidimensional que permite organizar los elementos de una p\u00e1gina en una cuadr\u00edcula. Grid facilita la creaci\u00f3n de dise\u00f1os complejos con una estructura de filas y columnas, proporcionando un control preciso sobre c\u00f3mo se disponen los elementos dentro de un contenedor.</p> <p>Con CSS Grid, podemos crear dise\u00f1os responsivos, alineaci\u00f3n de elementos y controlar la distribuci\u00f3n de espacios de manera muy eficiente. En este punto, vamos a profundizar en c\u00f3mo se configura un contenedor de Grid, c\u00f3mo definir las filas y las columnas, y c\u00f3mo organizar los elementos dentro de esta cuadr\u00edcula.</p> <p>El m\u00f3dulo de dise\u00f1o de <code>Grid</code> ofrece un sistema de dise\u00f1o basado en cuadr\u00edcula, con filas y columnas. El m\u00f3dulo de dise\u00f1o de <code>Grid</code> permite a los desarrolladores crear f\u00e1cilmente dise\u00f1os web complejos. El m\u00f3dulo de dise\u00f1o de <code>Grid</code> facilita el dise\u00f1o de una estructura de dise\u00f1o adaptable, sin utilizar flotaci\u00f3n ni posicionamiento.</p> <p>Las propiedades de <code>Grid</code> CSS son compatibles con todos los navegadores modernos.</p> <p>Grid vs Flexbox</p> <p>El dise\u00f1o de <code>Grid</code> CSS debe usarse para dise\u00f1os bidimensionales, con filas Y columnas. El dise\u00f1o CSS <code>Flexbox</code> debe usarse para un dise\u00f1o unidimensional, con filas O columnas.</p> <p>Ejemplo de maquetaci\u00f3n con <code>CSS Grid</code>:</p> <p></p> P\u00e1gina maquetada con Grid CSS Grid<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      .container {\n        display: grid;\n        grid-template-areas:\n          \"header header\"\n          \"menu content\"\n          \"footer footer\";\n        grid-template-columns: 1fr 3fr;\n        gap: 5px;\n        background-color: #2196f3;\n        padding: 5px;\n      }\n      .container &gt; div {\n        background-color: rgba(255, 255, 255, 0.8);\n        padding: 10px;\n      }\n      .container &gt; div.header {\n        grid-area: header;\n        text-align: center;\n      }\n      .container &gt; div.menu {\n        grid-area: menu;\n      }\n      .container &gt; div.content {\n        grid-area: content;\n      }\n      .container &gt; div.footer {\n        grid-area: footer;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;CSS Grid Layout&lt;/h1&gt;\n\n    &lt;p&gt;\n      The Grid Layout Module offers a grid-based layout system, with rows and\n      columns.\n    &lt;/p&gt;\n    &lt;p&gt;\n      The Grid Layout Module makes it easy to design complex and responsive web\n      pages without using floats and positioning:\n    &lt;/p&gt;\n\n    &lt;div class=\"container\"&gt;\n      &lt;div class=\"header\"&gt;&lt;h2&gt;My Header&lt;/h2&gt;&lt;/div&gt;\n      &lt;div class=\"menu\"&gt;\n        &lt;a href=\"#\"&gt;Link 1&lt;/a&gt;&lt;br /&gt;&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;&lt;br /&gt;&lt;a href=\"#\"\n          &gt;Link 3&lt;/a\n        &gt;\n      &lt;/div&gt;\n      &lt;div class=\"content\"&gt;\n        &lt;h3&gt;Lorem Ipsum&lt;/h3&gt;\n        &lt;p&gt;\n          Lorem ipsum odor amet, consectetuer adipiscing elit. Ridiculus sit\n          nisl laoreet facilisis aliquet. Potenti dignissim litora eget montes\n          rhoncus sapien neque urna. Cursus libero sapien integer magnis ligula\n          lobortis quam ut.\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"footer\"&gt;&lt;h4&gt;Footer&lt;/h4&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#81-definicion-de-un-contenedor-grid","title":"8.1 Definici\u00f3n de un Contenedor Grid","text":"<p>Un contenedor Grid es el elemento al que se le aplican las propiedades del sistema de cuadr\u00edcula. Para declarar un contenedor Grid, usamos la propiedad <code>display</code> con el valor <code>grid</code>.</p> <pre><code>.container {\n  display: grid;\n}\n</code></pre> <p>Esto convierte el contenedor <code>.container</code> en un contenedor Grid. A partir de aqu\u00ed, podemos definir las filas y las columnas que componen la cuadr\u00edcula.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#82-definiendo-filas-y-columnas","title":"8.2 Definiendo Filas y Columnas","text":"<p>Las filas y columnas se definen con las propiedades <code>grid-template-rows</code> y <code>grid-template-columns</code>. Estas propiedades nos permiten crear una cuadr\u00edcula con un n\u00famero espec\u00edfico de filas y columnas.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#821-grid-template-columns","title":"8.2.1 <code>grid-template-columns</code>","text":"<p>La propiedad <code>grid-template-columns</code> define el n\u00famero de columnas y sus tama\u00f1os. Los valores que puede tomar son las unidades de medida <code>px</code>, <code>em</code>, <code>fr</code> (fracci\u00f3n de espacio disponible), y <code>%</code>.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-columnas","title":"Ejemplo de columnas","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: 200px 1fr 2fr;\n}\n</code></pre> <p>En este caso:</p> <ul> <li>La primera columna tiene un ancho fijo de 200px.</li> <li>La segunda columna ocupa 1 fracci\u00f3n del espacio restante (1fr).</li> <li>La tercera columna ocupa 2 fracciones del espacio restante (2fr).</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#822-grid-template-rows","title":"8.2.2 <code>grid-template-rows</code>","text":"<p>De manera similar, la propiedad <code>grid-template-rows</code> define las filas del grid. El formato es el mismo que para las columnas, pudiendo usar valores como <code>px</code>, <code>fr</code>, y <code>auto</code> (para tama\u00f1os autom\u00e1ticos basados en el contenido).</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-filas","title":"Ejemplo de filas","text":"<pre><code>.container {\n  display: grid;\n  grid-template-rows: 100px auto 200px;\n}\n</code></pre> <p>En este caso:</p> <ul> <li>La primera fila tiene una altura de 100px.</li> <li>La segunda fila tiene una altura autom\u00e1tica, es decir, tomar\u00e1 el espacio necesario seg\u00fan su contenido.</li> <li>La tercera fila tiene una altura de 200px.</li> </ul>"},{"location":"content/MF_0967_3/UF2218/unidad02/#83-propiedad-grid-template-areas","title":"8.3 Propiedad <code>grid-template-areas</code>","text":"<p>La propiedad <code>grid-template-areas</code> permite organizar las filas y las columnas de manera m\u00e1s visual, asignando nombres a las diferentes \u00e1reas de la cuadr\u00edcula. Esto facilita la creaci\u00f3n de dise\u00f1os m\u00e1s intuitivos.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-grid-template-areas","title":"Ejemplo de <code>grid-template-areas</code>","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-template-rows: 100px auto 100px;\n  grid-template-areas:\n    \"header header\"\n    \"menu content\"\n    \"footer footer\";\n}\n</code></pre> <p>En este caso, la propiedad <code>grid-template-areas</code> asigna nombres a las \u00e1reas de la cuadr\u00edcula, lo que facilita la colocaci\u00f3n de los elementos dentro de la cuadr\u00edcula.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#84-colocacion-de-elementos-dentro-de-grid","title":"8.4 Colocaci\u00f3n de Elementos dentro de Grid","text":"<p>Una vez que hemos definido las filas y columnas, podemos colocar los elementos dentro de la cuadr\u00edcula usando las propiedades <code>grid-column</code> y <code>grid-row</code>.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#841-grid-column","title":"8.4.1 <code>grid-column</code>","text":"<p>La propiedad <code>grid-column</code> nos permite especificar en qu\u00e9 columnas debe aparecer un elemento. Podemos usar dos valores: el \u00edndice de la columna inicial y el \u00edndice de la columna final.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-grid-column","title":"Ejemplo de <code>grid-column</code>","text":"<pre><code>.item {\n  grid-column: 1 / 3;\n}\n</code></pre> <p>En este caso, el elemento <code>.item</code> ocupar\u00e1 las columnas 1 y 2.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#842-grid-row","title":"8.4.2 <code>grid-row</code>","text":"<p>La propiedad <code>grid-row</code> funciona de manera similar, pero para las filas. Nos permite definir en qu\u00e9 fila debe comenzar un elemento y en qu\u00e9 fila debe terminar.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-grid-row","title":"Ejemplo de <code>grid-row</code>","text":"<pre><code>.item {\n  grid-row: 1 / 2;\n}\n</code></pre> <p>Este ejemplo coloca el elemento <code>.item</code> en la primera fila.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#85-ejemplo-completo-de-una-pagina-web-con-css-grid","title":"8.5 Ejemplo Completo de una p\u00e1gina web con <code>CSS Grid</code>","text":"<p>En este ejemplo, vamos a crear una p\u00e1gina web simple que contenga un encabezado, un men\u00fa horizontal, un cuerpo con una secci\u00f3n lateral y un pie de p\u00e1gina. Usaremos CSS Grid para organizar todos los elementos de manera estructurada.</p> <p></p> web maquetada con <code>CSS Grid</code> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;P\u00e1gina con CSS Grid&lt;/title&gt;\n    &lt;style&gt;\n      /* Contenedor principal */\n      .container {\n        display: grid;\n        grid-template-columns: 200px 1fr; /* Men\u00fa lateral y contenido principal */\n        grid-template-rows: 100px auto 100px; /* Encabezado, cuerpo y pie */\n        grid-template-areas:\n          \"header header\"\n          \"menu content\"\n          \"footer footer\";\n        gap: 10px; /* Espacio entre los elementos */\n      }\n\n      header {\n        grid-area: header;\n        background-color: #4caf50;\n        color: white;\n        text-align: center;\n        padding: 20px;\n      }\n\n      nav {\n        grid-area: menu;\n        background-color: #333;\n        color: white;\n        padding: 15px;\n      }\n\n      .content {\n        grid-area: content;\n        background-color: #f4f4f4;\n        padding: 20px;\n      }\n\n      footer {\n        grid-area: footer;\n        background-color: #4caf50;\n        color: white;\n        text-align: center;\n        padding: 10px;\n      }\n\n      nav a {\n        display: block;\n        color: white;\n        padding: 8px;\n        text-decoration: none;\n      }\n\n      nav a:hover {\n        background-color: #ddd;\n        color: black;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;header&gt;\n        &lt;h1&gt;Mi P\u00e1gina Web&lt;/h1&gt;\n      &lt;/header&gt;\n      &lt;nav&gt;\n        &lt;a href=\"#\"&gt;Inicio&lt;/a&gt;\n        &lt;a href=\"#\"&gt;Productos&lt;/a&gt;\n        &lt;a href=\"#\"&gt;Servicios&lt;/a&gt;\n        &lt;a href=\"#\"&gt;Contacto&lt;/a&gt;\n      &lt;/nav&gt;\n      &lt;div class=\"content\"&gt;\n        &lt;h2&gt;Contenido Principal&lt;/h2&gt;\n        &lt;p&gt;\n          Este es el cuerpo de la p\u00e1gina donde ir\u00eda la informaci\u00f3n principal de\n          la web. Usamos CSS Grid para organizar los elementos.\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;footer&gt;\n        &lt;p&gt;\u00a9 2025 Mi P\u00e1gina Web&lt;/p&gt;\n      &lt;/footer&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/MF_0967_3/UF2218/unidad02/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo:","text":"<ul> <li><code>grid-template-columns</code>: Define dos columnas. La primera columna tiene un ancho fijo de 200px (para el men\u00fa lateral) y la segunda columna ocupa el resto del espacio disponible (1fr).</li> <li><code>grid-template-rows</code>: Define tres filas. La primera fila tiene una altura de 100px (encabezado), la segunda fila tiene una altura autom\u00e1tica (el contenido) y la tercera fila es para el pie de p\u00e1gina (100px).</li> <li><code>grid-template-areas</code>: Organiza los elementos en \u00e1reas nombradas, lo que facilita su disposici\u00f3n dentro de la cuadr\u00edcula.</li> </ul> <p>Aqu\u00ed tienes el contenido ampliado sobre CSS con todos los puntos solicitados:</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#9imagenes-estilos-y-efectos-visuales-en-css","title":"9.Im\u00e1genes, Estilos y Efectos Visuales en CSS","text":"<p>En este punto vamos a aprender a manejar im\u00e1genes, gradientes, sombras y botones con CSS. Adem\u00e1s, veremos c\u00f3mo implementar un sistema de paginaci\u00f3n y finalmente, vamos a crear un men\u00fa de navegaci\u00f3n interactivo que responda al paso del rat\u00f3n. Todos estos conceptos son esenciales para mejorar la experiencia visual y la interactividad en una p\u00e1gina web.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#91-imagenes","title":"9.1. Im\u00e1genes","text":"<p>Las im\u00e1genes juegan un papel crucial en el dise\u00f1o de una p\u00e1gina web. Con CSS podemos modificar su presentaci\u00f3n de manera din\u00e1mica, mejorando la interacci\u00f3n y el dise\u00f1o general.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#911-estilos-de-imagenes","title":"9.1.1 Estilos de Im\u00e1genes","text":"<p>Las im\u00e1genes pueden ser modificadas con diferentes propiedades en CSS, permitiendo cambios en su tama\u00f1o, alineaci\u00f3n, bordes, y otros aspectos visuales.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-alineacion-y-tamano","title":"Ejemplo de Alineaci\u00f3n y Tama\u00f1o","text":"<pre><code>img {\n  width: 100%;\n  height: auto;\n  display: block;\n  margin: 0 auto;\n}\n</code></pre> <p>Aqu\u00ed, la imagen se ajusta al 100% del ancho del contenedor, manteniendo su proporci\u00f3n original gracias a <code>height: auto</code>, y se centra en el contenedor con <code>margin: 0 auto</code>.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#912-filtros-de-imagenes","title":"9.1.2 Filtros de Im\u00e1genes","text":"<p>CSS ofrece varios filtros visuales para aplicar efectos en las im\u00e1genes, como desenfoque, brillo, contraste, entre otros.</p> Filtro Descripci\u00f3n <code>blur()</code> Aplica desenfoque a la imagen. <code>brightness()</code> Modifica el brillo de la imagen. <code>contrast()</code> Ajusta el contraste de la imagen. <code>grayscale()</code> Convierte la imagen a escala de grises. <code>sepia()</code> Aplica un filtro sepia (efecto antiguo). <code>hue-rotate()</code> Rota los colores de la imagen."},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-filtro","title":"Ejemplo de Filtro","text":"<pre><code>img {\n  filter: grayscale(100%) sepia(50%);\n}\n</code></pre> <p>En este ejemplo, la imagen tendr\u00e1 un efecto escala de grises y un efecto sepia al mismo tiempo.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#913-imagenes-como-figuras","title":"9.1.3 Im\u00e1genes como Figuras","text":"<p>Podemos usar im\u00e1genes como figuras decorativas, con bordes redondeados o formas personalizadas.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-figuras","title":"Ejemplo de Figuras","text":"<pre><code>img {\n  border-radius: 15px; /* Bordes redondeados */\n  box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); /* Sombra */\n}\n</code></pre> <p>En este caso, border-radius redondea las esquinas de la imagen y box-shadow agrega una sombra alrededor de la imagen.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#92-gradientes-en-css","title":"9.2. Gradientes en CSS","text":"<p>Los gradientes son transiciones suaves entre dos o m\u00e1s colores. Son \u00fatiles para crear fondos din\u00e1micos y efectos visuales en las p\u00e1ginas web.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#921-gradiente-lineal","title":"9.2.1 Gradiente Lineal","text":"<p>El gradiente lineal crea una transici\u00f3n de colores a lo largo de una l\u00ednea recta.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-gradiente-lineal","title":"Ejemplo de Gradiente Lineal","text":"<pre><code>body {\n  background: linear-gradient(to right, red, yellow);\n}\n</code></pre> <p>Este c\u00f3digo crea un fondo con un gradiente de color rojo a amarillo, de izquierda a derecha.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#922-gradiente-radial","title":"9.2.2 Gradiente Radial","text":"<p>El gradiente radial crea una transici\u00f3n circular de colores, que se irradia desde un punto central hacia el exterior.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-gradiente-radial","title":"Ejemplo de Gradiente Radial","text":"<pre><code>body {\n  background: radial-gradient(circle, red, yellow);\n}\n</code></pre> <p>Este c\u00f3digo crea un fondo que irradia de rojo a amarillo desde el centro hacia afuera.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#93-sombras-en-css","title":"9.3. Sombras en CSS","text":"<p>Las sombras se utilizan para dar profundidad a los elementos de la p\u00e1gina web. Hay dos tipos principales: sombras para textos y sombras para bloques.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#931-sombras-de-texto","title":"9.3.1 Sombras de Texto","text":"<p>Las sombras de texto permiten agregar un efecto visual en el texto, haciendo que se vea m\u00e1s destacado.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-sombra-de-texto","title":"Ejemplo de Sombra de Texto","text":"<pre><code>h1 {\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n}\n</code></pre> <p>Este c\u00f3digo agrega una sombra de texto a los elementos <code>h1</code>, desplazada 2px en horizontal y vertical, con un desenfoque de 4px.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#932-sombras-de-caja","title":"9.3.2 Sombras de Caja","text":"<p>Las sombras de caja se aplican a los elementos de bloque (como divs, im\u00e1genes, etc.), creando la ilusi\u00f3n de profundidad.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-sombra-de-caja","title":"Ejemplo de Sombra de Caja","text":"<pre><code>div {\n  box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.3);\n}\n</code></pre> <p>Este c\u00f3digo crea una sombra de caja alrededor del div desplazada 10px en horizontal y vertical, con un desenfoque de 20px.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#94-botones-en-css","title":"9.4. Botones en CSS","text":"<p>Los botones son uno de los elementos m\u00e1s importantes en la interacci\u00f3n con el usuario. A continuaci\u00f3n, vamos a ver c\u00f3mo dise\u00f1ar botones atractivos y funcionales.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#941-estilo-basico-de-botones","title":"9.4.1 Estilo B\u00e1sico de Botones","text":"<p>Podemos crear un bot\u00f3n b\u00e1sico con CSS, controlando su color de fondo, bordes y tipograf\u00eda.</p>"},{"location":"content/MF_0967_3/UF2218/unidad02/#ejemplo-de-boton-basico","title":"Ejemplo de Bot\u00f3n B\u00e1sico","text":"<pre><code>button {\n  background-color: #4caf50;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n</code></pre> <p>Este c\u00f3digo define un bot\u00f3n verde con texto blanco y bordes redondeados. La propiedad <code>cursor: pointer</code> cambia el cursor a una mano cuando el usuario pasa sobre el bot\u00f3n.</p> <p>Aqu\u00edi tienes un ejemplo m\u00e1s elabrado con varios estilos de botones:</p> <p></p> botones <p>```html linenums=\"1\" title=\"Buttons\" &lt;!DOCTYPE html&gt;  Buttons"},{"location":"content/MF_0968_3/UF1643/","title":"En construcci\u00f3n","text":""},{"location":"content/MF_0968_3/UF1644/","title":"En construcci\u00f3n","text":""},{"location":"content/MP0459/Practicas/","title":"En construcci\u00f3n","text":""},{"location":"content/MP0459/Practicas/#amonitions","title":"Amonitions","text":""},{"location":"content/MP0459/Practicas/#nota","title":"Nota","text":"<p>Nota - note</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#advertencia","title":"Advertencia","text":"<p>Advertencia - warning</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#resumen","title":"Resumen","text":"Resumen - abstract <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#informacion","title":"Informaci\u00f3n","text":"<p>Informaci\u00f3n - info</p> <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#pregunta","title":"Pregunta","text":"Pregunta - question <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#consejo","title":"Consejo","text":"Consejo - tip <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#pregunta_1","title":"Pregunta","text":"Pregunta - discussion <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#ejemplo","title":"Ejemplo","text":"Ejemplo - example <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#importante","title":"Importante","text":"Importante - important <p>Este documento est\u00e1 en construcci\u00f3n.</p>"},{"location":"content/MP0459/Practicas/#botones","title":"Botones","text":""},{"location":"content/MP0459/Practicas/#boton-estilo-1","title":"Bot\u00f3n estilo 1","text":"<p>Bot\u00f3n estilo normal</p> <p><code>[Google](https://www.google.com){.md-button}</code></p> <p>Google</p> <p>Bot\u00f3n estilo primary</p> <p><code>[Google](https://www.google.com){.md-button .md-button--primary}</code></p> <p>Google</p> <p>Bot\u00f3n estilo secondary</p> <p><code>[Google](https://www.google.com){.md-button .md-button--secondary}</code></p> <p>Google</p> <p>Bot\u00f3n estilo success con icono</p> <p>No funciona, no saca el icono</p> <p><code>[Send :fontawesome-solid-paper-plane:](https://www.google.com){.md-button}</code></p> <p>Send :fontawesome-solid-paper-plane:</p>"},{"location":"content/MP0459/Practicas/#codigo","title":"Codigo","text":"<p>Este ejemplo pide un n\u00famero y muestra su tabla de multiplicar.</p> Tabla de multiplicar<pre><code>let numero = parseInt(prompt(\"Ingrese un n\u00famero: \"));\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`${numero} x ${i} = ${numero * i}`);\n}\n</code></pre>"},{"location":"content/MP0459/Practicas/#mermaid","title":"Mermaid","text":"<p>Ejemplo con mermaid.</p> <pre><code>flowchart TD\n    A[Inicio] --&gt; B[Solicitar n\u00famero al usuario]\n    B --&gt; C[Convertir entrada a entero: parseInt]\n    C --&gt; D[Inicializar i = 1]\n    D --&gt; E{\u00bfi &lt;= 10?}\n    E --&gt;|S\u00ed| F[Calcular: numero x i]\n    F --&gt; G[Mostrar resultado en consola]\n    G --&gt; H[Incrementar i en 1]\n    H --&gt; E\n    E --&gt;|No| I[Fin]</code></pre>"},{"location":"content/MP0459/Practicas/#juntar-codigo-y-diagrama-utilizando-pestanas-tabs","title":"Juntar c\u00f3digo y diagrama utilizando pesta\u00f1as <code>tabs</code>","text":"<p>En este ejemplo, mostramos c\u00f3mo funciona un bucle <code>while</code> para sumar n\u00fameros del 1 al 5. Puedes alternar entre el ordinograma y el c\u00f3digo usando las pesta\u00f1as.</p> C\u00f3digo de ejemplo C\u00f3digo PythonOrdinograma Suma de n\u00fameros del 1 al 5<pre><code>    total = 0\n    num = 1\n    while num &lt;= 5:\n        total += num\n        num += 1\n    print(\"La suma es:\", total)\n</code></pre> <pre><code>    flowchart TD\n        Start([Inicio])\n        Check{\u00bfnum &lt;= 5?}\n        Incremento[Incrementar num en 1]\n        Suma[total += num]\n        End([Fin])\n\n    Start --&gt; Check\n    Check --&gt;|S\u00ed| Suma --&gt; Incremento --&gt; Check\n    Check --&gt;|No| End</code></pre>"},{"location":"normativa19/IFCD0211/","title":"Sistemas de Gesti\u00f3n de Informaci\u00f3n (IFCD0211)","text":""},{"location":"normativa19/IFCD0211/#introduccion","title":"Introducci\u00f3n","text":"<p>El certificado de profesionalidad Sistemas de Gesti\u00f3n de Informaci\u00f3n tiene como objetivo implementar y administrar sistemas de gesti\u00f3n de informaci\u00f3n en organizaciones, garantizando la seguridad, accesibilidad y rendimiento.</p>"},{"location":"normativa19/IFCD0211/#informacion-general","title":"Informaci\u00f3n General:","text":"<ul> <li>C\u00f3digo: IFCD0211</li> <li>Familia Profesional: Inform\u00e1tica y Comunicaciones</li> <li>\u00c1rea Profesional: Desarrollo</li> <li>Nivel de Cualificaci\u00f3n: 3</li> <li>Duraci\u00f3n Total: 590 horas</li> <li>Competencia general: IFC304_3: Administrar sistemas de gesti\u00f3n de informaci\u00f3n en el \u00e1mbito del desarrollo de aplicaciones y contenidos.</li> </ul>"},{"location":"normativa19/IFCD0211/#unidades-de-competencia","title":"Unidades de Competencia:","text":"<ul> <li>UC0966_3: Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos.</li> <li>UC0967_3: Crear y gestionar repositorios de contenidos.</li> <li>UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n.</li> </ul> <p>Podemos encontrar m\u00e1s informaci\u00f3n sobre las unidades de competencia en el documento UCs.</p>"},{"location":"normativa19/IFCD0211/#modulos-formativos","title":"M\u00f3dulos Formativos:","text":"M\u00f3dulo Formativo Duraci\u00f3n Descripci\u00f3n MF0966_3 210 horas Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos MF0967_3 200 horas Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos MF0968_3 100 horas Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n MP0459 80 horas Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n Total 590 horas <ul> <li>MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos</li> <li>MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos</li> <li>MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n</li> <li>MP0459: Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n</li> </ul>"},{"location":"normativa19/IFCD0211/#detalle-de-los-modulos-formativos","title":"Detalle de los M\u00f3dulos Formativos","text":""},{"location":"normativa19/IFCD0211/#mf0966_3-consulta-y-manipulacion-de-informacion-contenida-en-gestores-de-datos","title":"MF0966_3: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos","text":"<ul> <li>Duraci\u00f3n: 210 horas</li> <li>Unidades Formativas:<ul> <li>UF2213: Modelos de datos y visi\u00f3n conceptual de una base de datos</li> <li>UF2214: Implementaci\u00f3n y uso de una base de datos</li> <li>UF2215: Herramientas de los sistemas gestores de bases de datos, pasarelas y medios de conexi\u00f3n</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mf0967_3-creacion-y-gestion-de-repositorios-de-contenidos","title":"MF0967_3: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos","text":"<ul> <li>Duraci\u00f3n: 200 horas</li> <li>Unidades Formativas:<ul> <li>UF2216: Repositorios de contenidos</li> <li>UF2217: Lenguaje XML</li> <li>UF2218: Desarrollo de un gestor de contenidos (CMS)</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mf0968_3-administracion-de-sistemas-de-gestion-de-informacion","title":"MF0968_3: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n","text":"<ul> <li>Duraci\u00f3n: 100 horas</li> <li>Unidades Formativas:<ul> <li>UF1643: Gesti\u00f3n y control de los sistemas de informaci\u00f3n</li> <li>UF1644: Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n</li> </ul> </li> </ul>"},{"location":"normativa19/IFCD0211/#mp0459-practicas-profesionales-no-laborales","title":"MP0459: Pr\u00e1cticas Profesionales No Laborales","text":"<ul> <li>Duraci\u00f3n: 80 horas</li> </ul>"},{"location":"normativa19/IFCD0211/#relacion-entre-los-modulos-formativos-y-las-unidades-de-competencia","title":"Relaci\u00f3n entre los m\u00f3dulos formativos y las unidades de competencia:","text":""},{"location":"normativa19/IFCD0211/#unidades-de-competencia-uc-y-realizaciones-profesionales-rp","title":"Unidades de Competencia (UC) y Realizaciones Profesionales (RP)","text":"C\u00f3digo UC C\u00f3digo RP Descripci\u00f3n UC0966_3 Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos. RP1 Dise\u00f1ar consultas para extraer informaci\u00f3n de una base de datos conforme a necesidades espec\u00edficas. RP2 Comprobar que las consultas y manipulaciones de datos se ajustan a las necesidades especificadas. RP3 Realizar informes que representen la informaci\u00f3n almacenada en el sistema de gesti\u00f3n de datos. UC0967_3 Crear y gestionar repositorios de contenidos. RP1 Dise\u00f1ar repositorios de contenidos en funci\u00f3n de las necesidades de la organizaci\u00f3n. RP2 Implementar repositorios mediante el uso de lenguajes espec\u00edficos de marcas y est\u00e1ndares de desarrollo. RP3 Administrar repositorios de contenidos garantizando su operatividad y disponibilidad. UC0968_3 Administrar el sistema de gesti\u00f3n de informaci\u00f3n. RP1 Determinar las pol\u00edticas y controles de acceso al sistema de gesti\u00f3n de informaci\u00f3n seg\u00fan especificaciones funcionales. RP2 Aplicar t\u00e9cnicas de auditor\u00eda en el sistema de gesti\u00f3n de informaci\u00f3n para garantizar su seguridad. RP3 Realizar el mantenimiento del flujo de informaci\u00f3n en el sistema de gesti\u00f3n, conforme a las necesidades organizativas. RP4 Publicar los contenidos del sistema de informaci\u00f3n utilizando canales de distribuci\u00f3n."},{"location":"normativa19/IFCD0211/#modulos-formativos-mf-y-unidades-formativas-uf","title":"M\u00f3dulos Formativos (MF) y Unidades Formativas (UF)","text":"C\u00f3digo MF C\u00f3digo UF Descripci\u00f3n MF0966_3 Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. UF2213 Modelos de datos y visi\u00f3n conceptual de una base de datos. UF2214 Implementaci\u00f3n y uso de una base de datos. UF2215 Herramientas de los sistemas gestores de bases de datos, pasarelas y medios de conexi\u00f3n. MF0967_3 Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos. UF2216 Repositorios de contenidos. UF2217 Lenguaje XML. UF2218 Desarrollo de un gestor de contenidos (CMS). MF0968_3 Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n. UF1643 Gesti\u00f3n y control de los sistemas de informaci\u00f3n. UF1644 Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n. MP0459 Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n."},{"location":"normativa19/IFCD0211/#relacion-de-unidades-de-competencia-realizaciones-profesionales-modulos-y-unidades-formativas","title":"Relaci\u00f3n de Unidades de Competencia, Realizaciones Profesionales, M\u00f3dulos y Unidades Formativas","text":"UC RP M\u00f3dulo Formativo (MF) Unidades Formativas (UF) UC0966_3 RP1, RP2, RP3 MF0966_3 UF2213, UF2214, UF2215 UC0967_3 RP1, RP2, RP3 MF0967_3 UF2216, UF2217, UF2218 UC0968_3 RP1, RP2, RP3, RP4 MF0968_3 UF1643, UF1644"},{"location":"normativa19/IFCD0211/#entorno-profesional","title":"Entorno Profesional","text":""},{"location":"normativa19/IFCD0211/#ambito-profesional","title":"\u00c1mbito Profesional:","text":"<p>Desarrolla su actividad profesional en el departamento de desarrollo de software dedicado a los sistemas de gesti\u00f3n de informaci\u00f3n, en entidades de naturaleza p\u00fablica o privada, empresas de cualquier tama\u00f1o, tanto por cuenta propia como ajena, con independencia de su forma jur\u00eddica. Desarrolla su actividad dependiendo, en su caso, funcional y/o jer\u00e1rquicamente de un superior. Puede tener personal a su cargo en ocasiones, por temporadas o de forma estable. En el desarrollo de la actividad profesional se aplican los principios de accesibilidad universal y dise\u00f1o universal o dise\u00f1o para todas las personas de acuerdo con la normativa aplicable.</p>"},{"location":"normativa19/IFCD0211/#sectores-productivos","title":"Sectores Productivos:","text":"<p>Se ubica sobre todo en el sector servicios, en el subsector del desarrollo de software, en la comercializaci\u00f3n de servicios de gesti\u00f3n de contenidos para infraestructuras de redes intranet, Internet y extranet; y en cualquier otro sector que utilizan sistemas inform\u00e1ticos para su gesti\u00f3n.</p>"},{"location":"normativa19/IFCD0211/#ocupaciones-relacionadas","title":"Ocupaciones Relacionadas:","text":"<ul> <li>Gestor de contenidos.</li> <li>Gestor de portales web.</li> <li>Administrador de sistemas de contenidos.</li> <li>Integrador de sistemas de informaci\u00f3n.</li> </ul>"},{"location":"normativa19/IFCD0211/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Legislaci\u00f3n aplicable: BOE-A-2013-9707</li> <li>Normativa de protecci\u00f3n de datos y seguridad inform\u00e1tica.</li> <li>Documentaci\u00f3n t\u00e9cnica y manuales asociados.</li> </ul>"},{"location":"normativa19/MF0966_3/","title":"M\u00f3dulo Formativo: Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos","text":"Campo Detalle C\u00f3digo MF0966_3 Nombre Consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos Nivel 3 Unidad de Competencia UC0966_3 Denominaci\u00f3n UC Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos Duraci\u00f3n 210 horas"},{"location":"normativa19/MF0966_3/#unidad-formativa-1-modelos-de-datos-y-vision-conceptual-de-una-base-de-datos","title":"Unidad Formativa 1: Modelos de datos y visi\u00f3n conceptual de una base de datos","text":"Campo Detalle C\u00f3digo UF2213 Nombre Modelos de datos y visi\u00f3n conceptual de una base de datos Duraci\u00f3n 60 horas Referente de Competencia RP1: Analizar las plataformas de almacenamiento de datos"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Identificar las tipolog\u00edas de los gestores y sus correspondientes modelos de datos.</p> <ul> <li>CE1.1: Describir los atributos y propiedades de los elementos que componen los gestores de datos.</li> <li>CE1.2: Distinguir los diferentes tipos de gestores de datos operacionales.</li> <li>CE1.3: Explicar las caracter\u00edsticas de los sistemas orientados a la toma de decisiones.</li> <li>CE1.4: Diferenciar los modelos de datos utilizados por los gestores.</li> <li>CE1.5: Reconocer los sistemas orientados a contenidos multimedia.</li> <li>CE1.6: Clasificar las herramientas utilizadas en la gesti\u00f3n y consulta de informaci\u00f3n.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Modelo de datos conceptual:</p> <ul> <li>Conceptos b\u00e1sicos:<ul> <li>La realidad: los objetos.</li> <li>Las concepciones: la informaci\u00f3n.</li> <li>Las representaciones: los datos.</li> </ul> </li> <li>Caracter\u00edsticas generales de un modelo.<ul> <li>Modelo ER (entity-relationship):</li> </ul> </li> <li>Construcciones b\u00e1sicas.<ul> <li>Extensiones.</li> </ul> </li> <li>Modelo UML.</li> </ul> </li> <li> <p>Introducci\u00f3n a las bases de datos:</p> <ul> <li>Concepto y origen de las BD y los SGBD.</li> <li>Evoluci\u00f3n.</li> <li>Objetivos y servicios.</li> <li>Modelo l\u00f3gico de BD:<ul> <li>Modelo jer\u00e1rquico.</li> <li>Modelo en red.</li> <li>Modelo relacional.</li> <li>Modelo relacional extendido.</li> <li>Modelo orientado a objetos.</li> </ul> </li> </ul> </li> <li> <p>An\u00e1lisis detallado del modelo relacional:</p> <ul> <li>Estructura de los datos.</li> <li>Operaciones del modelo.</li> <li>Reglas de integridad.</li> <li>\u00c1lgebra relacional.</li> <li>Transformaci\u00f3n del modelo ER.</li> <li>Limitaciones.</li> </ul> </li> <li> <p>Modelos avanzados de BD:</p> <ul> <li>BD deductivas.</li> <li>BD temporales.</li> <li>BD distribuidas.</li> <li>BD anal\u00edticas (OLAP).</li> <li>BD de columnas.</li> <li>BD documentales.</li> <li>BD XML.</li> <li>BD incrustadas (embedded).</li> <li>Nuevas tendencias.</li> </ul> </li> <li> <p>An\u00e1lisis detallado de la distribuci\u00f3n de BD:</p> <ul> <li>Formas de distribuci\u00f3n.</li> <li>Arquitectura ANSI/X3/SPARC.</li> <li>Transacciones distribuidas.</li> <li>Mecanismos de distribuci\u00f3n de datos.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#unidad-formativa-2-implementacion-y-uso-de-una-base-de-datos","title":"Unidad Formativa 2: Implementaci\u00f3n y uso de una base de datos","text":"Campo Detalle C\u00f3digo UF2214 Nombre Implementaci\u00f3n y uso de una base de datos Duraci\u00f3n 80 horas Referente de Competencia RP2: Extraer informaci\u00f3n de sistemas de almacenamiento"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Distinguir las caracter\u00edsticas y funciones de los lenguajes y herramientas de consulta y extracci\u00f3n de informaci\u00f3n de los sistemas gestores de datos, teniendo en cuenta sus especificaciones t\u00e9cnicas y funcionales.</p> <ul> <li>CE1.1: Determinar las funcionalidades y caracter\u00edsticas de los lenguajes de consulta utilizados en los gestores de datos, para su utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan las especificaciones t\u00e9cnicas propias del lenguaje.</li> <li>CE1.2: Clasificar las funcionalidades y caracter\u00edsticas de las herramientas utilizadas en los gestores de datos, para su utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan especificaciones t\u00e9cnicas de las herramientas.</li> <li>CE1.3: Comparar las funcionalidades de lenguajes y herramientas a utilizar, para su selecci\u00f3n en la aplicaci\u00f3n de procedimientos en la consulta y extracci\u00f3n de informaci\u00f3n seg\u00fan necesidades funcionales.</li> </ul> <p>C2: Aplicar procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en el sistema gestor de datos, utilizando lenguajes de consulta espec\u00edficos seg\u00fan necesidades dadas.</p> <ul> <li>CE2.1: Utilizar la gram\u00e1tica, sintaxis y sem\u00e1ntica del lenguaje de consulta utilizado, para la creaci\u00f3n de procedimientos de extracci\u00f3n de la informaci\u00f3n seg\u00fan las normas de codificaci\u00f3n y desarrollo dadas.</li> <li>CE2.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, extraer y consultar informaci\u00f3n utilizando lenguajes de consulta espec\u00edficos del sistema gestor de datos, seg\u00fan un dise\u00f1o especificado:<ul> <li>Identificar las fuentes de informaci\u00f3n para la creaci\u00f3n de los procedimientos de consulta y extracci\u00f3n.</li> <li>Crear procedimientos que permitan formular consultas para la recuperaci\u00f3n de la informaci\u00f3n.</li> <li>Recuperar y archivar procedimientos de consultas y extracci\u00f3n previamente establecidos para explotar la informaci\u00f3n del sistema.</li> <li>Establecer formatos de presentaci\u00f3n y publicaci\u00f3n de la informaci\u00f3n extra\u00edda del sistema gestor de datos utilizado para la posterior distribuci\u00f3n de la misma.</li> <li>Depurar y verificar los procedimientos creados utilizando las especificaciones implementadas en el lenguaje para asegurar la calidad de los resultados.</li> <li>Documentar los procedimientos creados.</li> </ul> </li> <li>CE2.3: Interpretar la documentaci\u00f3n inherente al lenguaje de consulta espec\u00edfico, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, para permitir formular y crear procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en funci\u00f3n de sus especificaciones t\u00e9cnicas y funcionales.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Dise\u00f1o de bases de datos</p> <ul> <li>Etapas del dise\u00f1o de bases de datos.</li> <li>Teor\u00eda de la normalizaci\u00f3n:<ul> <li>Primera forma normal.</li> <li>Segunda forma normal.</li> <li>Tercera forma normal.</li> <li>Forma normal de Boyce-Codd.</li> <li>Cuarta forma normal.</li> <li>Quinta forma normal.</li> </ul> </li> <li>Aplicaci\u00f3n de la teor\u00eda de la normalizaci\u00f3n al dise\u00f1o de bases de datos relacionales.</li> <li>Desnormalizaci\u00f3n de bases de datos.</li> </ul> </li> <li> <p>M\u00e9todos de acceso a una base de datos</p> <ul> <li>Implementaci\u00f3n de los accesos por posici\u00f3n.</li> <li>Implementaci\u00f3n de los accesos por valor.</li> <li>\u00cdndices.</li> <li>\u00c1rboles B+.</li> <li>Dispersi\u00f3n.</li> <li>\u00cdndices agrupados.</li> <li>Implementaci\u00f3n de los accesos por diversos valores:<ul> <li>Implementaci\u00f3n de los accesos directos.</li> <li>Implementaci\u00f3n de los accesos secuenciales y mixtos.</li> </ul> </li> </ul> </li> <li> <p>Lenguajes de consulta y extracci\u00f3n de datos</p> <ul> <li>Caracter\u00edsticas generales.</li> <li>SQL.</li> <li>OQL.</li> <li>JPQL.</li> <li>XMLQL.</li> <li>Otros:<ul> <li>HTSQL.</li> <li>LINQ.</li> </ul> </li> </ul> </li> <li> <p>An\u00e1lisis del lenguaje de consulta para bases de datos relacionales</p> <ul> <li>Sentencias de definici\u00f3n de datos.</li> <li>Sentencias de manipulaci\u00f3n de datos.</li> <li>Sentencias de concesi\u00f3n y revocaci\u00f3n de privilegios.</li> <li>Procedimientos almacenados.</li> <li>Disparadores.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#unidad-formativa-3-herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion","title":"Unidad Formativa 3: Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n"},{"location":"normativa19/MF0966_3/#capacidades-y-criterios-de-evaluacion_2","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Aplicar procedimientos de extracci\u00f3n y consulta de informaci\u00f3n en el sistema gestor de datos, utilizando herramientas espec\u00edficas.</p> <ul> <li>CE1.1: Clasificar las diferentes opciones de trabajo implementadas en la herramienta de aplicaci\u00f3n, para su selecci\u00f3n en la creaci\u00f3n de procedimientos de extracci\u00f3n y consulta de informaci\u00f3n, seg\u00fan necesidades funcionales y especificaciones t\u00e9cnicas.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, extraer y consultar informaci\u00f3n utilizando herramientas espec\u00edficas en el sistema gestor de datos y seg\u00fan unas necesidades dadas:<ul> <li>Identificar las fuentes de informaci\u00f3n para la creaci\u00f3n de los procedimientos de consulta y extracci\u00f3n.</li> <li>Formular consultas que permitan la recuperaci\u00f3n de la informaci\u00f3n seg\u00fan un dise\u00f1o dado.</li> <li>Recuperar y archivar consultas previamente establecidas para optimizar los procesos de explotaci\u00f3n de la informaci\u00f3n.</li> <li>Establecer formatos de presentaci\u00f3n y publicaci\u00f3n de la informaci\u00f3n extra\u00edda del sistema gestor de datos utilizado para realizar la distribuci\u00f3n de la misma seg\u00fan un dise\u00f1o dado.</li> </ul> </li> <li>CE1.3: Interpretar la documentaci\u00f3n inherente a las herramientas espec\u00edficas, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, para permitir formular y crear procedimientos de extracci\u00f3n y consulta de informaci\u00f3n seg\u00fan necesidades funcionales.</li> </ul> <p>C2: Aplicar los procedimientos de configuraci\u00f3n de pasarelas y medios de comunicaci\u00f3n para extraer y consultar informaci\u00f3n de sistemas gestores de datos, seg\u00fan necesidades funcionales.</p> <ul> <li>CE2.1: Enunciar caracter\u00edsticas generales de pasarelas y medios de conexi\u00f3n para permitir su selecci\u00f3n y utilizaci\u00f3n en los procedimientos de extracci\u00f3n y consulta de informaci\u00f3n, seg\u00fan las especificaciones t\u00e9cnicas de los sistemas gestores de datos.</li> <li>CE2.2: Usar medios de conexi\u00f3n y pasarelas para extraer y consultar informaci\u00f3n del sistema gestor de datos implementado, seg\u00fan especificaciones funcionales.</li> <li>CE2.3: Identificar los par\u00e1metros a configurar en una pasarela o medio de conexi\u00f3n para poder extraer y consultar informaci\u00f3n de sistemas gestores de datos, seg\u00fan especificaciones t\u00e9cnicas de la infraestructura de comunicaciones y del sistema gestor de datos.</li> <li>CE2.4: Interpretar la documentaci\u00f3n inherente a pasarelas y medios de conexi\u00f3n, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, utiliz\u00e1ndola de ayuda en los procedimientos de configuraci\u00f3n.</li> </ul>"},{"location":"normativa19/MF0966_3/#contenidos_2","title":"Contenidos","text":"<ol> <li> <p>Sistemas de gesti\u00f3n de bases de datos</p> <ul> <li>Funcionalidades y objetivos.</li> <li>Arquitectura funcional.</li> <li>El componente de procesamiento de peticiones:<ul> <li>Seguridad.</li> <li>Concurrencia.</li> <li>Transaccionalidad.</li> <li>Procesamiento de consultas:<ul> <li>Optimizaci\u00f3n sem\u00e1ntica.</li> <li>Optimizaci\u00f3n sint\u00e1ctica.</li> <li>Optimizaci\u00f3n f\u00edsica.</li> </ul> </li> </ul> </li> <li>El componente de gesti\u00f3n de los datos:<ul> <li>Restauraci\u00f3n.</li> <li>Reconstrucci\u00f3n.</li> </ul> </li> <li>Gesti\u00f3n del rendimiento:<ul> <li>Plan de las consultas.</li> <li>Monitores.</li> <li>Benchmarks.</li> </ul> </li> <li>Herramientas:<ul> <li>Administraci\u00f3n.</li> <li>Importaci\u00f3n / Exportaci\u00f3n masiva de datos.</li> <li>Acceso y consulta de datos.</li> </ul> </li> </ul> </li> <li> <p>Sistemas de an\u00e1lisis de la informaci\u00f3n</p> <ul> <li>Miner\u00eda de datos.</li> <li>OLAP.</li> <li>Dashboard/scorecard.</li> <li>Herramientas:<ul> <li>Administraci\u00f3n.</li> <li>Migraci\u00f3n.</li> <li>ETL.</li> <li>Informaci\u00f3n estad\u00edstica.</li> </ul> </li> </ul> </li> <li> <p>Herramientas CASE</p> <ul> <li>Concepto.</li> <li>Historia y evoluci\u00f3n.</li> <li>Clasificaci\u00f3n.</li> <li>Componentes y funcionalidades de una herramienta CASE.</li> </ul> </li> <li> <p>Entornos 4GL</p> <ul> <li>Tipolog\u00eda.</li> <li>Componentes y funcionalidades.</li> <li>Generadores de informes.</li> <li>Generadores de formularios.</li> <li>Generadores de gr\u00e1ficos.</li> <li>Generadores de aplicaciones.</li> <li>Nuevas tendencias.</li> </ul> </li> <li> <p>Desarrollo de aplicaciones</p> <ul> <li>\u00d3rdenes embebidas.</li> <li>Uso de bibliotecas de funciones.</li> <li>Dise\u00f1o de nuevos lenguajes.</li> </ul> </li> <li> <p>Tecnolog\u00edas de conectividad a bases de datos</p> <ul> <li>OLEDB.</li> <li>ODBC.</li> <li>JDBC.</li> <li>SQLJ.</li> <li>SQL/CLI.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0966_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<ul> <li>Secuencia:<ul> <li>Para acceder a la Unidad Formativa 2, debe haberse superado la Unidad Formativa 1.</li> <li>Para acceder a la Unidad Formativa 3, deben haberse superado las Unidades Formativas 1 y 2.</li> </ul> </li> <li>Criterios de acceso para los alumnos:<ul> <li>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</li> </ul> </li> </ul>"},{"location":"normativa19/MF0966_3/#modificaciones-de-las-unidades-formativas","title":"Modificaciones de las unidades formativas","text":"<p>Teniendo en cuenta que los contenidos y la programaci\u00f3n de las unidades formativas datan de principios de la d\u00e1cada pasada, se propone una actualizaci\u00f3n de los contenidos y la duraci\u00f3n de las unidades formativas. Para ello, se proponen la siguiente modificaciones a partir de los contenidos del <code>ciclo superior de desarrollo de aplicaciones web</code>.</p>"},{"location":"normativa19/MF0966_3/#unidades-formativas-1-y-2-uf2213-y-uf2214","title":"Unidades formativas 1 y 2 (UF2213 y UF2214)","text":"<p>Unidad Formativa 1: Modelos de datos y visi\u00f3n conceptual de una base de datos</p> Campo Detalle C\u00f3digo UF2213 Nombre Modelos de datos y visi\u00f3n conceptual de una base de datos Duraci\u00f3n 60 horas Referente de Competencia RP1: Analizar las plataformas de almacenamiento de datos <p>Unidad Formativa 2: Implementaci\u00f3n y uso de una base de datos</p> Campo Detalle C\u00f3digo UF2214 Nombre Implementaci\u00f3n y uso de una base de datos Duraci\u00f3n 80 horas Referente de Competencia RP2: Extraer informaci\u00f3n de sistemas de almacenamiento <p>Modificaciones</p> <p>Estas unidades formativas se van a adaptar al m\u00f3dulo <code>0484 - Bases de Datos</code> que se propone en el m\u00f3dulo siguiente. Con alguna peque\u00f1a adaptaci\u00f3n para ajustar las horas.</p> Campo Detalle C\u00f3digo 0484 Nombre Bases de datos (160h) Duraci\u00f3n 140 horas <p>En la unidad formativa UF2213 se van a tratar los siguientes contenidos:</p> <ul> <li>Introducci\u00f3n a Bases de Datos</li> <li>Modelo Entidad-Relaci\u00f3n</li> <li>Modelo Relacional</li> </ul> <p>En la unidad formativa UF2214 se van a tratar los siguientes contenidos:</p> <ul> <li>M\u00f3delo l\u00f3gico de bases de datos.</li> <li>SQL<ul> <li>DDL (Data Definition Language)</li> <li>DML (Data Manipulation Language)</li> <li>DQL (Data Query Language)</li> <li>TCL (Transaction Control Language)</li> <li>PL/SQL (Procedural Language/SQL)</li> </ul> </li> </ul>"},{"location":"normativa19/MF0966_3/#unidad-formativa-3-herramientas-de-sistemas-gestores-de-bases-de-datos-pasarelas-y-medios-de-conexion_1","title":"Unidad Formativa 3: Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n","text":"Campo Detalle C\u00f3digo UF2215 Nombre Herramientas de sistemas gestores de bases de datos. Pasarelas y medios de conexi\u00f3n Duraci\u00f3n 70 horas Referente de Competencia RP3: Documentar procesos y utilizar herramientas de conexi\u00f3n <p>En este m\u00f3dulo vamos a realizar las siguientes modificaciones aprovechando los contenidos del m\u00f3dulo <code>0485 - Programaci\u00f3n</code>. Esta Unidad Formativa nos debe dar las competencias necesarias para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos. Ya que en el m\u00f3dulo siguiente se nos pide desarrollar una CMS, es necesario que tengamos conocimientos de programaci\u00f3n para poder realizar las tareas de consulta y manipulaci\u00f3n de informaci\u00f3n contenida en gestores de datos.</p> Campo Detalle C\u00f3digo 0485 Nombre Progrmaci\u00f3n (256h) Duraci\u00f3n 70 horas"},{"location":"normativa19/MF0966_3/#contenidos-reducidos-100-horas","title":"Contenidos Reducidos (100 horas)","text":""},{"location":"normativa19/MF0966_3/#curso-introduccion-a-la-programacion-con-javascript-100-horas","title":"Curso: Introducci\u00f3n a la Programaci\u00f3n con JavaScript (100 horas)","text":""},{"location":"normativa19/MF0966_3/#objetivo-general","title":"Objetivo General","text":"<p>Aprender los fundamentos de la programaci\u00f3n utilizando JavaScript, con un enfoque inicial en l\u00f3gica y estructuras del lenguaje, para luego integrar con HTML en el desarrollo de p\u00e1ginas web.</p>"},{"location":"normativa19/MF0966_3/#contenidos-reducidos","title":"Contenidos Reducidos","text":""},{"location":"normativa19/MF0966_3/#unidad-1-configuracion-del-entorno-y-fundamentos-de-javascript-20-horas","title":"Unidad 1: Configuraci\u00f3n del Entorno y Fundamentos de JavaScript (20 horas)","text":"<ul> <li> <p>1.1 Configuraci\u00f3n del entorno de desarrollo (5h)</p> <ul> <li>Instalaci\u00f3n de Node.js y configuraci\u00f3n b\u00e1sica.</li> <li>Uso de VSCode como editor principal.</li> <li>Introducci\u00f3n al uso de la consola y ejecuci\u00f3n de programas con Node.js.</li> </ul> </li> <li> <p>1.2 Variables, tipos de datos y operadores (10h)</p> <ul> <li>Declaraci\u00f3n de variables (<code>let</code>, <code>const</code> y <code>var</code>).</li> <li>Tipos de datos primitivos: cadenas, n\u00fameros, booleanos, etc.</li> <li>Operadores b\u00e1sicos: aritm\u00e9ticos, l\u00f3gicos, y relacionales.</li> </ul> </li> <li> <p>1.3 Estructuras b\u00e1sicas de control (5h)</p> <ul> <li>Condicionales (<code>if</code>, <code>else</code>, <code>else if</code>).</li> <li>Bucles (<code>for</code>, <code>while</code>, <code>do while</code>).</li> </ul> </li> </ul> <p>Objetivo: Familiarizar a los alumnos con el entorno de desarrollo, la sintaxis b\u00e1sica de JavaScript y las estructuras fundamentales de control.</p>"},{"location":"normativa19/MF0966_3/#unidad-2-funciones-y-manejo-de-errores-20-horas","title":"Unidad 2: Funciones y Manejo de Errores (20 horas)","text":"<ul> <li>2.1 Funciones en JavaScript (12h)<ul> <li>Declaraci\u00f3n y uso de funciones.</li> <li>Par\u00e1metros y valores de retorno.</li> <li>Funciones an\u00f3nimas y flecha (<code>arrow functions</code>).</li> <li>Alcance de las variables: local y global.</li> </ul> </li> <li>2.2 Manejo de errores (3h)<ul> <li>Uso de bloques <code>try</code>, <code>catch</code> y <code>finally</code>.</li> <li>Lanzar errores con <code>throw</code>.</li> </ul> </li> <li>2.3 M\u00e9todos b\u00e1sicos de entrada/salida (5h)<ul> <li>Uso de <code>prompt</code>, <code>alert</code>, y <code>console.log</code>.</li> <li>Interacci\u00f3n b\u00e1sica con el usuario.</li> </ul> </li> </ul> <p>Objetivo: Modularizar c\u00f3digo utilizando funciones, manejar errores y trabajar con entradas/salidas b\u00e1sicas.</p>"},{"location":"normativa19/MF0966_3/#unidad-3-arrays-objetos-y-clases-30-horas","title":"Unidad 3: Arrays, Objetos y Clases (30 horas)","text":"<ul> <li>3.1 Arrays y su manipulaci\u00f3n (8h)<ul> <li>Creaci\u00f3n y uso de arrays.</li> <li>M\u00e9todos comunes: <code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>slice</code>, <code>splice</code>, etc.</li> <li>Iteraci\u00f3n de arrays: <code>for</code>, <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>.</li> </ul> </li> <li>3.2 Objetos y su uso (7h)<ul> <li>Concepto de objeto y sus propiedades.</li> <li>Creaci\u00f3n y manipulaci\u00f3n de objetos.</li> <li>M\u00e9todos en objetos.</li> </ul> </li> <li>3.3 Clases en JavaScript (15h)<ul> <li>Declaraci\u00f3n de clases y uso.</li> <li>Constructores.</li> <li>M\u00e9todos y atributos.</li> <li>Herencia b\u00e1sica.</li> </ul> </li> </ul> <p>Objetivo: Trabajar con estructuras m\u00e1s complejas como arrays, objetos y clases para modelar datos y estructuras reales.</p>"},{"location":"normativa19/MF0966_3/#unidad-4-integracion-de-javascript-con-html-y-el-dom-20-horas","title":"Unidad 4: Integraci\u00f3n de JavaScript con HTML y el DOM (20 horas)","text":"<ul> <li>4.1 Introducci\u00f3n a HTML (5h)<ul> <li>Conceptos b\u00e1sicos de HTML.</li> <li>Uso de etiquetas comunes: <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;form&gt;</code>, <code>&lt;input&gt;</code>.</li> <li>Crear un archivo HTML b\u00e1sico.</li> </ul> </li> <li>4.2 Vinculaci\u00f3n de JavaScript con HTML (5h)<ul> <li>Uso de etiquetas <code>&lt;script&gt;</code> para enlazar archivos JavaScript.</li> <li>Ejecuci\u00f3n de c\u00f3digo JS en eventos b\u00e1sicos de HTML (<code>onClick</code>, <code>onSubmit</code>).</li> </ul> </li> <li>4.3 Introducci\u00f3n al DOM y manejo b\u00e1sico (10h)<ul> <li>\u00bfQu\u00e9 es el DOM?</li> <li>Seleccionar elementos: <code>getElementById</code>, <code>querySelector</code>.</li> <li>Modificaci\u00f3n b\u00e1sica del contenido: <code>innerHTML</code>, <code>textContent</code>.</li> <li>Manejo de eventos: <code>addEventListener</code>.</li> <li>Ejercicio pr\u00e1ctico b\u00e1sico: Crear una lista interactiva donde los usuarios puedan a\u00f1adir y eliminar elementos.</li> </ul> </li> </ul> <p>Objetivo: Introducir la integraci\u00f3n de JavaScript con HTML y la manipulaci\u00f3n b\u00e1sica del DOM para trabajar en p\u00e1ginas web din\u00e1micas.</p>"},{"location":"normativa19/MF0966_3/#unidad-5-proyecto-final-10-horas","title":"Unidad 5: Proyecto Final (10 horas)","text":"<ul> <li>5.1 Desarrollo de un proyecto b\u00e1sico<ul> <li>Crear un gestor de tareas simple:          - Permitir al usuario a\u00f1adir, editar y eliminar tareas.          - Almacenar datos temporalmente en arrays u objetos.          - Mostrar la lista de tareas en una p\u00e1gina web utilizando HTML y el DOM.          - Uso de eventos para manejar interacciones del usuario.          - Uso del DOM para actualizar la interfaz din\u00e1mica.</li> </ul> </li> </ul> <p>Objetivo: Integrar todos los conocimientos adquiridos en un proyecto pr\u00e1ctico.</p>"},{"location":"normativa19/MF0966_3/#recursos-y-herramientas","title":"Recursos y Herramientas","text":""},{"location":"normativa19/MF0966_3/#editor-y-ejecucion","title":"Editor y Ejecuci\u00f3n","text":"<ul> <li>Editor de c\u00f3digo: VSCode (con extensiones como Prettier para formato).</li> <li>Ejecuci\u00f3n: Uso de Node.js para la mayor parte del curso. En la unidad del DOM, se usar\u00e1 un navegador para vincular JavaScript con HTML.</li> </ul>"},{"location":"normativa19/MF0966_3/#materiales-de-apoyo","title":"Materiales de apoyo","text":"<ol> <li>MDN Web Docs (JavaScript):</li> <li>Gu\u00eda de JavaScript.</li> <li>FreeCodeCamp:</li> <li>Curso de JavaScript B\u00e1sico.</li> <li>Ejercicios pr\u00e1cticos interactivos:</li> <li>Exercism.io - JavaScript.</li> <li>Codewars.</li> </ol>"},{"location":"normativa19/MF0966_3/#distribucion-del-tiempo","title":"Distribuci\u00f3n del Tiempo","text":"Unidad Did\u00e1ctica Horas Unidad 1: Fundamentos de JavaScript 20 Unidad 2: Funciones y Manejo de Errores 20 Unidad 3: Arrays, Objetos y Clases 30 Unidad 4: Integraci\u00f3n de JS con HTML y DOM 20 Unidad 5: Proyecto Final 10 Total 100"},{"location":"normativa19/MF0967_3/","title":"M\u00f3dulo Formativo: Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos","text":"Campo Detalle C\u00f3digo MF0967_3 Nombre Creaci\u00f3n y gesti\u00f3n de repositorios de contenidos Nivel 3 Duraci\u00f3n 200 horas Asociado a la Unidad de Competencia UC0967_3: Crear y gestionar repositorios de contenidos"},{"location":"normativa19/MF0967_3/#unidad-formativa-1-repositorios-de-contenidos","title":"Unidad Formativa 1: Repositorios de contenidos","text":"Campo Detalle C\u00f3digo UF2216 Nombre Repositorios de contenidos Duraci\u00f3n 70 horas Referente de Competencia RP1: Dise\u00f1ar repositorios de contenidos"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Crear repositorios de contenidos conforme a las especificaciones funcionales recibidas y est\u00e1ndares de desarrollo software.</p> <ul> <li>CE1.1: Identificar los est\u00e1ndares de desarrollo y normativas aplicables al dise\u00f1o de repositorios.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, debidamente caracterizado, realizar las funciones de creaci\u00f3n de repositorios para cubrir las necesidades de gesti\u00f3n de informaci\u00f3n, incluyendo:</li> <li>Crear y archivar informaci\u00f3n en el repositorio utilizando los descriptores establecidos en el dise\u00f1o del repositorio y normativas est\u00e1ndares del mercado.</li> <li>Almacenar el repositorio en almacenes de datos de acuerdo a planos de bases de datos, documentos de marcas extendidas, entre otros.</li> <li>Documentar la creaci\u00f3n del repositorio conforme a las especificaciones establecidas y normativas est\u00e1ndares del mercado.</li> <li>CE1.3: En un supuesto pr\u00e1ctico, debidamente caracterizado, crear repositorios utilizando lenguajes espec\u00edficos de marcas extendidas y herramientas de desarrollo software que incluyan:</li> <li>Reconocimiento de los diferentes tipos de elementos, atributos, declaraciones de entidades y otros elementos de marcado existentes en el repositorio.</li> <li>Uso de hojas de estilo para permitir homogeneizar contenidos en los repositorios.</li> <li>Utilizaci\u00f3n de esquemas de repositorio que permitan, entre otras funcionalidades, el desarrollo de vocabularios comunes para mejorar la interoperabilidad entre aplicaciones e intercambio de datos.</li> <li>Incorporaci\u00f3n de funcionalidades ling\u00fc\u00edsticas de la informaci\u00f3n contenida en el repositorio, para garantizar la accesibilidad y usabilidad de dicha informaci\u00f3n.</li> <li>Construcci\u00f3n del repositorio de acuerdo a un dise\u00f1o establecido para su implementaci\u00f3n.</li> <li>Documentaci\u00f3n de todas las fases de creaci\u00f3n y dise\u00f1o del repositorio.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Repositorios de contenidos</p> <ul> <li>Conceptos b\u00e1sicos.</li> <li>Incorporaci\u00f3n de contenidos:<ul> <li>Adquisici\u00f3n.</li> <li>Agregaci\u00f3n.</li> <li>Creaci\u00f3n.</li> </ul> </li> <li>Asociaciones entre contenidos:<ul> <li>Jerarqu\u00edas, taxonom\u00edas.</li> <li>\u00cdndices.</li> <li>Referencias cruzadas.</li> </ul> </li> <li>Ciclos de vida de los documentos.</li> <li>Flujos de trabajo.</li> <li>Versionado de contenidos.</li> <li>Check In/Check Out:<ul> <li>Herramientas diff/merge.</li> </ul> </li> <li>B\u00fasqueda y localizaci\u00f3n de la informaci\u00f3n.</li> <li>Publicaci\u00f3n:<ul> <li>Sindicaci\u00f3n.</li> <li>Servicios Web.</li> </ul> </li> <li>Seguridad.</li> </ul> </li> <li> <p>Estructura interna de un repositorio</p> <ul> <li>Almacenamiento de la informaci\u00f3n:<ul> <li>Base de datos.</li> <li>Ficheros.</li> </ul> </li> <li>Est\u00e1ndares de desarrollo:<ul> <li>CMIS.</li> <li>JSR-168.</li> <li>JSR-170.</li> <li>JSR-283.</li> </ul> </li> </ul> </li> <li> <p>Metadatos</p> <ul> <li>Concepto.</li> <li>Ontolog\u00eda RDF.</li> <li>Metadatos Dublin Core.</li> <li>Metadatos XMP (Adobe's Extensible Metadata Platform).</li> <li>Metadatos IPTC.</li> </ul> </li> <li> <p>Sistemas de gesti\u00f3n de contenidos</p> <ul> <li>Sistemas de gesti\u00f3n de bit\u00e1coras (Blogs).</li> <li>Sistemas Wiki.</li> <li>Sistemas Portales.</li> </ul> </li> <li> <p>Sistemas de gesti\u00f3n del aprendizaje (LMS)</p> <ul> <li>Descripci\u00f3n general.</li> <li>Est\u00e1ndares IMS.</li> <li>Est\u00e1ndar IEEE LOM.</li> <li>Iniciativa ADL SCORM.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#unidad-formativa-2-lenguaje-xml","title":"Unidad Formativa 2: Lenguaje XML","text":"Campo Detalle C\u00f3digo UF2217 Nombre Lenguaje XML Duraci\u00f3n 80 horas Referente de Competencia RP2: Esta unidad formativa se corresponde con la RP2"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Desarrollar componentes software que permitan la explotaci\u00f3n de contenidos de repositorios, utilizando lenguajes espec\u00edficos y est\u00e1ndares de desarrollo software.</p> <ul> <li>CE1.1: Identificar los est\u00e1ndares de desarrollo software utilizando lenguajes espec\u00edficos que permitan la explotaci\u00f3n de contenidos de repositorios, para permitir su transformaci\u00f3n, publicaci\u00f3n e intercambios de contenidos entre los sistemas de informaci\u00f3n seg\u00fan unas especificaciones funcionales dadas.</li> <li>CE1.2: En un supuesto pr\u00e1ctico, dadas unas necesidades de explotaci\u00f3n del repositorio de informaci\u00f3n, construir componentes software que permitan la explotaci\u00f3n de contenidos de repositorios, utilizando lenguajes espec\u00edficos y est\u00e1ndares de desarrollo software que desarrollen las siguientes funcionalidades:</li> <li>Transformar contenidos del repositorio que permitan ser presentados y publicados seg\u00fan normas est\u00e1ndares especificadas.</li> <li>Acceder a partes del repositorio que aseguren la extracci\u00f3n de los contenidos necesarios para el desarrollo del componente software.</li> <li>Crear enlaces entre contenidos del repositorio que aseguren la conectividad entre los diferentes recursos del repositorio.</li> <li>Permitir accesos a la estructura interna del repositorio para su utilizaci\u00f3n en la explotaci\u00f3n de contenidos.</li> <li>CE1.3: Interpretar la documentaci\u00f3n inherente a los lenguajes espec\u00edficos utilizados en la creaci\u00f3n de repositorios de contenidos, incluso si est\u00e1 editada en la lengua extranjera de uso m\u00e1s frecuente en el sector, utiliz\u00e1ndola de ayuda en el desarrollo de componentes.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Definici\u00f3n de documentos XML</p> <ul> <li>Elementos.</li> <li>Atributos.</li> <li>Documentos bien formados.</li> <li>Codificaci\u00f3n y juegos de caracteres.</li> <li>Entidades.</li> <li>Comentarios.</li> <li>Inclusi\u00f3n de datos no XML.</li> <li>Espacios de nombres.</li> </ul> </li> <li> <p>Validaci\u00f3n mediante DTD</p> <ul> <li>Declaraciones de elementos:<ul> <li>PCDATA.</li> <li>Elementos hijos.</li> <li>Secuencias.</li> <li>N\u00famero de hijos.</li> <li>Opciones.</li> <li>Par\u00e9ntesis.</li> <li>Contenido mixto.</li> <li>Elementos vac\u00edos.</li> <li>ANY.</li> </ul> </li> <li>Declaraciones de atributo:<ul> <li>CDATA.</li> <li>NMTOKEN.</li> <li>NMTOKENS.</li> <li>Enumeraci\u00f3n.</li> <li>ID.</li> <li>IDREF.</li> <li>IDREFS.</li> <li>ENTITY.</li> <li>ENTITIES.</li> <li>NOTATION.</li> </ul> </li> <li>Declaraciones de identidad general.</li> <li>Entidades generales externas analizadas.</li> <li>Notaciones y entidades exteriores sin analizar.</li> <li>Entidades de par\u00e1metro.</li> <li>Inclusi\u00f3n condicional.</li> </ul> </li> <li> <p>Esquemas XML</p> <ul> <li>Organizaci\u00f3n del documento.</li> <li>Anotaciones.</li> <li>Declaraciones de elementos.</li> <li>Declaraciones de atributos.</li> <li>Tipos complejos.</li> <li>Elementos vac\u00edos.</li> <li>Definici\u00f3n de tipos simples.</li> <li>Uso de grupos.</li> <li>Inclusi\u00f3n de declaraciones externas.</li> <li>Modificaci\u00f3n de declaraciones externas.</li> <li>Importaci\u00f3n de esquemas de otros espacios de nombre.</li> <li>Tipos complejos derivados.</li> </ul> </li> <li> <p>Acceso a la informaci\u00f3n de documentos XML</p> <ul> <li>XPath.</li> <li>XLink.</li> <li>XPointer.</li> <li>XQL.</li> </ul> </li> <li> <p>Transformaci\u00f3n de documentos XML</p> <ul> <li>CSS.</li> <li>XSL / XSL-FO.</li> <li>XSLT.</li> </ul> </li> <li> <p>Otros lenguajes a utilizar con documentos XML</p> <ul> <li>XML Base.</li> <li>XInclude.</li> <li>XML Information Set.</li> </ul> </li> <li> <p>Aplicaciones del lenguaje XML</p> <ul> <li>XHTML.</li> <li>REST.</li> <li>XML-RPC.</li> <li>SOAP.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#unidad-formativa-3-desarrollo-de-un-gestor-de-contenidos-cms","title":"Unidad Formativa 3: Desarrollo de un gestor de contenidos (CMS)","text":"Campo Detalle C\u00f3digo UF2218 Nombre Desarrollo de un gestor de contenidos (CMS) Duraci\u00f3n 50 horas Referente de Competencia RP3: Esta unidad formativa se corresponde con la RP3"},{"location":"normativa19/MF0967_3/#capacidades-y-criterios-de-evaluacion_2","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Distinguir las estructuras y t\u00e9cnicas de programaci\u00f3n l\u00f3gicas para el desarrollo de componentes software, teniendo en cuenta las tecnolog\u00edas de desarrollo.</p> <ul> <li>CE1.1: Clasificar las estructuras y t\u00e9cnicas de programaci\u00f3n l\u00f3gicas est\u00e1ndares para el desarrollo de componentes software, seg\u00fan metodolog\u00edas de desarrollo existentes.</li> <li>CE1.2: Identificar las fases que constituyen el desarrollo de un componente software, para su posterior creaci\u00f3n de acuerdo a herramientas y lenguajes especificados.</li> <li>CE1.3: Clasificar los elementos que constituyen un componente software, para su aplicaci\u00f3n en el desarrollo del mismo seg\u00fan unos dise\u00f1os dados.</li> <li>CE1.4: Explicar los m\u00e9todos para utilizar o usar librer\u00edas de aplicaciones desde los lenguajes de programaci\u00f3n, para permitir la explotaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n seg\u00fan especificaciones de dise\u00f1o y funcionales.</li> <li>CE1.5: Identificar los modelos de librer\u00edas de aplicaciones est\u00e1ndares del mercado que permiten el acceso, consulta y extracci\u00f3n de informaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n, para ser utilizados en el desarrollo de componentes utilizando lenguajes de programaci\u00f3n seg\u00fan especificaciones de dise\u00f1o y funcionales dadas.</li> </ul> <p>C2: Elaborar elementos software que integren o exploren contenidos de otros repositorios, utilizando interfaz de aplicaciones est\u00e1ndares del mercado para acceder a los repositorios de datos.</p> <ul> <li>CE2.1: Elaborar elementos software que cumplan la funcionalidad de interpretar los contenidos de los repositorios, para proporcionar dicha informaci\u00f3n seg\u00fan unos requerimientos especificados.</li> <li>CE2.2: Usar los modelos de librer\u00edas de aplicaciones (API) est\u00e1ndares del mercado (modelos de objetos de documento \u00abDOM\u00bb, modelos basados en eventos \u00abSAX\u00bb, entre otros) que permiten el acceso, consulta y extracci\u00f3n de informaci\u00f3n de los repositorios de los sistemas de informaci\u00f3n, para ser utilizados en el desarrollo de componentes utilizando lenguajes de programaci\u00f3n seg\u00fan especificaciones funcionales y de dise\u00f1o dadas.</li> <li>CE2.3: Verificar y depurar los elementos software elaborados asegurando que se obtienen los contenidos especificados.</li> </ul>"},{"location":"normativa19/MF0967_3/#contenidos_2","title":"Contenidos","text":"<ol> <li> <p>Proyectos de implementaci\u00f3n</p> <ul> <li>Metodolog\u00eda de desarrollo.</li> <li>An\u00e1lisis de requerimientos.</li> <li>Descripci\u00f3n funcional.</li> <li>Dise\u00f1o de arquitectura.</li> <li>Dise\u00f1o t\u00e9cnico.</li> <li>Programaci\u00f3n:<ul> <li>Pruebas unitarias.</li> </ul> </li> <li>Auditor\u00eda funcional.</li> <li>Auditor\u00eda t\u00e9cnica:<ul> <li>Revisi\u00f3n de c\u00f3digo.</li> <li>M\u00e9tricas.</li> <li>Pruebas de rendimiento.</li> </ul> </li> <li>Despliegue.</li> <li>Liberaci\u00f3n.</li> </ul> </li> <li> <p>Entorno tecnol\u00f3gico</p> <ul> <li>Plataformas de servicios CMS.</li> <li>Adecuaci\u00f3n. Customizaci\u00f3n.</li> <li>Desarrollo de nuevos componentes:<ul> <li>Especificaci\u00f3n. Interfaz.</li> </ul> </li> <li>Implementaci\u00f3n:<ul> <li>Lenguaje de programaci\u00f3n.</li> <li>Librer\u00edas. APIs.</li> </ul> </li> <li>Documentaci\u00f3n.</li> </ul> </li> <li> <p>Modelos de procesamiento XML</p> <ul> <li>Procesamiento de XML basado en texto.</li> <li>Procesamiento XML dirigido por eventos.</li> <li>Procesamiento XML basado en \u00e1rboles.</li> <li>Procesamiento basado en la extracci\u00f3n.</li> <li>Transformaciones.</li> <li>Abstracci\u00f3n de XML.</li> <li>Est\u00e1ndares y extensiones.</li> </ul> </li> <li> <p>Modelo de objeto de documento (DOM)</p> <ul> <li>Estructura de DOM Core.</li> <li>Node y otras interfaces gen\u00e9ricas.</li> <li>Nodos estructurales.</li> <li>Nodos de contenido.</li> <li>Interfaz DOMImplementation.</li> <li>Interfaces de DOM Level 3.</li> </ul> </li> <li> <p>Modelo basado en eventos (SAX)</p> <ul> <li>Interfaz ContentHandler.</li> <li>Opciones y propiedades.</li> <li>Filtros.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0967_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<p>Secuencia:</p> <ul> <li>Para acceder a la Unidad Formativa 2 debe haberse superado la Unidad Formativa 1.</li> <li>Para acceder a la Unidad Formativa 3 deben haberse superado las Unidades Formativas 1 y 2.</li> </ul> <p>Criterios de acceso para los alumnos:</p> <p>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</p>"},{"location":"normativa19/MF0968_3/","title":"M\u00f3dulo Formativo: Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n","text":"Campo Detalle C\u00f3digo MF0968_3 Nombre Administraci\u00f3n de sistemas de gesti\u00f3n de informaci\u00f3n Nivel 3 Duraci\u00f3n 100 horas Unidad de Competencia Asociada UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n"},{"location":"normativa19/MF0968_3/#unidad-formativa-1-gestion-y-control-de-los-sistemas-de-informacion","title":"Unidad Formativa 1: Gesti\u00f3n y control de los sistemas de informaci\u00f3n","text":"Campo Detalle C\u00f3digo UF1643 Nombre Gesti\u00f3n y control de los sistemas de informaci\u00f3n Duraci\u00f3n 70 horas Referente de Competencia Esta unidad formativa se corresponde con la RP1, RP2 y RP3"},{"location":"normativa19/MF0968_3/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Determinar los accesos al sistema de gesti\u00f3n de informaci\u00f3n utilizando herramientas espec\u00edficas, seg\u00fan unas necesidades y especificaciones funcionales dadas.</p> <ul> <li>CE1.1: Describir las funcionalidades y caracter\u00edsticas de un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.2: Identificar los tipos de sistemas de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.3: Relacionar los componentes o elementos de un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.4: Definir las pol\u00edticas de acceso de los usuarios a los recursos del sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.5: Determinar los privilegios asignados a los usuarios y otros elementos del sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE1.6: En un supuesto pr\u00e1ctico, determinar los par\u00e1metros de seguridad existentes en el sistema de gesti\u00f3n de informaci\u00f3n.</li> </ul> <p>C2: Aplicar procedimientos de auditor\u00eda y resoluci\u00f3n de incidencias en el sistema de gesti\u00f3n de informaci\u00f3n, seg\u00fan unas necesidades dadas.</p> <ul> <li>CE2.1: En un supuesto pr\u00e1ctico, aplicar procedimientos de auditor\u00eda para obtener informaci\u00f3n inherente al acceso y explotaci\u00f3n del sistema gestor de informaci\u00f3n.</li> <li>CE2.2: Aplicar los par\u00e1metros de rendimiento establecidos en el sistema gestor de informaci\u00f3n.</li> <li>CE2.3: Identificar los tipos de incidencias que pueden ocurrir en el sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE2.4: Identificar los procesos de control de trazabilidad.</li> <li>CE2.5: Documentar las incidencias ocurridas y su resoluci\u00f3n.</li> </ul> <p>C3: Mantener los procesos de flujo de informaci\u00f3n en el sistema de gesti\u00f3n de informaci\u00f3n, de acuerdo a unas especificaciones dadas.</p> <ul> <li>CE3.1: Identificar las caracter\u00edsticas de los flujos de informaci\u00f3n en un sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE3.2: Utilizar herramientas espec\u00edficas inherentes al sistema de gesti\u00f3n de informaci\u00f3n.</li> <li>CE3.3: En un supuesto pr\u00e1ctico, realizar el mantenimiento de los procesos de flujo de informaci\u00f3n.</li> <li>CE3.4: Utilizar las herramientas de construcci\u00f3n de flujos de informaci\u00f3n.</li> <li>CE3.5: Identificar y proteger los registros y contenidos corporativos.</li> <li>CE3.6: Interpretar la documentaci\u00f3n t\u00e9cnica inherente a las herramientas utilizadas.</li> </ul>"},{"location":"normativa19/MF0968_3/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Caracter\u00edsticas y elementos de un sistema de gesti\u00f3n de la informaci\u00f3n</p> <ul> <li>Objetivo: Alineaci\u00f3n con el negocio.</li> <li>Proceso Din\u00e1mico: mejora continua (Planificar, Hacer, Verificar, Actuar).</li> <li>Factores influyentes:</li> <li>Internos.</li> <li>Externos.</li> <li>Actores:</li> <li>Personas.</li> <li>Datos-Informaci\u00f3n-conocimiento.</li> <li>Recursos materiales (infraestructuras, sedes, tecnolog\u00eda).</li> <li>Actividades-Procedimientos o t\u00e9cnicas de trabajo.</li> <li>Organizaci\u00f3n:</li> <li>Gobierno corporativo.</li> <li>Mejores pr\u00e1cticas para la gesti\u00f3n de las tecnolog\u00edas de la informaci\u00f3n.</li> <li>Comit\u00e9 de estrategia de TI:<ul> <li>Scorecard balanceado est\u00e1ndar de TI.</li> <li>Gobierno de seguridad de informaci\u00f3n.</li> </ul> </li> <li>Estructura organizativa de la empresa.</li> <li>Estrategia de sistemas de informaci\u00f3n:<ul> <li>Planificaci\u00f3n estrat\u00e9gica.</li> <li>Comit\u00e9 de direcci\u00f3n.</li> </ul> </li> </ul> </li> <li> <p>Tipos de sistema de gesti\u00f3n de informaci\u00f3n y gestores de datos</p> <ul> <li>Atendiendo a Objetivos:</li> <li>Sistemas Competitivos.</li> <li>Sistemas Cooperativos.</li> <li>Desde un punto de vista empresarial:</li> <li>Sistema de procesamiento de transacciones (TPS).</li> <li>Sistemas de informaci\u00f3n gerencial (MIS).</li> <li>Sistemas de soporte a decisiones (DSS).</li> <li>Sistemas de informaci\u00f3n ejecutiva (EIS).</li> <li>Sistemas de automatizaci\u00f3n de oficinas (OAS).</li> <li>Sistema Planificaci\u00f3n de Recursos (ERP).</li> <li>Sistema experto (SE).</li> <li>Seg\u00fan el entorno de aplicaci\u00f3n:</li> <li>Entorno transaccional.</li> <li>Entorno decisional.</li> <li>Tipos de DBMS:</li> <li>Seg\u00fan modelo de datos:<ul> <li>Sistemas gestores de datos relacionales.</li> <li>Sistemas gestores de datos orientados a objetos.</li> <li>Sistemas gestores de datos objeto-relacionales.</li> </ul> </li> <li>Seg\u00fan n\u00famero de usuarios:<ul> <li>Monousuario.</li> <li>Multiusuario.</li> </ul> </li> <li>Seg\u00fan n\u00famero de sitios:<ul> <li>Centralizado.</li> <li>Distribuido.</li> </ul> </li> <li>Arquitectura de tres esquemas:<ul> <li>Nivel Interno o f\u00edsico.</li> <li>Nivel Conceptual.</li> <li>Nivel Externo o de Vistas.</li> </ul> </li> <li>Independencia de datos:<ul> <li>L\u00f3gica.</li> <li>F\u00edsica.</li> </ul> </li> <li>Consultas a base de datos. Lenguajes:<ul> <li>Seg\u00fan nivel.</li> <li>Seg\u00fan \u00e1rea:<ul> <li>Lenguaje para definir vistas.</li> <li>Lenguaje para definir datos.</li> <li>Lenguaje para definir almacenamiento.</li> <li>Lenguaje para manipular datos.</li> </ul> </li> </ul> </li> <li>Transacciones:<ul> <li>Atomicidad.</li> <li>Consistencia.</li> <li>Isolation (aislamiento).</li> <li>Durabilidad.</li> </ul> </li> <li>Interfaces de usuario:<ul> <li>Interprete de comandos:</li> <li>Formularios.</li> <li>Interfaces gr\u00e1ficas.</li> <li>Interfaces en Lenguaje natural.</li> </ul> </li> <li>SGBD:<ul> <li>Libres.</li> <li>Comerciales.</li> <li>No libres y gratuitos.</li> </ul> </li> </ul> </li> <li> <p>Gesti\u00f3n de los procesos de control de trazabilidad</p> <ul> <li>Controles de aplicaci\u00f3n:</li> <li>Controles de entrada/origen.</li> <li>Procedimientos y controles de procesado de datos.</li> <li>Controles de salida.</li> <li>Control cumplimiento objetivos proceso de negocio.</li> </ul> </li> <li> <p>Auditor\u00eda en los sistemas de informaci\u00f3n</p> <ul> <li>Auditor\u00eda a los controles de aplicaci\u00f3n:</li> <li>Flujo de las transacciones a trav\u00e9s del sistema.</li> <li>Modelo de estudio de riesgos para analizar los controles de las aplicaciones.</li> <li>Observar y probar los procedimientos realizados por los usuarios.</li> <li>Prueba de integridad de los datos.</li> <li>Auditor\u00eda continua en l\u00ednea.</li> <li>T\u00e9cnicas de auditor\u00eda en l\u00ednea.</li> <li>Auditor\u00eda del desarrollo, adquisici\u00f3n y mantenimiento de sistemas:</li> <li>Administraci\u00f3n / gesti\u00f3n de proyectos.</li> <li>Estudio de factibilidad/viabilidad.</li> <li>Definici\u00f3n de los requerimientos.</li> <li>Proceso de adquisici\u00f3n del software.</li> <li>Dise\u00f1o y desarrollo detallado.</li> <li>Etapa de implementaci\u00f3n.</li> <li>Revisi\u00f3n posterior a la implementaci\u00f3n.</li> <li>Procedimientos de cambios al sistema y proceso de migraci\u00f3n de programas.</li> <li>Auditor\u00eda de la infraestructura y de las operaciones:</li> <li>Revisiones de hardware.</li> <li>Revisiones del sistema operativo.</li> <li>Revisiones de la base de datos.</li> <li>Revisiones de infraestructura e implementaci\u00f3n de la red.</li> <li>Revisiones de control operativo de redes.</li> <li>Revisiones de las operaciones de SI.</li> <li>Operaciones lights-out.</li> <li>Revisiones de reporte de problemas por la gerencia.</li> <li>Revisiones de disponibilidad de hardware y de reporte de utilizaci\u00f3n.</li> <li>Revisi\u00f3n de cronogramas.</li> </ul> </li> <li> <p>Par\u00e1metros de rendimiento en el sistema y procedimientos de resoluci\u00f3n de incidencias</p> <ul> <li>Par\u00e1metros de hardware:</li> <li>Utilizaci\u00f3n de la Memoria, CPU, Utilizaci\u00f3n de disco.</li> <li>Par\u00e1metros de software:</li> <li>Estad\u00edsticas del Administrador de Buffer.</li> <li>Estad\u00edsticas de Conexi\u00f3n.</li> <li>Detalles Cache.</li> <li>Detalles de Bloqueos.</li> <li>Detalles de M\u00e9todos de Acceso.</li> <li>Detalles de la Base de Datos.</li> <li>Entornos de prueba:</li> <li>Prueba de Unidad.</li> <li>Prueba de Interfaz o de integraci\u00f3n.</li> <li>Prueba del Sistema.</li> <li>Pruebas de Recuperaci\u00f3n.</li> <li>Pruebas de Seguridad.</li> <li>Pruebas de Estr\u00e9s /Volumen.</li> <li>Pruebas de Rendimiento.</li> <li>Prueba de Aceptaci\u00f3n Final.</li> <li>T\u00e9cnicas y procedimientos de resoluci\u00f3n de incidencias en un sistema.</li> <li>Visi\u00f3n general de Gesti\u00f3n y respuesta a Incidentes.</li> <li>Conceptos de gesti\u00f3n de incidentes.</li> <li>Objetivos en la gesti\u00f3n de incidentes.</li> <li>M\u00e9tricas e indicadores de la gesti\u00f3n de incidentes.</li> <li>Definici\u00f3n de los procedimientos de gesti\u00f3n de incidentes.</li> <li>Desarrollo de un plan de respuesta a incidentes.</li> <li>Desarrollo de planes de respuesta y recuperaci\u00f3n.</li> <li>Pruebas de los planes de respuesta y recuperaci\u00f3n.</li> <li>Ejecuci\u00f3n de los planes de respuesta y recuperaci\u00f3n.</li> <li>Documentaci\u00f3n de eventos.</li> <li>Decisiones posteriores al evento.</li> <li>ITIL-ISO/IEC 20000.</li> </ul> </li> <li> <p>Caracter\u00edsticas de los procesos de flujo y ciclo de vida de la informaci\u00f3n. Componentes y herramientas</p> <ul> <li>Gesti\u00f3n del riesgo:</li> <li>Visi\u00f3n General.</li> <li>Conceptos de al GR en Seguridad de la Informaci\u00f3n.</li> <li>Implantaci\u00f3n de la GR.</li> <li>Metodolog\u00eda para la evaluaci\u00f3n y an\u00e1lisis de riesgos.</li> <li>Evaluaci\u00f3n del riesgo.</li> <li>Controles y contramedidas.</li> <li>Tiempo Objetivo de recuperaci\u00f3n.</li> <li>Integraci\u00f3n en los procesos de Ciclo de Vida.</li> <li>Niveles m\u00ednimos de Control.</li> <li>Monitorizaci\u00f3n.</li> <li>Capacitaci\u00f3n y concienciaci\u00f3n.</li> <li>ISO/IEC 27001.</li> <li>Desarrollo de aplicaciones:</li> <li>Enfoque tradicional m\u00e9todo del ciclo de vida del desarrollo de sistemas.</li> <li>Sistemas integrados de gesti\u00f3n / administraci\u00f3n de recursos.</li> <li>Descripci\u00f3n de las etapas tradicionales de SDLC.</li> <li>Estudio de factibilidad / viabilidad.</li> <li>Definici\u00f3n de requerimientos.</li> <li>Diagramas de entidad - relaci\u00f3n.</li> <li>Adquisici\u00f3n de software.</li> <li>Dise\u00f1o.</li> <li>Desarrollo.</li> <li>Implementaci\u00f3n.</li> <li>Revisi\u00f3n posterior a la implementaci\u00f3n.</li> <li>Estrategias alternativas para el desarrollo de aplicaciones.</li> <li>ISO/IEC 15504.</li> <li>CMMI.</li> <li>METRICA 3:<ul> <li>Planificaci\u00f3n de Sistemas de Informaci\u00f3n:<ul> <li>Cat\u00e1logo de requisitos de PSI.</li> <li>Arquitectura de informaci\u00f3n.</li> </ul> </li> <li>Desarrollo de Sistemas de Informaci\u00f3n:<ul> <li>Estudio de Viabilidad del Sistema (EVS),</li> <li>An\u00e1lisis del Sistema de Informaci\u00f3n (ASI),</li> <li>Dise\u00f1o del Sistema de Informaci\u00f3n (DSI),</li> <li>Construcci\u00f3n del Sistema de Informaci\u00f3n (CSI).</li> <li>Implantaci\u00f3n y Aceptaci\u00f3n del Sistema (IAS).</li> <li>Mantenimiento de Sistemas de Informaci\u00f3n.</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"normativa19/MF0968_3/#unidad-formativa-2-canales-de-distribucion-y-publicacion-utilizados-en-los-sistemas-gestores-de-informacion","title":"Unidad Formativa 2: Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n","text":"Campo Detalle C\u00f3digo UF1644 Nombre Canales de distribuci\u00f3n y publicaci\u00f3n utilizados en los sistemas gestores de informaci\u00f3n Duraci\u00f3n 30 horas Referente de Competencia Esta unidad formativa se corresponde con la RP4"},{"location":"normativa19/MF0968_3/#capacidades-y-criterios-de-evaluacion_1","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Publicar los contenidos del sistema de informaci\u00f3n utilizando los canales de distribuci\u00f3n de acuerdo a unas necesidades funcionales dadas.</p> <ul> <li>CE1.1: Seleccionar los contenidos del sistema de informaci\u00f3n siguiendo unas instrucciones especificadas.</li> <li>CE1.2: Elegir los canales de distribuci\u00f3n utilizados por el sistema gestor de informaci\u00f3n, para la distribuci\u00f3n de los contenidos de los repositorios o de fuentes externas, seg\u00fan unas necesidades dadas.</li> <li>CE1.3: Usar las herramientas de publicaci\u00f3n de contenidos espec\u00edficas a los canales de distribuci\u00f3n para la comunicaci\u00f3n de los mismos seg\u00fan unas especificaciones funcionales.</li> <li>CE1.4: Aplicar los procedimientos de publicaci\u00f3n y administraci\u00f3n de contenidos, seg\u00fan el formato y tipo de informaci\u00f3n, para permitir su distribuci\u00f3n de acuerdo al dise\u00f1o especificado.</li> </ul>"},{"location":"normativa19/MF0968_3/#contenidos_1","title":"Contenidos","text":"<ol> <li> <p>Canales de distribuci\u00f3n de informaci\u00f3n. Clasificaci\u00f3n y tipos. Portales de informaci\u00f3n</p> <ul> <li>Clasificaci\u00f3n de la informaci\u00f3n:<ul> <li>Qui\u00e9n.</li> <li>Cu\u00e1ndo.</li> <li>C\u00f3mo.</li> </ul> </li> <li>Propietario de la informaci\u00f3n.</li> <li>Responsable de comunicaci\u00f3n.</li> <li>Figura de Community Manager.</li> <li>Gestores de contenidos:<ul> <li>Internos.</li> <li>Externos.</li> </ul> </li> <li>Caracter\u00edsticas, lenguaje de programaci\u00f3n, licencias (Joomla, Drupal).</li> <li>Clasificaci\u00f3n por uso y funcionalidades:<ul> <li>Blogs.</li> <li>Foros.</li> <li>Wikis.</li> <li>Ense\u00f1anza.</li> <li>Comercio electr\u00f3nico (plataforma de gesti\u00f3n de usuarios, cat\u00e1logo, compras y pagos).</li> <li>Publicaciones digitales.</li> <li>Intranet.</li> <li>Extranet.</li> <li>Web 2.0.</li> <li>Redes Sociales.</li> </ul> </li> </ul> </li> <li> <p>Herramientas de comunicaci\u00f3n de contenidos en los sistemas gestores de informaci\u00f3n. Otros procedimientos de publicaci\u00f3n y distribuci\u00f3n utilizando aplicaciones inform\u00e1ticas</p> <ul> <li>Correo electr\u00f3nico (subscripci\u00f3n).</li> <li>Agregador de noticias:<ul> <li>Atom.</li> <li>RSS.</li> <li>Ejemplos.</li> </ul> </li> <li>Agregadores centralizados en servicios web:<ul> <li>Google Reader.</li> <li>My Yahoo!.</li> <li>Bloglines.</li> <li>Netvibes.</li> <li>IGoogle.</li> </ul> </li> <li>Agregadores de escritorio:<ul> <li>FeedReader (Windows).</li> <li>NetNewsWire (Mac).</li> <li>Liferea (Linux).</li> </ul> </li> <li>Redifusi\u00f3n - Sindicaci\u00f3n Web.</li> <li>SMS/MMS.</li> <li>Redes Sociales (fan, seguidores).</li> <li>Generaci\u00f3n de alertas/avisos.</li> </ul> </li> </ol>"},{"location":"normativa19/MF0968_3/#orientaciones-metodologicas","title":"Orientaciones Metodol\u00f3gicas","text":"<p>Secuencia:</p> <ul> <li>Para acceder a la Unidad Formativa 2, debe haberse superado la Unidad Formativa 1.</li> </ul> <p>Criterios de acceso para los alumnos:</p> <p>Ser\u00e1n los establecidos en el art\u00edculo 4 del Real Decreto que regula el certificado de profesionalidad de la familia profesional al que acompa\u00f1a este anexo.</p>"},{"location":"normativa19/MP0459/","title":"M\u00f3dulo de Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n","text":"Campo Detalle C\u00f3digo MP0459 Nombre Pr\u00e1cticas Profesionales No Laborales de Sistemas de Gesti\u00f3n de Informaci\u00f3n Duraci\u00f3n 80 horas"},{"location":"normativa19/MP0459/#capacidades-y-criterios-de-evaluacion","title":"Capacidades y Criterios de Evaluaci\u00f3n","text":"<p>C1: Colaborar en el desarrollo, an\u00e1lisis y gesti\u00f3n de sistemas de informaci\u00f3n.</p> <ul> <li>CE1.1: Analizar los requisitos de desarrollo de los gestores de contenidos corporativos.</li> <li>CE1.2: Evaluar el an\u00e1lisis y dise\u00f1o de los sistemas conforme a los requisitos establecidos.</li> <li>CE1.3: Verificar el uso y reutilizaci\u00f3n de componentes software en la realizaci\u00f3n de los gestores de contenidos corporativos.</li> <li>CE1.4: Apoyar en el desarrollo y mantenimiento de los sistemas que soportan los gestores de contenidos.</li> <li>CE1.5: Colaborar en la realizaci\u00f3n de documentaci\u00f3n de los sistemas que soportan los gestores de contenidos.</li> <li>CE1.6: Investigar nuevas herramientas o actualizaciones de las existentes para mejorar la productividad en el desarrollo.</li> <li>CE1.7: Facilitar la coordinaci\u00f3n entre los grupos de dise\u00f1o, desarrollo, instalaci\u00f3n y despliegue de los gestores de contenido.</li> </ul> <p>C2: Auditar el uso y seguridad de los sistemas de informaci\u00f3n.</p> <ul> <li>CE2.1: Clasificar los gestores de contenidos seg\u00fan su criticidad y valor para la empresa.</li> <li>CE2.2: Proporcionar apoyo en la realizaci\u00f3n de auditor\u00edas de software para la verificaci\u00f3n y mejora de la calidad y seguridad de los gestores de contenidos.</li> <li>CE2.3: Realizar pruebas seg\u00fan normativa y criterios de calidad establecidos en la empresa.</li> <li>CE2.4: Proporcionar asistencia en la aplicaci\u00f3n de las medidas de mejora de la calidad y seguridad de los gestores de contenidos.</li> <li>CE2.5: Reportar informaci\u00f3n a la direcci\u00f3n para un correcto gobierno y gesti\u00f3n de los sistemas de informaci\u00f3n.</li> </ul> <p>C3: Participar en los procesos de trabajo de la empresa, siguiendo las normas e instrucciones establecidas en el centro de trabajo.</p> <ul> <li>CE3.1: Comportarse responsablemente tanto en las relaciones humanas como en los trabajos a realizar.</li> <li>CE3.2: Respetar los procedimientos y normas del centro de trabajo.</li> <li>CE3.3: Emprender con diligencia las tareas seg\u00fan las instrucciones recibidas, tratando de que se adecuen al ritmo de trabajo de la empresa.</li> <li>CE3.4: Integrarse en los procesos de producci\u00f3n del centro de trabajo.</li> <li>CE3.5: Utilizar los canales de comunicaci\u00f3n establecidos.</li> <li>CE3.6: Respetar en todo momento las medidas de prevenci\u00f3n de riesgos, salud laboral y protecci\u00f3n del medio ambiente.</li> </ul>"},{"location":"normativa19/MP0459/#contenidos","title":"Contenidos","text":"<ol> <li> <p>Planificar, definir y crear un gestor de contenidos intranet-extranet</p> <ul> <li>Definici\u00f3n de requisitos funcionales.</li> <li>Valoraci\u00f3n de metodolog\u00edas de dise\u00f1o.</li> <li>Elecci\u00f3n de arquitectura de informaci\u00f3n.</li> </ul> </li> <li> <p>Desarrollo del gestor de contenidos</p> <ul> <li>Estudio de viabilidad.</li> <li>An\u00e1lisis.</li> <li>Dise\u00f1o.</li> <li>Construcci\u00f3n.</li> <li>Implantaci\u00f3n.</li> </ul> </li> <li> <p>Mantenimiento y operaci\u00f3n del gestor de contenidos</p> <ul> <li>Realizaci\u00f3n de planes de auditor\u00eda.</li> <li>Revisi\u00f3n de la seguridad.</li> <li>An\u00e1lisis del rendimiento.</li> <li>Evaluaci\u00f3n del nivel de integraci\u00f3n y optimizaci\u00f3n.</li> <li>Identificaci\u00f3n de aspectos de mejora.</li> <li>Realizaci\u00f3n de informes.</li> </ul> </li> <li> <p>Integraci\u00f3n y comunicaci\u00f3n con los usuarios</p> <ul> <li>Gesti\u00f3n de accesos y publicaci\u00f3n.</li> <li>Normativa y procedimientos de uso.</li> <li>Canales de retroalimentaci\u00f3n, quejas, mejoras.</li> </ul> </li> <li> <p>Integraci\u00f3n y comunicaci\u00f3n en el centro de trabajo</p> <ul> <li>Comportamiento responsable en el centro de trabajo.</li> <li>Respeto a los procedimientos y normas del centro de trabajo.</li> <li>Interpretaci\u00f3n y ejecuci\u00f3n con diligencia de las instrucciones recibidas.</li> <li>Reconocimiento del proceso productivo de la organizaci\u00f3n.</li> <li>Utilizaci\u00f3n de los canales de comunicaci\u00f3n establecidos en el centro de trabajo.</li> <li>Adecuaci\u00f3n al ritmo de trabajo de la empresa.</li> <li>Seguimiento de las normativas de prevenci\u00f3n de riesgos, salud laboral y protecci\u00f3n del medio ambiente.</li> </ul> </li> </ol>"},{"location":"normativa19/ucs/","title":"Unidades de Competencia del Certificado de Profesionalidad IFCD0211","text":""},{"location":"normativa19/ucs/#uc0966_3-consultar-y-extraer-informacion-de-distintas-plataformas-de-almacenamiento-de-datos","title":"UC0966_3: Consultar y extraer informaci\u00f3n de distintas plataformas de almacenamiento de datos","text":""},{"location":"normativa19/ucs/#rp1-interpretar-las-especificaciones-de-diseno-correspondientes-a-los-sistemas-gestores-de-datos-utilizados-por-la-organizacion-para-el-almacenamiento-de-la-informacion","title":"RP1: Interpretar las especificaciones de dise\u00f1o correspondientes a los sistemas gestores de datos, utilizados por la organizaci\u00f3n para el almacenamiento de la informaci\u00f3n.","text":"<ul> <li>CR1.1: Los modelos de datos contenidos en los sistemas gestores de datos se reconocen, identificando las relaciones y dependencias de los elementos que los configuran.</li> <li>CR1.2: La estructura global de la informaci\u00f3n del gestor de datos y su almacenamiento se estudian utilizando las especificaciones del dise\u00f1o, con objeto de localizar las informaciones contenidas en el mismo.</li> <li>CR1.3: La arquitectura, componentes y tecnolog\u00eda que intervienen en el dise\u00f1o se reconocen con el fin de identificar el o los sistemas gestores de datos que contienen la informaci\u00f3n de la organizaci\u00f3n.</li> <li>CR1.4: Las herramientas y lenguajes de consulta y manipulaci\u00f3n para extraer la informaci\u00f3n contenida en los gestores de datos se seleccionan seg\u00fan especificaciones del modelo y la tecnolog\u00eda del gestor de datos.</li> </ul>"},{"location":"normativa19/ucs/#rp2-extraer-transformar-y-cargar-informaciones-contenidas-en-gestores-de-datos-de-distinta-tipologia-utilizando-herramientas-y-lenguajes-de-procesamiento-de-informacion-de-acuerdo-con-especificaciones-tecnicas-y-funcionales-y-cumpliendo-la-normativa-de-proteccion-de-datos","title":"RP2: Extraer, transformar y cargar informaciones contenidas en gestores de datos de distinta tipolog\u00eda utilizando herramientas y lenguajes de procesamiento de informaci\u00f3n, de acuerdo con especificaciones t\u00e9cnicas y funcionales y cumpliendo la normativa de protecci\u00f3n de datos.","text":"<ul> <li>CR2.1: La codificaci\u00f3n, las herramientas y lenguajes seleccionados de los procedimientos de consulta, manipulaci\u00f3n y presentaci\u00f3n de informaci\u00f3n se utilizan seg\u00fan las especificaciones t\u00e9cnicas y funcionales, las necesidades de la organizaci\u00f3n y normativa aplicable.</li> <li>CR2.2: La documentaci\u00f3n inherente a las herramientas y lenguajes de consulta y manipulaci\u00f3n de la informaci\u00f3n se interpreta para obtener la funcionalidad deseada en el proceso de extracci\u00f3n de informaci\u00f3n, teniendo en cuenta las especificaciones t\u00e9cnicas de las mismas.</li> <li>CR2.3: Los procedimientos de extracci\u00f3n y consulta realizados se documentan para su registro seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-configurar-las-pasarelas-y-medios-de-conexion-entre-las-herramientas-cliente-y-los-sistemas-gestores-de-datos-para-establecer-la-comunicacion-entre-ambos-segun-necesidades-de-la-organizacion","title":"RP3: Configurar las pasarelas y medios de conexi\u00f3n entre las herramientas cliente y los sistemas gestores de datos, para establecer la comunicaci\u00f3n entre ambos seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR3.1: La documentaci\u00f3n inherente a la herramienta cliente y al sistema gestor de datos se interpreta para establecer los par\u00e1metros de conexi\u00f3n entre los componentes software que intervienen en la conexi\u00f3n seg\u00fan especificaciones t\u00e9cnicas y funcionales.</li> <li>CR3.2: Los par\u00e1metros de conexi\u00f3n entre las herramientas cliente y los sistemas gestores de datos se implantan para establecer la conexi\u00f3n entre ambos y permitir la extracci\u00f3n de datos de los sistemas gestores seg\u00fan necesidades operativas.</li> <li>CR3.3: Las configuraciones de las conexiones entre las pasarelas y medios de conexi\u00f3n y los sistemas gestores de datos se prueban para determinar la funcionalidad de extracci\u00f3n de datos seg\u00fan las necesidades de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#uc0967_3-crear-y-gestionar-repositorios-de-contenidos","title":"UC0967_3: Crear y gestionar repositorios de contenidos","text":""},{"location":"normativa19/ucs/#rp1-desarrollar-los-componentes-software-de-almacenamiento-estructurado-de-la-informacion-de-una-organizacion-segun-el-diseno-especificado-y-estandares-definidos-por-organismos-de-normalizacion","title":"RP1: Desarrollar los componentes software de almacenamiento estructurado de la informaci\u00f3n de una organizaci\u00f3n, seg\u00fan el dise\u00f1o especificado y est\u00e1ndares definidos por organismos de normalizaci\u00f3n.","text":"<ul> <li>CR1.1: Los componentes software se crean utilizando lenguajes espec\u00edficos orientados a documentos y t\u00e9cnicas est\u00e1ndares, para almacenar de modo estructurado la informaci\u00f3n siguiendo la normativa de dise\u00f1o y modelado de datos establecida por la organizaci\u00f3n.</li> <li>CR1.2: Los componentes software creados identifican la informaci\u00f3n almacenada y los diferentes descriptores de dicha informaci\u00f3n, tanto en contenido como en significado, para su distinci\u00f3n y acceso seg\u00fan la normativa de dise\u00f1o y tratamiento de la informaci\u00f3n de la organizaci\u00f3n.</li> <li>CR1.3: Los idiomas y sus codificaciones, propuestas por la organizaci\u00f3n, se identifican en los elementos software elaborados para el almacenamiento estructurado de la informaci\u00f3n seg\u00fan dise\u00f1o especificado.</li> <li>CR1.4: Los componentes software elaborados se comprueban, para demostrar la funcionalidad de almacenamiento estructurado de la informaci\u00f3n definida por la organizaci\u00f3n.</li> <li>CR1.5: Los componentes creados se integran en el repositorio, utilizando herramientas para obtener la estructura jer\u00e1rquica de los contenidos de la organizaci\u00f3n seg\u00fan especificaciones dadas.</li> <li>CR1.6: Los componentes software creados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp2-desarrollar-componentes-software-con-lenguajes-especificos-para-realizar-la-explotacion-de-las-informaciones-contenidas-en-repositorios-segun-las-necesidades-de-la-organizacion","title":"RP2: Desarrollar componentes software con lenguajes espec\u00edficos, para realizar la explotaci\u00f3n de las informaciones contenidas en repositorios seg\u00fan las necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR2.1: Las especificaciones de las informaciones a consultar se interpretan, identificando los contenidos que se van a utilizar como criterio de clasificaci\u00f3n para el posterior desarrollo del componente software, seg\u00fan especificaciones recibidas.</li> <li>CR2.2: Los componentes software de explotaci\u00f3n de la informaci\u00f3n se codifican de acuerdo con las caracter\u00edsticas y funcionalidades definidas, utilizando herramientas de desarrollo y lenguajes de consulta y orientados a documentos.</li> <li>CR2.3: Los componentes software elaborados se prueban para verificar las funcionalidades de explotaci\u00f3n y manipulaci\u00f3n de la informaci\u00f3n, contenida en repositorios, definida por la organizaci\u00f3n.</li> <li>CR2.4: Los componentes software creados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-integrar-en-el-sistema-de-informacion-de-la-organizacion-contenidos-para-homogeneizar-y-sistematizar-su-explotacion-y-manipulacion-mediante-herramientas-especificas","title":"RP3: Integrar en el sistema de informaci\u00f3n de la organizaci\u00f3n contenidos para homogeneizar y sistematizar su explotaci\u00f3n y manipulaci\u00f3n mediante herramientas espec\u00edficas.","text":"<ul> <li>CR3.1: Las informaciones se localizan en cada soporte para ubicarlas dentro de la jerarqu\u00eda del repositorio, seg\u00fan las necesidades y especificaciones de la organizaci\u00f3n.</li> <li>CR3.2: Los componentes software se codifican con los lenguajes de programaci\u00f3n espec\u00edficos, para realizar la integraci\u00f3n de las informaciones en el repositorio seg\u00fan especificaciones recibidas.</li> <li>CR3.3: La configuraci\u00f3n de las herramientas de transformaci\u00f3n y conversi\u00f3n de datos para la integraci\u00f3n de contenidos, se realiza de acuerdo a los par\u00e1metros y caracter\u00edsticas de la tecnolog\u00eda utilizada.</li> <li>CR3.4: Las informaciones contenidas en otras plataformas se integran en el repositorio utilizando herramientas de transformaci\u00f3n y conversi\u00f3n, para facilitar el proceso seg\u00fan especificaciones de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#uc0968_3-administrar-el-sistema-de-gestion-de-informacion","title":"UC0968_3: Administrar el sistema de gesti\u00f3n de informaci\u00f3n","text":""},{"location":"normativa19/ucs/#rp1-implementar-los-mecanismos-de-seguridad-de-acceso-al-sistema-de-gestion-de-la-informacion-segun-necesidades-de-la-organizacion","title":"RP1: Implementar los mecanismos de seguridad de acceso al sistema de gesti\u00f3n de la informaci\u00f3n seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR1.1: Los roles se definen de acuerdo con las necesidades de la organizaci\u00f3n, para simplificar las tareas de acceso y seguridad en el sistema de gesti\u00f3n de la informaci\u00f3n.</li> <li>CR1.2: Las pol\u00edticas de acceso por parte de los usuarios a los recursos del sistema de gesti\u00f3n de informaci\u00f3n se aplican, para asegurar el uso de los mismos seg\u00fan especificaciones de seguridad de la organizaci\u00f3n.</li> <li>CR1.3: La gesti\u00f3n de usuarios, grupos, perfiles, privilegios, propiedades y otras caracter\u00edsticas, se realiza utilizando las herramientas espec\u00edficas del sistema de gesti\u00f3n de informaci\u00f3n, para optimizar el proceso administrativo seg\u00fan necesidades del sistema.</li> <li>CR1.4: Los accesos definidos para los usuarios y sus correspondientes restricciones se comprueban, para verificar los mecanismos de seguridad implementados del sistema de gesti\u00f3n de informaci\u00f3n, seg\u00fan par\u00e1metros de calidad y seguridad de la organizaci\u00f3n.</li> <li>CR1.5: Los procesos realizados se documentan para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp2-realizar-procesos-de-auditoria-en-el-sistema-de-gestion-de-informacion-para-mantener-y-controlar-el-rendimiento-del-sistema-segun-especificaciones-de-la-organizacion","title":"RP2: Realizar procesos de auditor\u00eda en el sistema de gesti\u00f3n de informaci\u00f3n, para mantener y controlar el rendimiento del sistema seg\u00fan especificaciones de la organizaci\u00f3n.","text":"<ul> <li>CR2.1: Los ficheros de registros de actividad se identifican, configuran y mantienen en el sistema de gesti\u00f3n de informaci\u00f3n, para realizar la recogida de los datos correspondientes a los sucesos a registrar seg\u00fan especificaciones de seguridad y rendimientos de la organizaci\u00f3n.</li> <li>CR2.2: Las alertas y alarmas se definen y configuran en el sistema de gesti\u00f3n de informaci\u00f3n, para controlar los niveles de acceso y rendimiento del sistema seg\u00fan especificaciones de seguridad y rendimiento de la organizaci\u00f3n.</li> <li>CR2.3: Las incidencias detectadas en el sistema de gesti\u00f3n de informaci\u00f3n se solucionan para asegurar la funcionalidad del sistema, seg\u00fan especificaciones t\u00e9cnicas y necesidades de rendimiento de la organizaci\u00f3n.</li> <li>CR2.4: Los procesos de auditor\u00eda se supervisan en su ejecuci\u00f3n para asegurar los par\u00e1metros de seguridad y rendimiento del sistema, seg\u00fan especificaciones de seguridad y rendimiento de la organizaci\u00f3n.</li> <li>CR2.5: La gesti\u00f3n de los procesos de auditor\u00eda se documenta para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp3-mantener-los-procesos-de-flujo-de-las-informaciones-con-herramientas-especificas-para-garantizar-la-trazabilidad-de-los-contenidos-segun-especificaciones-de-la-organizacion","title":"RP3: Mantener los procesos de flujo de las informaciones con herramientas espec\u00edficas, para garantizar la trazabilidad de los contenidos seg\u00fan especificaciones de la organizaci\u00f3n.","text":"<ul> <li>CR3.1: Los contenidos involucrados en el flujo de informaci\u00f3n se identifican y referencian dentro del sistema de gesti\u00f3n de informaci\u00f3n, as\u00ed como las relaciones y actividades a realizar con ellos, para la realizaci\u00f3n de los procesos de trazabilidad y seguimiento de los mismos seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR3.2: Los flujos de informaci\u00f3n se identifican para realizar su seguimiento y verificaci\u00f3n, seg\u00fan las especificaciones administrativas y funcionales de la organizaci\u00f3n.</li> <li>CR3.3: Las herramientas de flujos de informaci\u00f3n se utilizan para realizar los procesos de trazabilidad y seguimiento de la informaci\u00f3n, seg\u00fan especificaciones administrativas y funcionales de la organizaci\u00f3n.</li> <li>CR3.4: Los flujos de informaci\u00f3n se mantienen para conservar actualizado el sistema de gesti\u00f3n de informaci\u00f3n y los procesos de trazabilidad, seg\u00fan especificaciones recibidas.</li> <li>CR3.5: Los diagramas y documentos que describen los flujos de informaci\u00f3n del sistema se registran y almacenan, para asegurar su disponibilidad para posteriores consultas seg\u00fan normativa de la organizaci\u00f3n.</li> <li>CR3.6: El control de las versiones de las informaciones del repositorio se realiza mediante la utilizaci\u00f3n de herramientas espec\u00edficas, para garantizar la seguridad del registro de la informaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR3.7: La gesti\u00f3n de la trazabilidad de los contenidos se documenta para su registro y posterior utilizaci\u00f3n, seg\u00fan normas de la organizaci\u00f3n.</li> </ul>"},{"location":"normativa19/ucs/#rp4-distribuir-los-contenidos-del-sistema-de-gestion-de-informacion-para-su-divulgacion-y-utilizacion-segun-necesidades-de-la-organizacion","title":"RP4: Distribuir los contenidos del sistema de gesti\u00f3n de informaci\u00f3n para su divulgaci\u00f3n y utilizaci\u00f3n, seg\u00fan necesidades de la organizaci\u00f3n.","text":"<ul> <li>CR4.1: Las herramientas de consulta del usuario final al sistema de gesti\u00f3n de informaci\u00f3n se identifican y habilitan, para su utilizaci\u00f3n por parte de los mismos seg\u00fan las pol\u00edticas de la organizaci\u00f3n.</li> <li>CR4.2: Los contenidos a distribuir se seleccionan y organizan para su utilizaci\u00f3n y posterior acceso por parte de los usuarios, seg\u00fan criterios de dependencia y homogeneidad en funci\u00f3n de las especificaciones de la organizaci\u00f3n.</li> <li>CR4.3: Los contenidos del sistema de gesti\u00f3n de informaci\u00f3n se integran en el canal de distribuci\u00f3n, para su divulgaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.4: Las pol\u00edticas de acceso a la informaci\u00f3n se incluyen en la gesti\u00f3n de canales de distribuci\u00f3n, para impedir utilizaciones no autorizadas de informaci\u00f3n seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.5: Los procesos de mantenimiento y control del canal de distribuci\u00f3n se realizan de forma peri\u00f3dica, para asegurar su funcionalidad y rendimiento seg\u00fan especificaciones de la organizaci\u00f3n.</li> <li>CR4.6: La documentaci\u00f3n de los procesos realizados se realiza para cumplimentar las necesidades de gesti\u00f3n y registro del canal de distribuci\u00f3n, seg\u00fan especificaciones de la organizaci\u00f3n.</li> </ul>"}]}